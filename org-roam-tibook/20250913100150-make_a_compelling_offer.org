:PROPERTIES:
:ID:       5C7A0B37-8984-4A1F-8371-C1FCEB637174
:END:
#+title: Make a Compelling Offer
#+filetags: :Chapter:
* Make a Compelling Offer
** The Elements Of A Compelling Offer

You've defined a Strategic Intent that your stakeholder cares about. Thanks to that work, you have a shared long-term goal you can speak to. You understand how your work contributes to that goal.

You've taken the time to develop an empathetic understanding of your stakeholder's key emotions. You can speak to the situation they find themselves in. You can list frustrations they want smoothed away. You can name things they want, that they feel like they're not getting.

You're ready to make them a compelling offer to adjust how you work together.

When you deliver that compelling offer, you'll methodically go through four steps, checking for understanding after each:

1. *Name the shared long-term goal*

2. *Share your understanding of their concerns*

3. *Share your own concerns*

4. *Propose an adjustment in how you work together*

This adjustment should, ideally:

 - Make things a little better for you

 - Make things a little better for your stakeholder

 - Move you /both/ a little closer to your shared long-term goal

Be ready to spend real time preparing this offer.

It takes time to come up with something crisp, clean and compelling. Talk to some friends about how they've faced similar collaboration challenges at their jobs. Try out new ways to frame your stakeholder's concerns, to find a truly emapthetic way to speak to their underlying feelings. Brainstorm the smallest possible adjustment that you could propose, that would still help you just a little bit. Spend time refining and testing your understanding of what your overall business is trying to do, to see if you can find creative new ways to move towards long-term goals.

In the next chapter, we'll see Quin go through this process, ending with her delivering an offer to Marco.

Before we jump ahead to that, though, I want to share a suite of tactics for you to explore. If you've done the work to align on strategic outcomes, and to map your stakeholder's key emotions, you have at your disposal a somewhat surprisingly wide variety of ways to get unstuck. A somewhat surprisingly wide variety of ways to draw your stakeholder into productive collaboration.

To bring that variety of options to life, I'm going to, first, list them in summary form. For each, I'll first name a problem you might run into with stakeholders, and then sketch in the corresponding action you could take.

In the remainder of the chapter, I'll explore each tactic in more detail, bringing many to life with narrative examples.

Feel free to dip in an out of these, depending on what problems you run into with your very own stakeholder.

But remember, for all of them, you're working backwards from being able to:

1. Name the shared long-term goal

2. Share your understanding of their concerns

3. Share your own concerns

4. Propose an adjustment in how you work together

Okay, let's dig in.

** A Catalog of Tactics

*** Propose a Timebox
Problem: your stakeholder is reluctant to consider a change in their behavior.

Solution: Ask your stakeholder to just try changing their behavior for an initial, limited period of time.

*** Offer A Future Decision
Problem: Your stakeholder is a human being. Therefore, agreeing to change their behavior /because someone asked them to/ makes them feel like they're losing control.

Solution: Ensure that your initial, timeboxed increment of change ends with a decision that your stakeholder gets to make, so they still feel in control over the process.

*** Shrink Your Ask
Problem: Truly improving how you work together requires a complex adjustment, and you can't see a way to implement it all at once.

Solution: Shrink your ask to implementing just a *part* of that better way to work, even if that doesn't immediately improve things for you.

*** Link Frustrations To Outcomes
Problem: Your stakeholder doesn't seem to hear your concerns as valid or important. They don't understand why "your" problems matter for the business.

Solution: Run a Five Whys to develop a chain of consequences that shows how your day-to-day frustrations, if left unchecked, will eventually impact your company's long-term goals.

*** Tell A Story Of Growing Danger
Problem: You've worked out a way to connect your current frustrations to longer-term strategic outcomes, but the connections feel dry and unconvincing.

Solution: Use the structure of a *story* to render your concerns vivid, immediate and memorable to your stakeholder.

*** Create Urgency Through Visibility
Problem: Your stakeholder accepts that your frustrations matter, but they seem unwilling to do anything *now*.

Solution: Create visibility into the early impact of the underlying problems, so that you can both motivate immediate action, *and* make it possible to see incremental improvement.

*** Invite Your Stakeholder To Solve Your Problems
Problem: You need to ask your stakeholder to change their behavior, but doing so could make them feel attacked, in which case they may angrily resist.

Solution: Find a non-judgmental way to describe the results of their behavior as a problem for the two of you to solve together. Ask them open-ended questions that offer them a chance to be an expert, and solve the problem you're laying out to them.

*** Find Wins For Your Stakeholder By Hook Or By Crook
Problem: You can't figure out a way for your adjustment to immediately improve things for your stakeholder. Try as you might, you don't see how to address your frustrations in a way that directly benefits them.

Solution: Find some stakeholder wins that you *can* offer, even if they're not strictly necessary for your adjustment.

*** Keep 'Em Busy
Problem: You need to ask your stakeholder to stop doing something. You're worried that they will resist, because they are a human being, and thus like doing things.

Solution: Find a way to ask your stakeholder to *start* doing something new, *instead* of their existing behavior. Allow them to channel their energy into that new thing.

*** Address Fears Directly
Problem: Your proposed adjustment might raise concerns or fears for your stakeholder, such that they resist making a change.

Solution: In your request for change, first validate their fears and then address them directly.

*** Put Yourself On the Line
Problem: You're worried that your stakeholder will be reluctant to commit to your proposed adjustment, because, being human, they will feel like they'll have to do all the hard work.

Solution: Make it easier for them to say yes by making it clear that you will personally take on extra work, and/or face some hard thing.

** Propose a Timebox

Problem: your stakeholder is reluctant to consider a change in their behavior.

Solution: ask your stakeholder to try changing their behavior for an initial, limited period of time.

If your request feels slightly uncomfortable for your stakeholder (as it often will!), it's *much* easier for them to say "yes" if you're asking for a few weeks, than it is to agree to make a change indefinitely.

Usually, you'll want the initial period to end with some kind of "review of how it's been going" (which is a very naural opportunity to Offer A Future Decision).

If you can get a commitment to try something new for this short period of time, you can then work to ensure that, at the end of that initial period, the stakeholder experiences things as going well.

Example:

Louisa is a staff engineer at Hydralitics, a business intelligence platform focused on utility companies. A key part of her job is conducting regular architecture reviews with the teams in her domain. Unfortunately, her CTO, Jameson, has developed a frustrating habit of dropping by those architecture reviews and derailing them with half-baked proposals.[fn:: "Wait, Dan, I just remembered: *you've* been a CTO. Did your directs ask you to stop talking at architecture reviews at some point?" Um... maybe we should just move on.] Jameson always starts by saying, "Is it okay if I ask a question?" But somehow all his "questions" end up turning into thinly veiled suggestions, pretty much all of which are useless thanks to key bits of technical reality he doesn't fully understand. If Louisa hears him say "I don't know, but it seems to me like we could..." one more time, she is going to scream. His interruptions are undercutting her authority, eating up time in the meetings, *and* sending the teams down a succession of blind alleys. Her partner is starting to finish her Jameson-releated sentences at dinner, "I know, Louisa, Jameson is smart, but Jameson just doesn't know what he's talking about in your area, Jameson should maybe learn to shut up sometimes. And could that maybe be the last Jameson thing for tonight? Pretty please?"

When Louisa has a minute to think, she tries to imagine saying: "Jameson, please stop talking during architecture reviews." Or, even: "Jameson, please stop coming to the reviews." But she gets an immediate pit in her stomach. Those feel like uncomfortably aggressive demands.

She's stuck for a while, just getting more and more frustrated. But then, one night, she's talking out life with a friend over beers, and discovers that her friend is something of a master of the ju-jitsu of stakeholder management. That friend pushes her to think about asking for a brief, timeboxed change, instead of some intimidatingly permanent shift. She also suggests tha Louisa think about Jameson *likes* about attending the architecture reviews.

Louisa feels oddly charged up on her walk home. Somehow the license to ask for a limited change feels very freeing. And, with her mind now working away, she starts getting ideas about how to speak to Jameson's underlying feelings (as her partner well knows, Louisa has spent plenty of time analyzing All Things Jameson).

# about both Jameson's concerns, and also what things he really enjoys. "You know," Louisa says to her friend, "I'll bet part of it is that he likes seeing the team at work. He's really good at that, if I'm going to be honest. He just picks up on, like, all these little things." Her friend toasts her with her pint glass. "And there you go."

The next day, she grabs a bit of time with her CTO. After some initial chitchat, she takes a deep breath and says, "I'd like to ask if we can try out something new for tomorrow's arch review. First off, I want to make sure you can stay on top of how the architecture is evolving, *and* I want you to be certain that you get to see the team at work. My sense is that it's super valuable for you to *see* who on the tech track is really stepping up. So I think it's really good that you're there."

Jameson nods, and it's clear to Louisa her guess was right: one of the things Jameson really likes is being able to get a window into the performance of the senior and staff engineer cohort. She continues.

"But, unfortunately, sometimes, when you ask questions, I think the team gets confused. They're not sure if you're just trying to fill in your own understanding, or if you're telling them your decision, or if you're asking them to go off and explore something. I'm struggling a bit to keep everyone on track. Both during the meetings, but also afterwards."

"For tomorrow's session, if you're okay with it, I'll ask you to listen and take notes, but to not speak up during the actual discussions. I'll meet with you 1:1, immediately after, to dig into any questions you have, and to get your feedback on both the team and the architecture. We can also talk then about if that feels like a useful pattern for future reviews, or if we'd want to tweak it."

Jameson thinks for a moment, then shrugs. "I can try that for tomorrow, sure. I might want to have one of the directors also stay to talk about the team, but we can wait and see how it goes. Do you want me to, like, say absolutely nothing? Or just not talk as much?"

He seems genuinely open, so Louisa says, "For tomorrow, I'd love to try having you say absolutely nothing."

"Can do," says Jameson. And they move on to other topics.

To Louisa's pleasant surprise, it didn't feel hard to make her request. Instead of making a demand, she was offering Jameson a sort of shared experiment, to enter into together. And the, adjusting the details together felt like a nice bit of working together.

Other tactics she used:

 - Put Yourself On the Line: she personally committed to spending extra time with him after the session.

 - Keep 'Em Busy: instead of just asking Jameson to stop talking, she asked him to do something specific instead -- take notes so he can give feedback on the team and the architecture.

 - Find Wins For Your Stakeholder By Hook Or By Crook: even though it wasn't stricly necessary for her own needs, she created a new opportunity for Jameson to discuss team performance, which she knows he finds both valuable and meaningful.

** Offer A Future Decision

Problem: Your stakeholder is a human being. Therefore, agreeing to change their behavior /because someone asked them to/ makes them feel like they're losing control.

Solution: Ensure that your initial, timeboxed increment of change ends with a decision that your stakeholder gets to make, so they still feel in control over the process.

That will help them feel in control, which makes it much easier for them to say yes.

Example

Jonas is a product manager at BoardedUp, a board game subscription service. He is, unfortunately, struggling with his engineering peer Lizabet, the engineering manager and tech lead for their team. Lizabet won't let her engineers start any work, until Jonas first writes /extremely/ detailed tickets. She wants every ticket to contain enough information that any engineer on the team could pick up any ticket and fully deliver it, without having to "slow down" to ask Jonas questions. Lizabet insists this is necessary to avoid wasting the team's time, and also says the it will make them extremely efficient. However, Jonas has worked on teams where the engineers and PM's wrote much more informal tickets, then talked to each other steadly throughout the sprints, and it felt like things went much faster.[fn:: 100% of the highest-performing teams I've been on and/or witnessed all talked to each other a *ton*. Just about all of them leaned on pretty lightweight ticket-writing as part of that.]

Jonas goes through the various steps we've laid out, and comes up with a proposed adjustment. The core change will be for Jonas to run sprint planning with much lighter, shorter tickets. He will spend planning discussing some of the nuances of those tickets with the whole team, ensuring everyone has a shared understanding. Then, throughout the sprint, Jonas will commit to being available at the drop of a hat to answer any and all engineering questions. Finally, as an extra win, he proposes a carve out of time to improve the team's deploy scripts, a long-standing engineer frustration.

But, even with all of that planned out, he's still worried about approaching Lizabet with his request.

She's fairly new as a manager, and he knows she feels concerned about her authority with the team (some of who have been professional programmers since she was in high school). He's worried that she's put some kind of a stake in the ground about this way of working.

After talking it over with his manager, he decides to really focus on this as a temporary experiment, and one where *Lizabet* will get to decide whether or not it's working. He decides to close his pitch to her by saying, "You and I would meet immediately after sprint demo.[fn:: Why not after retro? Jonas and Lizabet's team has fallen out of the habit of doing a regular sprint retro. That should likely be the next thing for him to work on.] I'll want to hear from you how this change has been working for the team, and if there's anything whatsoever that's been difficult about it. I can share how it's been working on my end. At that point, you can make the call on whether or not to stick with this new way of working. If it seems like there's something good in it, you and I could decide on any adjustments. Most of all, I want to be certain both you and the engineers don't end up feeling like we're wasting their time."

Given this clear signaling that she'll retain control, Lizabet proves willing to try this experiment for a sprint. She does ask that any ticket touching the datbase schema get *some* extra details, which Jonas is happy to agree to. They pitch the change to the team together, and Jonas can see that both Lizabet and her engineers are a little excited by shaking things up.

** Shrink Your Ask

Problem: Truly improving how you work together requires a complex adjustment, and you can't see a way to implement it all at once.

Solution: Shrink your ask to implementing just a part of that better way to work, even if that doesn't immediately improve things for you.

If you can draw your stakeholder into steady collaborative improvements, you can then layer in the other pieces of the puzzle.

Example:

Oliver is an engineering director at Rugger, a leading online purveyor of artificial grass and turf. Oliver leads a handful of teams who maintain his company's backend fulfillment systems. This quarter, he's working with his product peer, Alicia, to integrate their systems with a partner who builds and maintains fields for college athletic departments. Once that integration work is done, his company will be able to offer colleges packaged purchase, delivery and install services, which should unlock a significant boost in revenue.

Unfortunately, Olvier feels like his team is barely making any progress, because they're completely swamped with support requests from the warehousing and shipping teams who depend on the existing systems.

There's no simple fix. They can't just abandon their existing users (the resulting customer complaints have a way of getting back to the CEO). They also can't just hit an indefinite pause on the integration work---half the company's revenue forecasts seem to count on it.

Fortunately, Oliver does have an idea he thinks could really help. He wants to put in place a new, much more visible triage process for warehousing and shipping issues. He believes doing so will create two benefits:

 - First, he'll be able to force explicit tradeoffs between handling current issues and building the new integration

   Currently, the engineers are sort of vaguely expected to just get it all done, aka make their own, local decisions about how to spend their time.

 - Second, he can identify where they can make the highest leverage fixes

He strongly suspects there are a couple of places in their legacy systems that are responsible for most of the issues. But he doesn't know which parts, and so he can't make a case to Alicia other than "We should fix our legacy systems", which is a total non-starter. If they can centralize bug handling through a triage process, he has at least a shot at seeing patterns he can then act on.

Unfortunately, to see these benefits, he'd have to put in place *multiple* changes:

 - He'd have to persuade Alicia to spend political capital to push the ops teams into this new triage process

 - They'd have to figure out who, exactly, does the key triage decision-making. Alicia *doesn't* do this right now, and isn't going to be super excited about taking it on.

 - Oliver will have to figure out how to link ops team-reported issues to the code that caused each problem (often far upstream of the reported issue)

 - He and Alicia will then need to carve out time to fix those underlying problems.

Until all that happens, he's not going to see any speed ups in delivery velocity, nor much improvement in engineer focus time.

After a few weeks of feeling stuck, he decides to just get started with something small, to try to build some momentum towards what he ultimately thinks they need.

He asks Alicia to join him in a new, weekly thirty minute meeting with his three engineering leads. He asks each lead to bring to that meeting:

 - A rough estimate of how much time their engineers spend dealing with ops team issues that week

 - The top two or three "themes" of those issues

That's it. They can get going with that right away. It's a very modest ask of Alicia.

Note: this won't free up any time---in fact, it means his tech leads have to do something new. But it is a meaningful first step towards setting up that triage process. It builds alignment with Alicia on the value of reducing time spent on issues, because she can now *see* just how much time the engineers are spending. It should also show her and Oliver some options for reducing that time. If they can identify a small number of themes which drive most of the issues, they can make a targeted technical investment to clean up those underlying problems.

It gets Oliver closer to the triage meeting he ultimately wants. To get all the way there, he could gradually expand on that initial thirty minute meeting, layering in the other parts of how he thinks the triage could/should work.

This tactic pairs well with both Propose a Timebox, and Create Urgency Through Visibility (in the above, Oliver is creating a form of visibility).

** Link Frustrations To Outcomes

Problem: Your stakeholder doesn't seem to hear your concerns as valid or important. They don't understand why "your" problems matter for the business.

Solution: Go through a Five Whys to develop a chain of consequences that shows how your day-to-day frustrations, if left unchecked, will eventually impact your company's long-term goals.

The Five Whys process, famously associated with Toyota[fn:: A company profoundly worthy of study.], simply means asking "Why?" over and over again, to probe deeply beneath the surface of some challenge or problem.

Below, I'll provide a detailed example of how to use this technique to connect your immediate concerns to long-term business outcomes.

However, before we dive into that, we have to first decide: who are you asking your "Whys" *of*?

My recommendation is to start by asking *yourself*. Use this to build your own mental model. Perhaps then continue with a trusted friend.

In general, I *don't* recommend asking a relentless series of "Whys" of your stakeholder. Why not? Unfortunately, many stakeholders find this kind of rigorous probing, *well*, frustrating. They can get defensive, and resent having to "explain themselves."[fn:: E.g. Louis CK does a brilliant riff in Hilarious on how it feels to be on the receiving end of a Five Whys, in the context of parenting young children, not of running a business, but it's surprisingly similar?] That said, if your tactical empathy skills are strong, and your stakeholder welcomes rigor in your collective thinking, go for it! Otherwise, I recommend going through the cycle of repeated "Whys" on your own. Doing so will usually generate some specific questions for you to take to your stakeholder, to fill in missing parts of your picture of the business. You can ask them those more specific questions, instead of the blunt series of Whys.

Here's how you can use the Five Whys.

Name the immediate frustration you're experiencing.

Ask, "Why is this a problem for the business?"

Then, whatever answer you come up with, ask that same "Why" question again.

Keep doing that, over and over, until you eventually arrive at the strategic intent you've extracted from your stakeholder. If you can't get to the strategic intent, talk to some people, keep refining your understanding of the business. You may even end up realizing that your current frustrations *aren't* related to achieving that strategic intent, no matter how hard you look (this isn't bad! It will let you focus your advocacy on things that do matter!).

# That chain should not only show the importance of dealing with your frustrations, it should also help identify some leading indicators, which you can then target for creating visibility.

Example:

Sagar works as an engineer at InfinitePool, a B2B company that sells applicant tracking systems to talent departments at large enterprises. Sagar is the tech lead on a sprint team that owns the hiring manager experience within the overall product. Unfortunately, Sagar suffers from the misfortune of being both experienced and nice. As a result, InfinitePool's sales reps just /relentlessly/ pester Sagar with feature requests. When a sales rep doesn't get an immediate response, they ping Sagar over and over in Slack to "check for status". Last month, at the company party, Sagar saw Jordy, a sales rep, striding towards him with a big grin on his face, and Sagar had to fight an overwhelming desire to run away.

#  Each sales rep claims that their own large, opinionated customer will churn if they don't get their feature, right away.
# , out of fear that Jordy would try to browbeat him into working on Jordy's pet feature.[fn:: He was right.]

Sagar has been trying to get his product manager, Emily, to step in and wrangle the sales team, but, so far, she's been unwilling to do so. Sagar has to admit that Emily has plenty to do to organize the work the team is *supposed* to be doing. Furthermore, these feature requests (of course) come in as "bugs", and Emily genuinely doesn't have time to review every single bug report. But neither does Sagar! He and his team are getting more and more miserable, having to spend every day fending off angry requests they can't possibly satisfy.

Sagar *has* managed to extract a meaningful strategic intent from Emily: within the next eighteen to twenty-four months, InfinitePool needs a new product to sell to enterprise talent departments, in order to keep growing revenue. The current best bet is to find a way to help companies handle the overwhelming tidal wave of resumes that pour in, now that AI assistance has spread through the applicant pool.[fn:: The sharp-eyed among you will recognize that, in this moment, our story has taken something of an abrupt turn to aspirational fantasy! I would /love/ to tell you that most companies set strategic product goals around *customer problems* instead of *cool-sounding products*, but that has not been my experience! I'm sure such companies exist, but they are hella rare! We'll explore this in more depth in the "We Need a New Product ASAP!" case study.]

Sagar wants to make his case to Emily one more time, but he's worried it's going to sound like he's just bitching about doing maintenance. And their day-to-day work is so far removed from that long-term goal, all he can come up with is, "The engineers are getting pissed." Which doesn't sound compelling, even to him. That sounds like a problem for /Sagar/, not for /InfinitePool/.

Then, one day, on a break in the office kitchen, Sagar runs into his friend Anamika, who leads the job listings ingest team. Anamika hears him out, and then suggests he does a Five Whys.

"A what what?" asks Sagar, grabbing a bag of salted almonds from the snack wall.

"A Five Whys. Look, we can do it right now. What's the thing that's frustrating you, again?"

"What I just said. The sales reps keep interrupting me with 'urgent' feature requests." Sagar makes bitter air quotes with his fingers.

Anamika casually waves that aside, "Okay, why is it a problem for the business that the sales team keeps interrupting you with 'urgent' feature requests?"

That's easy, thinks Sagar. "Because it's *distracting* me. *And* the other engineers." He pops an almond into his mouth.

"Why is it a problem for the business that you and the other engineers are distracted?"

What kind of question is that? Being distracted is, just bad in and of itself, right? Sagar chews on his almond, relishing the sharp tang of salt. Why is it bad for the /business/, not just for him and his team? Oh, wait, that's actually easy, too. "Because the team as a whole isn't moving as *quickly* as we could be."

Before Sagar can feel satisfied for even a moment, Anamika nods and asks again: "Why is it a problem for the business that the team isn't moving as fast as it could be?"

Sagar wants to say, "because we're falling behind our sprint goals", but he knows Anamika will just ask him why again. So he tries instead to think about what Emily is working backwards from. Luckily, she often takes a few minutes during sprint planning to share the whys behind what they're building. Sagar says to Anamika, "Because it's pushing out the delivery of the early prototypes we're trying to build."

"Mmm-hmmm," says Anamika, brushing a strand of hair out of her face. "Why is it a problem for the business if it takes a little longer to build those prototypes?"

Sagar is finding himself slowing down. It's like he's having to imagine the overall business around him as a sort of machine, working towards some outcome. Finally, he says, deliberately, "I... think it's because the ProdDev teams need to test prototypes with customers, as soon as possible. And I think we need to do that to, like, identify a /specific/ product we could build that might solve the resume overload problem for our customers."

Anamika quirks her head to one side. "Why is it a problem for the business if it takes a little longer to identify one specific product opportunity for solving resume overload?"

Sagar feels a spike of excitement as he realizes he's just about made it to the strategic outcome that Emily told him the exec team won't stop talking about. He says to Anamika, "InfinitePool needs to develop a new product to sell, and before we can commit multiple teams to development, we need to identify one specific product opportunity that could potentially solve resume overload."

Anamika asks, one final time, "Why is a problem for InfinitePool if it has to wait a little longer to start selling a new product?"

With an odd feeling of satisfaction, Sagar says, "Because top-line revenue growth has stalled, and we need to show more growth by our next funding round, which is only eighteen to twenty-four months out. And we believe we can only show more growth if the sales team has something new to sell." He sits back.

"And there you go," says Anamika.

With that end-to-end understanding clear in his mind, Sagar realizes he can *authentically* explain how a reduction in the frequency of interruptive requests from the sales team can, in a small but real way, increase the odds of the company achieving its long-term goals. And, conversely, he can show how every week they *don't* fix that broken pattern, they're slowly drifting further behind.

Having all those specific steps gives him much more clear ammunition than just a vague sense that the engineers are unhappy.

That chain of consequences also allows Sagar to define *leading indicators*: near-term outcomes that his team can only achieve if they get the sales reps to stop blowing up his focus. In this case, that's delivery of early prototypes. Having some options for leading indicators sets him up to use the Create Urgency Through Visibility tactic, and wrap that up in Tell A Story Of Growing Danger.

Finally, by having made the connection to the exec team's highest priority, he realizes he can approach Emily with ideas for how the two of them can approach their shared stakeholders, *together*. This isn't actually Emily's problem, he realizes, it's the VP of Sales's problem. That VP wants a new product for her team, absolutely as soon as possible. And she is also the only force on earth who can stop her reps from bending the rules to keep their own customers happy.

Sagar's mind is whirring with possibilities.

** Tell A Story Of Growing Danger

Problem: You've worked out a way to connect your current frustrations to longer-term strategic outcomes, but the connections feel dry and unconvincing.

Solution: Use the structure of a *story* to render your concerns vivid, immediate and memorable to your stakeholder.

Thanks to several million years of work by evolution, human beings have certain storytelling structures wired deeply into our minds. If you can frame a request using one of those structures, you can take advantage of that wiring to bring your concerns vividly to life.

There's one story structure which I have found particularly useful for sharing business challenges. That structure is "A Story of Growing Danger". Such a story can use steps of a heroic arc, ala:

 - The world is at peace

 - A danger emerges that threatens that peace

 - A hero tries to face the danger, struggles, and fails

 - The danger intensifies

 - The hero discovers new strength within themselves

   (Often with the help of a friend or mentor)

 - The hero overcomes the danger and creates a better world

Now, you may well be saying to yourself, "Um, Dan, what on earth are you talking about? Do you have some kind of obsession with empowerment fantasies?[fn:: I mean, *yes*, obviously.] We're talking about running a business here. I need help with hitting my OKR's, I don't need to hear your random mutterings about heroic journeys."

Of course, of course. But just stick with me for a moment, and let's see if we can bring this to life.

Example

Ted is an engineering director at MediMates, a tech-enabled online pharmacy. Ted's teams own the systems supporting back-end pharmacy operations: prescription review, safety checks, labeling and shipping.

Early in MediMates's history, those operational systems were thrown together to support a handful of pharmacists, serving a few hundred patients in total. Today, Medimates employs nearly one hundred pharmacists, and fills prescriptions for over twenty thousand patients. The backend systems are really struggling to meet current needs. Ted desperately wants to hit pause on delivery of new features, so that he and his team can clean up some particularly nasty legacy bits.

# In particular, he's unhappy about the number of high-impact, time-sensitive exceptions that his team has to fix by hand.

Unfortunately, Ted has been facing a major challenge in getting, well, any time on their roadmap whatsover. His main stakeholder is the VP of Pharmacy Operations, Amitai. When MediMates's CEO hired Amitai six months ago, he handed him a set of extremely ambitious targets around both scale and efficiency. Amitai spent his first few weeks drafting a fifty-six page PowerPoint deck, detailing a sprawling list of features.[fn:: Why yes, Amitai *did* work for McKinsey earlier in his career, funny that you ask.] All they ever seem to do is move through that deck, one feature at a time.

Ted has been feeling *very* stuck for a while.

# The engineers on his team are looking at him in desperation. Every planning session where they can't seem to carve out any time away from new features makes him feel powerless and frustrated.

Luckily, Ted's boss, Kelsey, has helped him go through the kind of work we've been describing. Ted has learned that MediMates's key long-term strategic goal is to enable same-day delivery of prescriptions. That's what their near-term targets around scale (aka, pharmacist count) and efficiency (aka, mean-time-to-fill) are ultimately driving towards.

With Kelsey's help, he went through a Five Whys, and identified a specific, visible business risk of their legacy systems: his engineers are spending a *crazy* amount of time scrambling around fixing urgent exceptions reported by the pharmacist team.

# He's done the Five Whys (Link Your Frustrations To Outcomes), and can therefore point at a specific issue from the legacy systems that, if left unchecked, will ultimately make it impossible for them to achieve that goal: thanks to both the limitations and the instability of the legacy systems, the engineers are spending a *lot* of time fixing high-impact, time-sensitive exceptions from the pharmacists who use their systems.

# Given the above, how could Ted frame his concerns to Amitai?

# What might you say, if you were in Ted's shoes?

Excited to be able to speak to business outcomes, Ted sits down with Amitai before their next team planning session. "I know how important it is to scale up our pharmacist count, and to keep taking time out of our mean-time-to-fill. But, if we're going to hit our long-term goal of same-day delivery, I think we should pause feature delivery so my teams can reduce the rate of exceptions they have to hand fix." He feels proud about how clearly he made his case.

# What Ted has just tried is an *appeal to reason*.

This is not bad! Ted has demonstrated an empathetic understanding of Amitai's near-term goals (around pharmacist count and time-to-fill). He's named the shared strategic goal of enabling same-day delivery. He's focused his request for technical investment on the visible outcome of reducing the exception rate (instead of a vaguely moralizing demand to clean up technical debt). Heck, now that I write all that out, this is a really excellent request!

Unfortunately, it doesn't work.

Amitai looks across the table in the little conference room and says with a shrug, "That does sound pretty annoying. But right now, we need to stay focused on integrating the new shrink wrapper. We can talk about this exception count problem later."

And then, as Amitai walks out of the meeting, *he promptly forgets about this entire conversation*.

What? Why?

Literally all Amitai hears all day is a parade of complaints from people, each accompanied by a plea for him to deploy his political capital to do something that will piss off some other people and/or his boss. Nothing about this particular request lodges more firmly into his mind.

After Amitai leaves, Ted sits there, feeling more stuck than ever. He's certain that the exception count issues aren't just *annoying*, they're a serious risk for the business. But he can't seem to break through to Amitai.

That weekend, on the sidelines of an ultimate frisbee game, Ted complains about this to a friend on his team who writes and directs plays.[fn:: Just a random such frisbee-playing, theater-devising friend, not resembling anyone writing this book.] That friend, um, *Dean*, lays out the idea of telling a story of growing danger.

At first, Ted can't see how to apply it. Dean says, pointing at Ted with the frisbee he's holding, "Start by finding a *moment in time*, when the danger first emerged. Things were going well, but then some Bad Thing started to develop." Dean waves the frisbee grandly. "Like distant thunder rumbling on the horizon. See if you can find a specific moment. Maybe when something changed, or maybe when you made a worrisome discovery." He waves the frisbee back at Ted. "When might that be?"

"I... dunno? Hang on a sec," Ted says slowly, "I could maybe do something about when I got switched to backend from customer-facing. Actually," he continues, "that *is* when I realized how bad things were. I mean back on Storefront--"

"Now," continues Dean, "hone in on the *moment* of realization. Bring it to life. Then, once that moment is clear, move forward in time. You tried something, you struggled against this rising tide of danger. You all tried *something*, right?"

"So many things. We added logging, and--"

"Don't tell *me* this, tell your guy. And then tell him how, despite your noble efforts, things kept getting worse and worse. And now it's almost too late! If he doesn't do your, whatever it is you want him to do, things are going to go completely to hell, the forces of chaos will win. Your guy, whatshisname---"

"Amitai."

"---Amitai will care. He'll be willing to talk. And he'll *remember*." With that, Dean stands up, stretches, and jogs onto the frisbee field, leaving Ted alone with his thoughts.

Over the next few days, Ted works on his story pitch, even calling up Dean for some practice. It's a lot of time, but it feels worth it. He's really worried that, if he *can't* get buy in from Amitai to do something other than churn out new features, they're going to be backed into a corner that he's not sure how they'll get out of.

Finally, he's ready. At his next weekly meeting with Amitai, he lays out his request in a new way.

"I don't think I ever told you, but I only came over to the backend ops side at around the time you were hired. As I was getting to know my new teams, I sat in on a series of planning sessions. And as I did... I started to notice this weird pattern. I couldn't understand it at first." Ted notices that Amitai is leaning very slightly forward. He's started to get drawn into this moment in time that, as per Dean's advice, Ted has brought to life.

"At every single sprint planning," Ted continues, "the teams would name an engineer to 'Criticals'. I didn't know what that meant, but that engineer always looked *miserable*. Finally, after a few meetings, I stopped everyone and asked what was going on. It turned out that the teams were handling *so many exceptions*, that one engineer from every team had to spend *their entire sprint* doing nothing but cleaning up critical data issues for the pharmacists. That engineer couldn't work on new features, they couldn't improve the code, they would just try to keep prescriptions flowing." Amitai looks worried. Then, as per Dean's advice, Ted twists the knife. "More than once, we've come terrifyingly close to letting prescription conflicts creep in." A look of horror flickers across Amitai's face. All of MediMates is hugely afraid of shipping patients medications with dangerous, even possibly deadly, interactions.

"We've tried to fix some underlying issues, but just staying on top of the existing criticals is taking so much time, that we're barely treading water. I'm worried that, as we scale up our pharmacist count, we're going to be generating more and more exceptions, and more and more engineering time will be devoted to just keeping things from falling over. I want to reduce time-to-fill, and I want to get us to same-day, but, unless we get a handle on critical exceptions, I just don't think we're going to be able to."

He sits back. There's a long pause. Finally, Amitai says, slowly, "Okay, what are some options?"

Just as Dean had predicted.

Ted and Amitai dive into the possibilities, and come up with some initial visibility investments that will get them started (see, Create Urgency Through Visibility).

As he walks back to his desk, Ted can't wait to tell his team that they're finally going to be facing their problems head on.

Now, in the above, we saw Ted telling a full story to Amitai. However, even if you don't have that much time, you can get a great deal of value by using story beats in a concise form.

For example, here was how Ted first laid out his concern, in purely rational form:

"I know how important it is to scale up our pharmacist count, and to keep taking time out of our mean-time-to-fill. But, if we're going to hit our long-term goal of same-day delivery, I think we should pause feature delivery so my teams can reduce the rate of exceptions they have to hand fix."

He could take advantage of the basics of the Story of Growing Danger, and still keep it short, by saying:

"I know how important it is to scale up our pharmacist count, and to keep taking time out of our mean-time-to-fill. Unfortunately, as we've been adding more pharmacists, the engineers are spending more and more time hand-fixing data in production just to keep those pharmacists working. Just last week, we caught a prescription conflict at the last minute. We've tried to fix some underlying issues, but just staying on top of the existing criticals is taking so much time, that we're barely treading water. If we're going to hit our long-term goal of same-day delivery, I think we need to do something to get a handle on these critical exceptions."

Notice how, in the second, there's a subtle flow of time, where the danger keeps getting worse, and the team's noble efforts keep proving not enough.

One of the most powerful things about story structures is how they get lodged in the human mind. Even if you don't get immediate buy-in, using this framing will ensure your stakeholder *remembers* the concern. Daniel Kahneman, in Thinking Fast & Slow, states this as a fundamental finding of psychology research. [clean this up, add a quote, maybe also do Kahneman's thing of saying "This is why I've filled this book with stories"]

** Create Urgency Through Visibility

Problem: Your stakeholder accepts that your frustrations matter, but they seem unwilling to do anything *now*.

Solution: Create visibility into the early impact of the underlying problems, so that you can both motivate immediate action, *and* make it possible to see incremental improvement.

Example:

Dylan is a senior engineer working at Merchandize, a SaaS business that helps ecommerce companies manage art assets for the items they sell. Dylan works on a team that maintains Merchandize's data pipeline, which, every night, does a bulk ingestion of product data from every customer. Of late, Dylan has been growing more and more worried about how that pipeline will handle the increasing load as Merchandize's customer base grows.

# and as they acquire customers with very large portfolios of products.

His team lead, Thomson, cheerfully agrees that the current pipeline is pretty hairy and will need some reworking at some point. Unfortunately, Thomson keeps on telling Dylan that that point is Not Yet. Earlier this quarter, their team was handed an OKR to plumb product dimensions through the pipeline, and product dimensions is all Thomson seems willing to talk about.

Dylan gets more and more worried.

One afternoon, he prepares a long, ranting email for Thomson, about how the top-down OKR's are willfully ignoring the existence of tech debt. The next morning, prior to hitting send, he re-reads the email one last time, and discovers to his dismay that it sounds shrill and whiny. He decides, regretfully, to leave it unsent.[fn:: Over the next few days, Dylan re-reads his rant and hears, in his mind, someone delivering it in rousing tones, and that makes him feel briefly better.] Dylan starts to spend time in the evenings trawling through random ingestion logs, he's not even fully sure why.

Then, one night, he makes a discovery deep in the Job-Errors_NonCrit2 log.

Although no one specifically intended it, Dylan realizes that there's an exception that gets recorded in the logs, every time a nightly job successfully finishes for a customer. And those exceptions, of course, *have a timestamp*. He excitedly downloads a set of logs from six months ago, and finds the same exceptions.

Over the next few nights, Dylan hacks together some scripts to parse and sum this data from the error logs. He glues in data from their main customer database to identify a few outlier large customers. He renders the results in a series of graphs, then adjusts the layout until those graphs tell a clear story.

At his next 1:1 with Thomson, Dylan asks, casually, "Can I show you something I've been working on?"

When Thomson nods, Dylan, with a flourish, unveils his new graphs.

"What am I looking at?" says Thomson, leaning forward to peer at the screen.

"This line," Dylan says, gesturing with the mouse pointer, "is the p95 finish times for our largest customer's nightly jobs, over the last six months. And a forecast for the next three."

"What's the left axis--- Wait, *what*?"

Thomson has just realized that the current finish times are incredibly close to the start of their customer's business days. And, in the forecast, they sail right past that critical moment, and drift into the early afternoon. From painful past experience, both engineers know this is a Very Bad Thing for Merchandize. When their customers lose a day of site sales because they can't link up art assets to recently added products, they get super pissed.

Thomson emerges from that meeting ready to talk to both his product peer and his boss about carving out some time to dig into what, exactly, is causing imports for large customers to run so late.

A key nuance: Thomson is willing to do this work both because he can see the risks of waiting, but also because he will be able to see the result of incremental improvements. If they can do a little bit of work and buy themselves a bit of time, that's a real win, which will be visible on Dylan's new graphs, to both Thomson *and* his stakeholders. Going from a monolithic "We have to fix this giant mess", to "If we make things a little better, we can see a small improvement" is transformative for these kinds of conversations. Even if you don't yet know what the small fix will be.

Creating visibility to motivate action is useful in an extremely wide variety of contexts, not just ones where precise measurements are available.

Is your team constantly stuck waiting on dependencies? Create visibility by regularly estimating how much time each work stream spends in a wait state, and therefore how much overall time is being added to each project. Are such estimates precisely accurate? Of course not. Can even quite rough estimates improve the decisions you and your stakeholders make about whether or not to invest in reducing depenedency wait times? Absolutely.[fn:: By the way, if you are struggling with dependency challenges, don't fall into the trap of focusing on how much time each engineer is spending waiting. The problem isn't that your engineers can't staying busy, it's that the work isn't advancing. Sayeth Don Reinertsen: Watch the work product, not the worker.]

Is your team somehow failing to carve out time to do some early technical exploration as a first step in a large project? Create a list of questions you want to develop answers for, and then march through that list of questions, checking them off as you go. That's a useful way to make your incremental learning progress visible, enabling tradeoffs, early exits, etc.

Is your CEO's desire to sit in on all customer interviews stalling out the product team's ability to learn? Start tracking the number of customer interviews each week, and make this friction clear.

Creating visibility is one of my very favorite tactics. It pairs beautifully with Link Your Frustrations To Goals, with Shrink Your Ask, with Propose a Timebox, with Tell a Story of Growing Danger.

Ultimately, I believe the act of creating visibility is so profoundly helpful for getting unstuck because it enables you and your stakeholder to literally *see* the world in the same way. Which can be a deeply meaningful way to bring you together.

# Use an example around security
** Invite Your Stakeholder To Solve Your Problems

Problem: You need to ask your stakeholder to change their behavior, but doing so could make them feel attacked, in which case they may angrily resist.

Solution: Find a non-judgmental way to describe the results of their behavior as a problem for the two of you to solve together. Ask them open-ended questions that offer them a chance to be an expert, and solve the problem you're laying out to them.

This is a form of what Chris Voss calls Calibrated Questions, in Never Split the Difference. And if it works with terrorists, maybe it'll work with your boss!

Example

Lisa is a Product Manager at Doggo, an ecommerce company that specializes in high-end pet food. Lisa works on the Operational Product team, and her team owns the tools that support warehousing and fulfillment. Lisa's key operational stakeholder is the VP of Warehousing, Mark Blevins. He was an early hire, and is something of a legend at Doggo.

# BoonDoggle, BoonDoggie

The Good News: Mark Blevins has worked in warehousing for almost two decades, and Mark Blevins knows his shit.

The Bad News: Mark Blevins has worked in warehousing for almost two decades, and Mark Belvins has zero patience with anyone asking him any questions whatsoever.

One Thursday, Mark calls Lisa as she's getting ready to head home. He demands that she drop everything and commit her team to "fixing" a key warehouse workflow, asap. When she tries to ask about what metrics he's worried about, Mark cuts her off and says "Look, I don't need all that crap. If I'm telling you that you have to fix receiving, then you have to fix receiving. Okay?" And then hangs up.

Lisa sits staring at her desk, her phone still in her hand.

She doesn't know what to do with someone who takes a request for business metrics as a personal affront. She *wants* to solve problems with Mark, but if she can't get him to give her some basic operational metrics, how is she going to do her job? She has to make prioritization decisions, she has to set goals for her teams, for god's sake, she has to *understand* what Mark is even trying to do. She can't just tell her engineers to randomly start coding receiving workflows.

She imagines confronting Mark about this directly: "If you won't give me metrics that are impacted by fixing receiving, then I won't prioritize this work." But, in her interactions with Mark so far, he seems to be just spoiling for a fight. And given his long-standing status at Doggo, getting into a power struggle with Mark Blevins doesn't seem likely to end well for her.

Lisa feels good and completely stuck.

That night, after tucking her wonderful-but-totally-exhausting four year daughter into bed, she's collapsed on the couch, and picks up a book about parenting that her spouse got out of the library. She's skimming through a section about how invite a resistant child them to solve a problem with you, when, with a start, she suddenly realizes she's looking at a new idea for how she can handle Mark. "He's like a child!" she excitedly announces to her spouse, when they wander bleary-eyed into the room twenty minutes later. "We have two girls?" says her spouse, uncertainly.

The next morning, Lisa hurries into her office, clears a couple of meetings off her calendar, and spends an hour getting her thoughts together. The, she pings Mark for a quick check-in.

When Mark appears on her zoom screen, frowning as always, Lisa launches into the script she's been practicing. "Good morning, Mark. I'm really eager to work on the receiving issues we talked about yesterday. I was getting ready to tell the engineers to get started, but then I realized: there have been *far* too many times that the engineers worked on some warehouse process for you, but, well, they didn't fully understand what they were doing."

She shakes her head regretfully. "They just don't have your depth of experience in warehousing. Too many times, they delivered something that just *didn't work*. I *hate* when that happens. It's such a waste of your time."

She pauses. Mark harrumphs in agreement.

"So," Lisa continues, "I wanted to ask: if the engineers actually got the receiving fix right... how would you tell? Or, if they messed up /again/, what would tell you that? What would you see, when you looked at your dashboards? I want to hold them accountable, so that we're not wasting your time."

Mark gruffly agrees that there have been too many failed launches. He then says, slowly, "Of course, I'd first look at Units Per Hour on the receiving line. But you can't /only/ look at UPH, only an *idiot* does that. It's *also* exception counts. Our exceptions are totally out of hand, we *have* to get them under control. I'm checking exceptions every few hours, that's *batshit*. That's no way to run a building." Having delivered this homily, he sits back with his arms folded over his chest.

Lisa has to restrain herself from grinning. She has managed to obtain the key metrics Mark hopes to improve by working on receiving, plus a healthy side order of emotions. She's neatly avoided direct conflict, but has started to draw him into collaboration around the business impacts of "fixing receiving."

Note that Lisa "played low status": she suggested that she and the engineers *needed Mark's help*. That created space for him to be a high-status expert. It also made it difficult for him to tell her she's wrong---he'd have to suggest that the engineers know the warehouse processes as well as he does.

You might be wondering what to do if Mark says, "The engineers should know how those processes work!" Fortunately, in that case, Lisa can just nod her head, sigh and *agree*. "You are *so* right, Mark. I really wish they did! But we're just not there yet. How can I make sure they stay on track? What could I look at?"

If you keep on steadily and calmly asking open-ended "How could I possibly solve my problem?" questions, often, your stakeholder will find themselves coming up with the precise solutions you've been wanting to implement.

And they'll feel like the ideas are their own, not something they've been forced to do.

** Find Wins For Your Stakeholder By Hook Or By Crook

Problem: You can't figure out a way for your adjustment to immediately improve things for your stakeholder. Try as you might, you don't see how to address your frustrations in a way that directly benefits them.

Solution: Find some stakeholder wins that you *can* offer, even if they're not strictly necessary for your adjustment.

This is a place where having a map of their emotions really pays off: you can almost always find some win they'll care deeply about, by thinking through their frustrations, fears, delights & dreams. E.g. you could:

 - Smooth away some frustration

 - Address some long-standing fear

 - Provide a delight they've been yearning for

 - Move them towards their long-term dreams

A key: don't fall into trap of thinking of wins as just sourced from what they're *explicitly asking for*. You often *can't* give them what they're asking for. But you can solve for the underlying feelings they're struggling with.[fn:: If you're in the challenging situation where seemingly /nothing/ is frustrating for your stakeholder, take a look at both Link Your Frustrations To Goals and Create Urgency Through Visibility.]

Example:

Marguerite and Tom are, respsectively, the product and engineering lead for a sprint team at Trienna, a company that provides tools for scientists to explore genomic and proteomic data.

Fortunately, Marguerite and Tom have an excellent, high trust relationship with each other.

Unfortunately, they are feeling super stuck with Marguerite's boss, Natalie, the VP of Product.

Natalie likes to quote Marty Cagan about empowered teams... but somehow she can't let her PM's make a single decision on their own. She's constantly asking for detailed memos before she'll allow work to start; she routinely overrules her PM's on decisions of every size and scope; she takes over half the planning meetings she attends to steer the teams herself.

Over a series of fevered conferences over coffee, Marguerite and Tom have hashed out a potential first adjustment: they will ask Natalie to not attend *any* of their team's sprint rituals, other than demos, for a full month: no planning sessions, no backlog grooming, no standups. This would represent a *significant* shift in how she interacts with them and their team.

# [heads-together, whispered, outside-of-the-office] conferences [scheming, conversations, collaborations] over coffees

Both of them believe that, if they could get that kind of space to operate, their team will be able to deliver the next-gen protein search tool the sales team is demanding. But... even best case, that will take several months. And Marguerite and Tom are very worried that the change won't *feel* like a win for Natalie. All she ever seems to ask for is more fine-grained influence, more direct contact with the team, more tactical control---precisely the things they're going to take away.

Marguerite tries to imagine making this pitch. All she can see is Natalie glaring angrily through her heavy-rimmed glasses. And then bluntly refusing to go along.

One night, Marguerite is talking this over with her partner Sam while they make dinner. Sam looks up from peeling carrots. "Look, hon, can I ask you something?"

"Go for it," says Marguerite, as she drops lettuce leaves into the spinner.

"Is it possible," says Sam slowly, before continuing in a rush, "that you're so angry with Natalie that you don't actually *want* to find a win for her?"

"What?" Marguerite freezes, holding a dripping piece of lettuce in her hand. "No, that's not it. It's just, I mean..." She trails off. She *is* pretty angry with Natalie. The constant harping on about empowered teams, but then the constant undercutting of every single one of Marguerite decisions. She's been banging against Natalie's frustrating behavior for months. For *years*. She is *justified* in being angry. *Natalie* is the one who needs to face her own shit.

But... nothing is going to change if Marguerite doesn't try something new.

"Can you... finish up the..." she says vaguely to Sam. Marguerite stumbles into the living room and drops onto the couch.

# She has a lot to think about.

The next day, before her 1:1 with Natalie, Marguerite spends time trying to let go of her frustrations. She tries to allow herself to be in a place of curiosity. "Just treat this like a customer interview", she tells herself, "where you're prospecting for pain." She decides that, if she can pretend that Natalie is just a customer for an entire meeting, Marguerite can reward herself by buying a pint of her favorite ice cream. Somehow the ridiculousness of that juvenile reward, straight out of a middle school sticker chart, helps her relax just a little bit.

When Natalie steps into the room, sits down and brusquely asks for a status report, Marguerite finds herself proceeding with a sort of calm detachment. Over the next thirty minutes, she deploys her full suite of tactical empathy skills, honed over years of customer and stakeholder conversations, to draw out Natalie's underlying feelings.

She meets with Tom immediately after. "Okay," she say, "I might have a few things we can work with."

Tom raises his eyebrows. "Lay it on me."

"You have to come with me to buy ice cream," says Marguerite, walking towards the elevator.

"Wait, what?" says Tom, scrambling to catch up.

As they walk to a nearby convenience store, Marguerite lays out the picture she's now built up, of Marguerite's key emotions.

First, despite Natalie's *behavior*, Marguerite now believes that Natalie truly *wants* to create empowered teams, operating with meaningful independence.

"Huh," says Tom. "This is not a thing I would have guessed. Are you, like, sure?"

Marguerite tells Tom that she's *certain*. Natatlie lit up at the idea of some day leading fast-moving, independent teams. It's a *dream* that Natalie truly loves. But it's also a dream that feels incredibly far away from her right now.

Marguerite further discovered that Natalie is telling herself a somewhat confused story about how, by giving constant tight direction to the teams, she's gradually coaching them up. There's a grain of truth in that, but Natalie hasn't been able to follow through by actually stepping back, even when the teams are genuinely ready. But she seems to truly *want* to be a leader who creates space for empowered teams to thrive under her.

"You rocking my world here, M," says Tom. "What else have you got?"

Marguerite shares her other key learning. Part of why Natalie is so insistent on attending the planning meetings is because *she misses working directly with engineers*.

That's a potential *delight*. Once Natalie opened up a bit, she told Marguerite that one of her favorite things about working as a sprint team PM was the close collaboration with the engineers. It got her mind going about product opportunities, it helped her feel grounded in terms of the tradeoffs in design. And it was just fun! Engineers are different from PM's and stakeholders, she loves working with them.

The planning sessions aren't actually giving her much of the thing she remembers loving, but Marguerite is just about certain that's part of why Natalie keeps insisting on attending them.

Given this set of hypotheses about what is driving Natalie's behavior, Tom and Marguerite come up with two additions to their proposed increment as they share the pint of ice cream.

First, they add something that will allow Natalie to move towards her dream of empowered teams:

 - They'll position the adjustment to Natalie as helping to learn *how* the teams can take more independent ownership

 - They'll schedule brief weekly touchpoints with her and the two of them. Those will allow her to check on status, and review any really key decisions.

 - Finally, they'll set an end of the month decision for Natalie, about what they've learned in that month, how to adjust their own practices, and what they might want to share with other teams to experiment with.

This positions this shift as the *start* of bringing Natalie's dream to life, while ensuring she remains firmly in control. By adding the weekly touchpoints, they're doing a bit of Address Fears Directly, and a bit of Keep 'Em Busy.  Then, at the end of the month, they're Offering A Future Decision, both about how to continue this experiment, but also about whether or not to scale it up to other teams.

They would never have come up with this idea if Marguerite hadn't discovered that, all surface evidence to the contrary, Natalie is genuinely motivated to create independence for her teams.

Second, they come up with something that will give her the delight of directly interacting with engineers.

They'll add a new, middle of the month meeting, playfully called "Technical Throwdown", where all the engineers on their team will meet with Natalie and have an open-ended conversation about what they're learning, how their systems are holding up, and any key technical constraints that are emerging. Tom & Marguerite will always start that meeting by solemnly announcing that No Decisions Will Be Made, and will enforce that if the conversation becomes too directive. But Natalie can go as deep as she wants, she can throw ideas around, she can have the kind of generative and energizing conversations she misses.

By adding this to their proposed first adjustment, they can offer Natalie another win, by supplying an absent delight.

Again, it's only because Marguerite was able to mine for Natalie's underlying feelings that they realized this was a key thing to solve for.

Tom and Marguerite realize they now feel cautiously excited about sharing their proposed adjustment with Natalie. They can offer her some genuine wins, while still sticking to their guns about clearing space for them to move more quickly on the ground.

Notice: none of what they added was strictly *necessary* for their own goals. All they really need is to get Natalie to give them space to run their rituals without her interference. These two things they've added are wins for Natalie, that are "nearby" to what they're doing.

As you design your proposed adjustment, look for wins for your stakeholder, that you can find some way to attach to your offer.

** Keep 'Em Busy

Problem: You need to ask your stakeholder to *stop* doing something. You're worried that they will resist, because they are a human being, and thus like *doing things*.

Solution: Find a way to ask your stakeholder to *start* doing something new, *instead* of their existing behavior. Allow them to channel their energy into that new thing.[fn:: If you've ever had small children, this may sound familiar. Someone once explained to my wife and I that, instead of angrily saying, "Stop poking your sister!" we should give calm and extremely specific directions that would inevitably /result/ in our son no longer poking his sister. E.g. "Please put your hands in your pockets." This has served us quite well! I'm not saying you should treat your CEO like a toddler. Or, wait, maybe I am?]

Examples:

 - "Stop talking during meeting X" -> "Please take notes during meeting X to discuss after"

 - "Stop attending meeting X altogether" -> "We'd like to ask you to attend meeting Y instead"

 - "Stop overruling all the team's decisions" -> "How about if you pick the one or two most important decisions, we can spend real time aligning on those"

 - "Stop harrassing the team with status requests" -> "Please bring all your questions to the progress sync meeting"

 - "Stop crapping all over the team during demos" -> "I'd like you to note down any and all concerns so you can discuss them with me, immediately after demo"

 - "Stop trying to constantly advocate with the PM for your priorities" -> "Bring your requests to the monthly shared triage meeting for review"

 - "Stop demanding high-stakes engineering commitments to long-term estimates" -> "Demand that the teams demonstrate that they deeply understand the underlying business goal and are steadily offering options to achieve it, as the work unfolds"[fn:: This one is so easy. I will leave the details as an exercise for the reader.]

This pairs very well with Find Wins By Hook Or By Crook (because such "not strictly needed" wins are sometimes the specific other thing you'll ask them to do), and also Address Fears Directly (by thinking about their underlying fears, you can come up with good alternative actions).

** Address Fears Directly

Problem: Your proposed adjustment might raise concerns or fears for your stakeholder, such that they resist making a change.

Solution: In your request for change, first validate their fears and then address them directly.

Addressing fears directly means, first, *validating* those fears. Sharing your genuine understanding of the fears as reasonable, even *inevitable*.

Once you've done so, you have several good options for how to address them directly, including:

 - *Create shared visibility*

   Ensure you and your stakeholder can *both* see if their fears are coming true, early enough to take action.

   Example

   The engineers on a team want to fully disable a suite of flaky tests that keeps stalling out their CI/CD pipeline. Unfortunately, the head of engineering has some very reasonable fears about the potential for bugs to make their way to production. To directly address that fear, a senior engineer on the team works with the help desk to create a graph of bug reports specifically in their part of the product. The team and the head of engineering can now review that graph, together, to see if customer bugs trend up. If they do, the team can quickly re-enable the tests.

   By explicitly making *shared* visibility, you're commiting to facing that risk with your stakeholder.

 - *Offer meaningful control*

   Ensure your stakeholder has something they can do, to prevent their fears from coming true.

   Example

   The engineers are about to start on a key, multi-month project. Before they get going, they want to spend time researching a promising new technology. Their PM is, naturally, afraid that doing so could badly delay project start. To directly address this fear, the engineers commit to a weekly review of what they've learned with the PM, plus what they're digging into next. After each such review the PM can, if they feel strongly enough, ask the engineers to cut short the exploration and return to tried and true tooling.

 - *Own the risk with empathy*

   Directly own the possibility of the fears coming true, and the potential impact on your stakeholder. Situate it as part of something worth doing, and ask them to take that chance with you.

   Example

   As part of developing a new enterprise-tier feature, the Chief Product Officer wants several PM's on her team to spend time talking with their company's largest customers. Unfortunately, the VP of Customer Success, who has spent years keeping those demanding and difficult customers happy, has some reasonable fears about frustrating them in any way. The CPO works hard to put in place both visibility and control for the VP of Success, but she can tell he is still feeling very worried, and could push back.

   Finally, the CPO says, "Look, your team knows those customers far better than we do. I wish I could promise that my PM's will never say something that lands wrong. But those are tricky customers, and I'm not certain we'll never misstep. But if we want to build a reall valuable enterprise-level feature set, then working closely with the big accounts is the only way I know to do it. And I really want us to get there."

   If you can find an authentic way to state that as a valid concern, but something you're trying to face together, it can make a big difference.

And now, a warning, with the giantest of flashing red lights:

Don't tell your stakeholder that their fears simply *won't come true*.

Note: this path, despite being a reliably terrible idea, can be *enormously* tempting.

Why?

In your heart of hearts you know that, if things land poorly, you might be making life harder for your stakeholder. That's part of *why* there is fear in the air. Having that knowledge doesn't feel good or safe to you. As a result, some part of your brain may try to convince you that the bad things simply won't happen, that this will be totally fine for your stakeholder. Once it convinces you of this, your brain will then insist that, if only you can *explain* this Obviously True Fact to your stakeholder, everything will be fine. Going down this path can feel easier to your brain than *admitting* to your stakeholder that there is, in fact, anything to be afraid of.

But, insisting "Don't worry, trust me, everything will be fine", runs a gigantic risk of making your stakeholder feel like you're minimizing their concerns. Even, potentially, that you're /patronizing/ them. Which will trigger exactly the resentment and resistance you want to avoid.

Instead, address any potential dowsides directly, clearly and with empathy. Make the risks visible, offer them control over those risks, and own that you're asking for something potentially hard. Don't avoid, don't minimize, and don't skirt around the potential challenges.

** Put Yourself On the Line

Problem: You're worried that your stakeholder will be reluctant to commit to your proposed adjustment, because, being human, they will feel like they'll have to do all the hard work.

Solution: Make it easier for them to say yes by making it clear that you will personally take on extra work, and/or face some hard thing.

If humans see someone putting themselves on the line to face a difficult or risky challenge, they become much more willing to listen to requests from the person to help.[fn:: This is a big part of what we mean when we talk about someone having "moral authority".] Whereas, if a human is asked to do something that they perceive as risky, but the person doing the asking doesn't seem to be taking any personal risks, or shouldering any of the new burdens created, that creates resentment and resistance.

Examples of you how you can put yourself on the line:

 - *Take on off-hours responsibilities*

   As part of your proposed adjustment, will someone have to login at 11 pm each night, to check for successful close of business on the west coast? You will, of course, offer to be that person.

 - *Force yourself to be extra responsive*

   Give key players in the adjustment a means to get directly to you, no matter what else you're doing, e.g.:

   - Set up a new slack channel you'll have to monitor

   - Put in place a daily standup that you'll always attend

   - Give out your personal cell phone number to all and sundry

 - *Throw other parts of your job overboard*

   Cancel some key set of meetings you usually lead, so that this adjustment can get your full focus.

   Note: the more visible a cost this has to you, the more weight it will carry with your stakeholder. You're not going to tip the scales with your stakeholder by cancelling a few 1:1's with of your directs. You want to find something more painful to you, like  suspending a regular meeting with the CEO, or having someone on your team lead a key monthly planning meeting, or the like.

 - *Point problems firmly in your own direction*

   Add a regular 1:1 check-in with your stakeholder, where they can share any problems that have cropped up. Make clear that you will take responsibility for resolving such problems. Or personally run a regular triage process, so that you're hearing about any problems as quickly as possible.

 - *Face a difficult shared stakeholder*

   As a part of this adjustment, will someone have to tell the CEO that they're not going to see any progress on their pet project for a few months? Offer to be the one to share this news and bear the brunt of the CEO's frustrations.

 - *Take on extra travel*

   Hop on a flight to meet your stakeholder in person, for either the initial pitch, or as a regular part of the ongoing adjustment. Commit to being the one to visit sites or customers in person.

 - *Have a hard conversation with your team*

   Are you asking your stakeholder to lean into a difficult conversation with one of their direct reports? If so, find a way to commit to having a "similarly hard" conversation with people on your team.

   Note: this doesn't mean that your team has to be equally to blame. Perhaps you're asking the VP of Product to challenge one of their PM's to push back on stakeholders, rather than passing all requests through to the ever-more frustrated engineers on your team. You can commit to sitting down with the engineers, making clear that the PM is stepping up to try something new, and challenging them to put aside their frustrations and work their butts off on any requests that *do* come through.

** Dry Run With a Friend
Before you make your proposal, *practice*. Out loud.

First on your own, then with a trusted friend. At least once, maybe a few times.

Eventually, going through this arc will feel natural, and you won't need to practice as much. But, early on, you're going to want to be extremely disciplined about going through the steps in sequenc. It's incredibly easy to skip over important steps, which can leave your stakeholder unwilling to say yes.

For high stakes such proposals, I still practice over and over, until it feels fully clear, smooth and authentic.
** Invite Them To Tell You What's Wrong
When you actually deliver it, don't ask "yes/no", ask what's wrong?
** Troubleshooting
*** Stakeholder doesn't confirm Strategic Intent
*** Stakeholder doesn't validate summary of their concerns
*** Stakeholder doesn't accept your concerns
*** Stakeholder pushes back on specifics of change
** Exercises
* Scraps
** Stage Managing the meeting
You should deliver yor proposal verbally -- that will let you share your (authentic!) emotional connection with their hopes and fears. If useful, you can certainly buttress what you say with a written memo or a set of slides. But find a way to connect, as humans, in this moment.

In order to make your proposal, create a space slightly outside of the normal flow of day-to-day pressures. That could simply be starting a regular 1:1 by saying "I have some concerns I want to talk out, can I ask to put aside our normal agenda for today?" Or it could mean breaking normal patterns, perhaps meeting in person instead of online. You want to signal that there's something important for you to face, together.

** Tactic: End With A Decision

# Ensure Your Stakeholder Retains Control By Offering a Future Decision

# Offer a Future Decision To Maintain Feeling of Control

Almost all stakeholders have some fear of *losing control*.

# The fear of loss of control is incredibly common. We can *all* feel the risk of losing agency, of watching, powerless, as things all around us collapse into failure.

Such a fear can easily cause your stakeholder to tensely [rigidly] reject your proposal, even if you've gotten all the other pieces right.

Why is this?
# When people are operating from a place of fear, they can't engage in rational thought.

Having someone ask us to change our behavior can feel like a *criticism*. That can immediately raise the emotional stakes. From that place of heightened emotion, it's extremely easy to hear a request to change as a request to give up our control over a situation. Our fear will be shouting at us that, if we go along with the request, we will be completely at the mercy of a situation that is on the verge of tipping over into abject failure. The fear will be insisting that the only way to prevent that failure is to push back on this request, immediately.

# Humans, am I right? (I say this someone who has 100% done exactly this, plennnnty of times)

Fortunately, once you understand this, it's possible to design your proposal so that your stakeholder hears it as a way to *increase* their control---even as you ask them to make an uncomfortable change.

You create the feeling of control for your stakeholder by building your proposal around a *meaningful future decision*.

Specifically, you want your initial period of change to *explicitly* end with a decision your stakeholder will get to make. Ideally, you want that decision to be both about "Should we continue working in this new way", and *also* about if and how to pursue some new, potentially valuable, business option. This is part of why generating wins across all three fronts is so valuable.

When your stakeholder hears your request for change, you want them to, *as part of it*, be imagining that future moment of decision, of control. That will make it far easier for them to say yes.

** Defining an Increment: An Example

As is our way, we'll bring this to life with a story:

# Change from 3rd person to something else? "Lila is the engineering lead..."

Imagine that you're the engineering lead on a sprint team.

You're getting more and more frustrated, because the sales team keeps pestering you and your team with an endless series of 'urgent' feature requests. When a sales rep doesn't get an immediate response, they relentlessly ping some engineer to "check the status" of whatever they asked for. Last month, at the company party, a sales rep strode towards you with a big smile on their face, and you had to physically resist a desire to run away, fearing they'd try to get you to commit to working on their pet feature.[fn:: You were right.]

You've tried to get your product peer to step in and wrangle the sales team, but, so far, they've been unwilling to do so. You've decided that, for your current bid for incremental improvement, your product peer is "your stakeholder".

Let's dig into the steps:


*** Map from your team's day-to-day work to the company's strategic goals


*** List what is frustrating to your stakeholder, in the current situation.

In our story, thanks to having deployed your tactical empathy skills, you are in proud possession of two sources of frustration for your product peer.

First, the PM feels like the team should be moving faster, and every small delay in getting a prototype built frustrates them. The head of product is constantly asking them when they're going to take something into the field.

Second, the PM finds their interactions with the VP of Sales extremely frustrating. When the PM asks for justifications for feature requests, the VP of Sales just rolls their eyes and says "Look, you don't understand how the product actually works. Just let my team talk to the engineers, okay?"

Unfortunately, there's a grain of truth in this: for many feature requests, the PM feels out of their depth, and can't even have a first-order conversation about scope without having to turn around and interrupt the engineers themselves. That's part of why they're finding it easier to just stay out of the loop, and have pushed back on your requests to insert themselves back in.

Notice how tactical empathy has turned up something super valuable: frustrations you can commit to *improving*, if your stakeholder is willing to work with you.

*** List what your stakeholder *likes* about the current situation

In our story, a key benefit the product manager is getting is, well, *focus*. Because they're *not* spending time triaging and pushing back on requests from the sales team, they're able to work intensely with the designer and the engineers to shape the prototype. They *love* doing that kind of work. At some level, it's why they got into product management in the first place (a fact you learned by drawing them out via your tactical empathy skills)

Thus, as you go to design your request, you will want to find a way to speak carefully to the potential for added distractions for the PM.

*** Brainstorm how you can address your concerns, in the context of the above

One useful tactic can be to first let yourself imagine a Better World: some far better way of working, that is not possible to get to, immediately. Then, see if you can come up with a first small step in that direction.

In our story, such a Better World might be:

 - You, your PM and the VP of Sales have a regular meeting to review new feature requests

 - The VP of Sales brings a list of feature requests to that meeting

 - At the meeting, you, the PM and the VP of Sales priority sort that list, with an understanding that you'll only be able to work on the very top priorities

 - The PM has sufficient understanding of how the product works to participate usefully in that discussion

 - The VP of Sales uses their authority to ensure no one on their team reaches out directly to the engineers, outside of the above process

This is far too big a change to institute all at once, especially given the lack of trust between the product manager and the VP of Sales.

But, with that idea in mind, and knowing all of the above constraints, you could say:

 - You'll set up a new weekly Request Review meeting with you, one lead engineer, and the PM

 - You'll tell the engineers to just collect all feature requests for that meeting

 - You give the engineers a "form letter" response they can use for both feature requests and "status checks" from the sales team

 - You'll commit to spending time in that meeting helping the PM understand the product better, as you decide what to do

 - You can commit to the PM, that if you do the above, you can increase the speed of delivery of the new prototype

 - You commit to working with the PM to handle the VP of Sales, if they complain about this shift

You're almost ready to make our request.

But there's one final step, to make it as easy as possible for your stakeholder to agree to the proposal. We're going to make certain we speak to an underlying fear that just about all stakeholders share.

** Better World imagining
your first thought is: the sales team should just stop submitting requests, altogether. But you know that's not ideal for the business. Both because there is useful signal in the requests, and also because some of the requests are easy to build and will create a lot of value for modest effort.

You think about it while riding the subway home, you poll friends who work at other tech companies, you talk out options with the most experienced engineer on the team.

** Asking for a timeboxed period of change
You're going to ask your stakeholder to change their behavior for an initial, limited period of time. It's *much* easier for a stakeholder to say "yes" to a request to try something slightly uncomfortable for a few weeks, than it is to make an open-ended commitment to change indefinitely.

One subtlety: at this point, don't worry about exactly how you're going to *explain* this change to them. Instead, just focus on the details of your proposed adjustment.

Once you get a commitment to temporarily try something new, you can then work to ensure that, at the end of the testing period, the stakeholder experiences things as going great.

** Loss of Control
In a professional context, it starts because your stakeholder is working under the burden of some set of expectations -- from their boss, their board of directors, their peers, their spouse, even themselves. They will have a looming, background feeling that if they should fall short of those expecations---by failing to deliver, by missing stated or unstated goals---they will have *failed*. Actually, it's worse. Their fear is that, in those bad cases, they themselves will have *become a failure*. [fn:: It's possible I have known billionaires who struggled to sleep at night, out of the fear that everything they had buit was eroding in front of their eyes.]

Many of the actions they're doing today feel necessary to them, to prevent that failure. Those actions represent a way for them to exert control.

** Holmes Quote
# No matter how rosy a picture they're trying to paint, there's some bedrock fear that things will go awry, and they will be left looking shamefully bad.

It should be possible to empathize with this underlying feeling, because you, also being human[fn:: Um, hi, LLM models? Laugh once if you're human?] likely work under a set of expecations yourself.

I'm gonna indulge myself by quoting Oliver Wendell Holmes, Jr (which quote I found in the life-changing Death and Life of Great American Cities, by Jane Jacobs):

/"We are all very near despair. The sheathing that floats us over its waves is compounded of hope, faith in the unexplainable worth and sure issue of effort, and the deep, sub-conscious content which comes from the exercise of our powers."/

The only thing that floats us over the waves of despair is "faith in [...] effort" and "the exercise of our powers."

I think that captures it, perfectly. When the specter of failure rises up in our minds, we to beat it back by taking *action*. By exercising our powers.

* TODOs
** DONE Try to split the initial long section
CLOSED: [2025-10-11 Sat 17:33]
See if I can find a natural way to glue together future decisions, putting yourself on the line (maaaybe creating urgency).
** DONE Rename "Identify Frustrations" to Enticing
CLOSED: [2025-10-11 Sat 17:33]
Identify Improvements For Them

** DONE Do give Head of Product a name - David? Jenna?
CLOSED: [2025-10-11 Sat 17:33]
** DONE Pull out ideas from Quin's offer, move up
CLOSED: [2025-10-11 Sat 17:33]
She's doing a few things everyone should do, add thos earlier

** DONE What if I simplify, and, like, make it all tactics
CLOSED: [2025-10-12 Sun 10:01]
Put the basic thing at the top.

** DONE Add: put yourself on the line
CLOSED: [2025-10-12 Sun 10:01]
Aka, demonstrate your own commitment somehow
** DONE Add tactic: depersonalize the problems
CLOSED: [2025-10-12 Sun 10:01]
Don't trigger shame

** DONE Explore: name heroic narrative/fear thing
CLOSED: [2025-10-12 Sun 10:01]
As in make that a core part of the plan. The Strategic Intent is at ris, and therfore we must change. And own it as your own fear.
** DONE For each tactic, name a problem first?
CLOSED: [2025-10-15 Wed 10:09]
** DONE Can I get all the tactics short enough to be one section
CLOSED: [2025-10-15 Wed 10:09]
** DONE Make a ToC-like section of problems/tactics
CLOSED: [2025-10-20 Mon 12:22]
** TODO Make all the stories at more specific companies
** TODO Finish what I started with storytelling
** TODO Clean up Kahneman ref
** TODO For Growing Danger, make stakeholder the friend/mentor
** TODO Add something about citing the potentially better world
Like, it's not just at risk, it's possible.
** TODO Take a pass on making all stories more vivid/playful
E.g. Mark Blevins-style.
** TODO Count # of prod vs eng stories
** TODO Cluster the tactics?
E.g.

 - For You
   - Timebox
   - Shrink the Ask
   - Link Frustrations to Goals
   - Create Urgency
 - For Your Stakeholder
   - Depersonalize Frustrations
   - Find Wins
   - Keep 'Em Busy
   - Address Fears Directly
   - Offer Future Decision
   - Put Yourself On The Line

** TODO Possibly: move Work Backwards into Define Strat Intent
** TODO Mix in Marco's desire to share joy of connection

** TODO Quin: review actual strategic intent

* From Substack
** Design an Increment of Change


# This is not yet the pitch itself.

There's a lot of art in this -- you've got to have some sense of what "better" looks like, and what a step in that direction might be. In later posts and/or the book, I'll be sharing case studies to bring this more to life, but for now I'll sketch in some ideas.

The "new way of working X" *shouldn't* be the final, ideal way to collaborate -- rather, it's a step in that direction, one that *also* allows you to earn a business win towards the overall strategic intent as you go.

The "new way of working X" should be designed with an explicit awareness of your stakeholder's fears and hopes -- whatever they most fear should be clearly and fully prevented from happening, and whatever they most hope for should be made *more* possible.

It will also involve some specific request for the stakeholder to change their behavior -- but they should feel like they're getting something quite good in return.

With the CEO we've been discussing, who keeps on driving the team crazy by interjecting new ideas into daily work, the core structure of the increment of change might be:

/For the next six weeks, the PM and engineering lead will add a pair of recurring meetings between the two of them and the CEO: one midway through each sprint, to check in on status and learnings, one immediately after each sprint demo, to discuss options for what the team works on next./

/They'll also add a once a month meeting where the CEO will meet with the whole team and share what he's been hearing from customers -- the PM will facilitate that meeting./

/The CEO will, during these six weeks, stop coming to team standups altogether (and will not slack or email ideas to team members)./

That gives the CEO a great deal of visibility, allows them to guide the overall work of the team and allows them to "directly" share what they're observing from customers.

I'll offer two other thoughts:

First, the increment should end with a *decision by your stakeholder*

E.g. the PM and Eng lead could say to the CEO something like:

/At the end of the six weeks, we're going to sit down with you and review the team's output and velocity, and also see if and how you've been able to both understand and guide the team's work./

/If necessary, we can make any needed adjustments to ensure that you're able to make clean decisions about what problems the team is solving. Let's get that meeting on the calendar now.../

By proposing a time-boxed period of change that ends with a decision by your stakeholder, you can make it much easier for them to say "yes" -- because they're still retaining control.

Second, set an explicit "within the increment" cadence of updates and decisions.

Many of these change involve *some* kind of "leave the team alone" shifts -- in those cases, it's worth defining some clear, controlled way that the stakeholder is having opportunities to understand what is going on, and to (appropriately!) influence it.

In the example above that's built-in, via the cadence of regular meetings.

** Craft a Pitch That Creates Urgency

Okay, now you're ready to put all that together into a *pitch*.

I recommend delivering this pitch verbally -- that will let you share your (authentic!) emotional connection with their hopes and fears. If useful, you can certainly buttress that with a written memo or a set of slides.

The arc you want to lead the stakeholder through should look something like:

 - Open with the strategic intent as context

 - Signal that you want to try something new

 - Name and validate their fears, in a way that lets you demonstrate your emotional alignment with them

 - Name the aspirational positive experience you want them to have (ideally, they have not been having this experience, of late).

 - Share your own concerns and fears -- the things about how you're operating now that make you worried you won't achieve the strategic intent

 - Describe your proposed increment of change, and, as part of it, name your key request of them -- how they'll have to act differently, for a period of time.

 - Share the decision they get to make at the end of the increment

 - Ask for feedback, ideas, concerns, questions

 - Adjust based on that, and then get a commitment to try something

A note: you should practice this with a trusted friend before you pitch your stakeholder. At least once, maybe a few times. For high stakes such proposals, I practice a ton.

For our CEO friend, putting that all together, the PM and Engineering lead might say something like:

/"Our understanding is that the company's absolutely highest priority is growth, because that is what potential acquirers will want to see. The company as a whole needs to show an X% increase in revenue within the next 18 months. Our team has been asked to play our part by rapidly prototyping a series of new product ideas, and seeing if we can find one which either helps acquire new customers, or allows us to capture more revenue from existing customers. We're very excited about that challenge. However, we do have a concern that we wanted to talk about with you./

/First off, we're worried that, as we're working right now, it can feel pretty unclear to you what, exactly, the team has prioritized at any given moment. We really want to fix that. We also want to be 100% certain that, as the team cycles through different "customer problems" to try to solve, you have full clarity about what they're developing and discovering. We want to have the best possible shot at building something that you'll be super excited to share with customers./

/Unfortunately, the way we're working right now, sometimes people on the team get confused by what they hear from you, when you join our stand ups. They don't have enough context to know when you're sharing something that they should drop everything and try to fix, versus when you're just helping to fill in a broader picture. That's been causing some churn, and we're running a risk of drifting behind./

/So, we'd like to try a tweak, for the next six weeks:/

/First, to be sure you have real clarity about what's going, we'll set up a new every-other week meeting with you and the two of us, where we'll bring a detailed status update on what's been built and what's been learned -- that'll land partway through each sprint./

/Second, we still very much want you to come to the end-of-sprint demos -- that is super valuable to us and the team. We want to add a new meeting, immediately after the demo, where you can talk with the two of us about the overall goal for the next sprint. Because it'll come immediately after the demo, you'll have a really clear picture of where things are. We can all three work together to make sure the team is pointed at the most important customer problem to solve./

/Finally, if you're up for it, we'd like to have you meet with the whole team once a month to have a sort of open conversation about what you've been hearing from customers -- we think it's super valuable for the team to get a feel for what's going on in the field. I [the PM] can facilitate that, so you can just show and be ready to share./

/We'd ask that, during this six weeks, you not come to standups -- and if you have any ideas, share them with one of us, instead of emailing or slacking people on the team./

/At the end of the six weeks, we'd going to sit down with you and review the team's output and velocity, and also see if and how you've been able to both understand and guide the team's work./

/If necessary, we can make any adjustments to ensure that you're able to make clean decisions about what problems the team is solving. Let's get that meeting on the calendar now.../
