:PROPERTIES:
:ID:       5C7A0B37-8984-4A1F-8371-C1FCEB637174
:END:
#+title: Make a Compelling Offer
#+filetags: :Chapter:
* Make a Compelling Offer
** The Elements Of A Compelling Offer

You've defined a Strategic Intent that your stakeholder cares about. Thanks to that work, you have a shared long-term goal you can speak to. You have a high-level understanding of how your work contributes to that goal.

You've taken the time to develop an empathetic understanding of your stakeholder's key emotions. You can speak to the situation they find themselves in. You can list frustrations they want smoothed away. You can name things they want, that they feel like they're not getting.

You're ready to define a specific request for change, and wrap that up in a compelling offer.

When you deliver that compelling offer, you'll go through four steps:

1. *Name the shared long-term goal*

   As part of this, you'll share that you have worries about achieving it

2. *Share your understanding of their concerns*

   You'll give them plenty of room to "fix" your understanding

3. *State your own concerns*

   You'll do so directly and clearly, but in a way that doesn't trigger defensiveness

4. *Propose an incremental adjustment in how you work together*

   This adjustment should:

    - Make things a little better for you

    - Make things a little better for your stakeholder

    - Move you both a little closer to your shared long-term goals

Be ready to spend time preparing your offer. Even once you have all the pieces, it can often feel like there's no obvious way to proceed. It takes time to come up with something crisp, clean and compellings. Talk to some friends about good patterns of work, test out your thinking with people you trust. Sleep on it, and see if any new ideas come to you the next day.

To support you in the work, I'm going to list a set of tactics you can consider. For each, I'll name the kind of problems it helps address. Then, I'll expand on each, usually including a brief narrative example to bring it to life.

Feel free to dip in an out of these.

You'll find more ideas in the second half of the book, in the case studies.

** Tactics & Problems
*** Propose a Timebox
Problem: your stakeholder is reluctant to consider a change in their behavior.

Tactic: ask your stakeholder to try changing their behavior for an initial, limited period of time.
*** Offer A Future Decision
Problem: Your stakeholder is a human being. Therefore, agreeing to your proposal for a change in their own behavior may make them feel like they're losing control.

Tactic: ensure that your initial, timeboxed increment of change ends with a decision that your stakeholder gets to make.
*** Shrink Your Ask
Problem: The better way of working you want to get to is complex, and you can't see a way to implement it all at once.

Tactic: Shrink your ask to implementing just a *part* of that better way to work, even if that doesn't immediately improve things for you.
*** Link Frustrations To Outcomes
Problem: Your stakeholder doesn't seem to hear your concerns as valid or important. They don't understand why "your" problems matter for the business.

Tactic: use a form of "5 Whys" to develop a chain of consequences that shows how your day-to-day frustrations, if left unchecked, will eventually impact your company's long-term goals.
*** Tell A Story Of Growing Danger
Problem: You've worked out a way to connect your current frustrations to longer-term strategic outcomes, but the connections feel dry and unconvincing.

Tactic: Use the structure of a *story* to render your concerns vivid, immediate and memorable to your stakeholder.
*** Create Urgency Through Visibility
Problem: Your stakeholder accepts that your frustrations matter, but they seem unwilling to do anything *now*.

Tactic: Create visibility into the early impact of the underlying problems, so that you can both motivate immediate action, *and* make it possible to see incremental improvement.

*** Invite Your Stakeholder To Solve Your Problems
Problem: You need to ask your stakeholder to change their behavior, but doing so risks getting into a power struggle.

# (because they will feel challenged)

Tactic: Find a way to describe the results of their behavior as a problem for the two of you to solve together. Ask them open-ended questions that offer them a chance to be an expert, and solve the problem you're laying out to them.

*** Find Wins For Your Stakeholder By Hook Or By Crook
Problem: You can't figure out a way for your adjustment to immediately improve things for your stakeholder. Try as you might, you don't see how to address your frustrations in a way that directly benefits them.

Tactic: Find some win for them that you *can* offer, even if it's not strictly necessary for your adjustment.

*** Keep 'Em Busy
Problem: You need to ask your stakeholder to *stop* doing something. You're worried that they will resist, because they are a human being, and thus like *doing things*.

Tactic: Find a way to ask your stakeholder to *start* doing something new, *instead* of their existing behavior. Allow them to channel their energy into that new thing.
*** Address Fears Directly
Problem: Your proposed adjustment might raise concerns or fears for your stakeholder, such that they resist making a change.

Tactic: in your request for change, both *validate* their fears and address them *directly*.

*** Put Yourself On the Line
Problem: You're worried that your stakeholder will be reluctant to commit to your proposed adjustment, because it will feel to them like they have to do all the hard work.

Tactic: Make it easier for them to say yes by making it clear that you will personally take on extra work, and/or face some hard thing.

** Tactic: Propose a Timebox

Problem: your stakeholder is reluctant to consider a change in their behavior.

Tactic: ask your stakeholder to try changing their behavior for an initial, limited period of time.

If your request feels slightly uncomfortable for your stakeholder (as it often will), t's *much* easier for them to say "yes" if you're asking for a few weeks, than it is to agree to make a change indefinitely.

If you can get a commitment to try something new for a short period of time, you can then work to ensure that, at the end of that initial period, the stakeholder experiences things as going well.

Example:

Louisa is a staff engineer, and a key part of her job is conducting regular architecture review sessions with teams in her domain. Unfortunately, her CTO, Dave, has developed a frustrating habit of "dropping by" those architecture reviews and offering a series of half-baked ideas (he always /starts/ by saying "Is it okay if I ask a question?", but somehow all his questions end up turning into thinly veiled suggestions). These interruptions are undercutting Louisa's authority *and* sending the teams down a succession of blind alleys (he's the CTO! His suggestions seem really important! But he doesn't know what he's talking about in her area!).[fn:: "Wait, Dan, I just remembered: *you've* been a CTO. Did your directs ask you to stop talking at architecture reviews at some point?" Um... maybe we should just move on.]

She tries to imagine herself saying: "Dave, please stop speaking up during architecture reviews." Or, even: "Dave, please just stop coming to those sessions." But she gets an immediate pit in her stomach at the thought. Both of those feel like uncomfortably aggressive demands.

She's stuck for a bit, until she's talking it out with a friend over beers, and realizes she can make a more collaborative proposal.

She decides to instead frame it as: "Dave, I'd like to ask if we can try out something new for our next two sessions. If you're okay with it, I'll ask you to *just* listen and take notes. I'll meet with you immediately after each session, to dig into any questions you have, and to get your feedback on both the team and the architecture. After the first two sessions, we can see how it's going."

That positions the adjustment as a sort of shared experiment they're entering into together, instead of a one-sided demand that Louisa is making. This is a much easier request for Dave to say yes to it, because he can tell himself that, if it's not working for him, he only has to do it twice.

Other tactics she's using:

 - Put Yourself On the Line: she personally commits to spending extra time with him after each session.

 - Keep 'Em Busy: instead of just telling Dave to stop attending and/or talking, she asks him to *do something* specific (take notes so he can give feedback on the team and the architecture)

 - Find Some Wins: she creates a new opportunity for sharing team/architecture feedback (which she knows Dave finds meaningful)

** Tactic: Offer A Future Decision

Problem: Your stakeholder is a human being. Therefore, agreeing to your proposal for a change in their own behavior may make them feel like they're losing control.

Tactic: ensure that your initial, timeboxed increment of change ends with a decision that your stakeholder gets to make.

That will help them feel in control, which makes it much easier for them to say yes.

Example

Jonas is a product manager who is struggling with his engineering peer Lizabet, the engineering manager and tech lead for their team. Lizabet insists that, before her engineers start *any* work, Jonas first write extremely detailed tickets, containing enough information for the engineer to fully deliver the ticket on their own. Lizabet insists this is necessary to avoid wasting the team's time. However, Jonas has worked on teams where the engineers and PM's wrote much lighter and more informal tickets, then talked to each other steadly throughout the sprints, and things went much faster.

He goes through the various steps we've laid out, and comes up with a proposed adjustment. The core, slightly uncomfortable change will be to bring *much* lighter tickets to sprint planning. He'll then discuss the nuances of those tickets *during* planning. Throughout the sprint, Jonas wil commit to being available to answer any and all engineering questions at the drop of a hat. Finally, he includes some things that will feel like wins for Lizabet (most notably, a carve out of time to improve deploy).

But, even with all of that planned out, he's still worried about approaching Lizabet with his request. She's fairly new as a manager, and he knows she feels concerned about her authority with the team (some of who have been programming for years longer than she has). He's worried that she's put some kind of a stake in the ground about this way of working, and therefore this shift will feel like a challenge to her authority.

After talking it over with his manager, he decides to really focus on this as a temporary experiment, and one where *Lizabet* will get to decide whether or not it's working. He decides to close by saying, "I'll want you and I to meet, immediately after we've completed a sprint. I'll want to hear from you how this change has been working for the team, and if there's anything whatsoever that's been difficult about it. Then we can decide, together, if and how we want to adjust this new way of working, or even return to the fully detailed tickets we've been doing. I want to be certain both you and the engineers don't end up feeling like we're wasting their time."

** Tactic: Shrink Your Ask

Problem: The better way of working you want to get to is complex, and you can't see a way to implement it all at once.

Tactic: Shrink your ask to implementing just a *part* of that better way to work, even if that doesn't immediately improve things for you.

This can sometimes mean that your first adjustment won't make a big difference in fixing *your* frustrations. But if you can draw your stakeholder into steady collaborative improvements, you can then layer in the other pieces of the puzzle.

Example:

Oliver is an engineering director, leading a half-dozen teams who maintain his company's backend fulfillment systems. This quarter, he's working with his product peer, Alicia, on building a new, complex integration with a key strategic partner, that will allow his company to offer customers faster delivery times. Unfortunately, his team is barely making any progress, because they're swamped by issues reported by the fulfillment ops teams using the existing systems.

Oliver wants to put in place a new triage process to handle those issues. He believes doing so will create two benefits:

 - First, he'll be able to force explicit tradeoffs between handling current issues and building the new integration

   Currently, the engineers are sort of vaguely expected to just get it all done, aka make their own, local decisions about how to spend their time.

 - Second, he can create motivation to clean up some problematic bits of old code

   He strongly suspects there are a couple of places in their legacy systems that are responsible for most of the issues. But he doesn't know which parts, and so he can't make a case to Alicia other than "Update all our legacy systems", which is a total non-starter. By centralizing bug handling through a triage process, he has a shot at identifying what to fix.

Unfortunately, there are multiple changes he'd need to put in place before he'd see those benefits: he'd have to persuade Alicia to spend political capital to push the ops teams into this new triage process; he'd have to figure out how to link ops team-reported issues to the code that caused each problem (often far upstream of the reported issue); he'd need to carve out time to fix those underlying problems.

After a few weeks of feeling stuck, he decides to just get started with something small. He asks Alicia to join him in a new, weekly 30 minute meeting with his engineering leads. He asks each lead to bring to that meeting:

 - A rough estimate of how much time their engineers spent dealing with ops team issues that week

 - The top 2-3 "themes" of those issues

That's it. They can get going with that right away. Note: it won't free up any time (in fact, it means his tech leads have to do something new). But it is a meaningful first step towards setting up that triage process. It build alignments with Alicia on both the value of reducing time spent on issues (because she can now see just how much time the engineers are spending), *and* on some ways she and Oliver could reduce that time (if they can identify a small number of themes which drive most of the issues, they can make a targeted technical investment to clean up those underlying problems).

It also gets Oliver closer to the triage meeting he ultimately wants. To get all the way there, he could gradually expand on that initial 30 minute meeting, layering in the other parts of how he thinks the triage could/should work.

This tactic pairs well with both Propose a Timebox, and Create Urgency Through Visibility (in the above, Oliver is essentially creating a form of visibility).

** Tactic: Link Frustrations To Outcomes

Problem: Your stakeholder doesn't seem to hear your concerns as valid or important.

Or, to put it another way: they don't understand why "your" problems matter for the business.

Tactic: use a form of "5 Whys" to develop a chain of consequences that shows how your day-to-day frustrations, if left unchecked, will eventually impact your company's long-term goals.

# Then, find ways to make early challenges in proceeding through those steps *visible*, using the Create Urgency Through Visibility tactic.

# In order to both motivate your stakeholder, *and* to identify small changes that could matter, it can be very powerful to develop a chain of logical steps that connect the work your team is doing, right now, to what your business is trying to achieve, a year or more from now (the strategic intent you've extracted from your stakeholder)

# Lay out the steps in a logical chain that lead from what your team is doing, right now, to what your business is trying to achieve, a year or more from now.

# That will allow you to see how small changes in how you work with your stakeholder could increase the odds (even slightly) of the business achieving those long-term goals.

# However, it can sometimes feel very difficult to see the impact of our day-to-day work on some distant goal.

Do this initial work by yourself or with a trusted friend. Start by naming the immediate frustration you want to work on. Then ask, "Why is this a problem for the business?"

Whatever answer you come up with, ask that same "Why" question again. Keep doing that, over and over, until you eventually arrive at the strategic intent you've extracted from your stakeholder. If you can't get to the strategic intent, talk to some people, keep refining your understanding of the business. You may even end up realizing that your current frustrations *aren't* related to achieving that strategic intent, no matter how hard you look (this isn't bad! It will let you focus your advocacy on things that do matter).

# That chain should not only show the importance of dealing with your frustrations, it should also help identify some leading indicators, which you can then target for creating visibility.

Example:

Sagar is the engineering lead on a sprint team. Unfortunately, the sales reps at his company keep pestering him with an endless series of new feature requests. When a sales rep doesn't get an immediate response, they ping Sagar over and over in Slack to "check for status". Last month, at the company party, Sagar saw Jordy, a sales rep, striding towards him with a big grin on his face, and Sagar had to fight an overwhelming desire to run away.

# , out of fear that Jordy would try to browbeat him into working on Jordy's pet feature.[fn:: He was right.]

# Sagar has been trying to get his product manager, Emily, to step in and wrangle the sales team, but, so far, she's been unwilling to do so. He's decided that, for his current bid for incremental improvement, Emily is his stakeholder.

Jordy has extracted a meaningful strategic intent from his product peer: their company needs a new product in order to keep growing revenue, and Sagar's team's work is a part of trying to develop that product.

How can Jordy connect his day-to-day frustrations to longer-term company goals?

Here is the 5 Whys he works out with a friend (a tech lead on adjacent team):

  - Why is it a problem for the business that the sales team keeps interrupting Sagar with 'urgent' feature requests?

    /Because it's distracting him and the other engineers/

  - Why is it a problem for the business that the engineers are distracted?

    /Because the team as a whole can't move quickly/

  - Why is it a problem for the business that the team isn't moving as fast as it could?

    /Because it's pushing out the delivery of the early prototypes we're trying to build/

  - Why is it a problem for the business if it takes a little longer to build those prototypes?

    /Because the ProdDev teams need to test those prototypes with customers before we can find our next product opportunity/

  - Why is it a problem for the business if it takes a little longer to find our next product opportunity?

    /Because we need to develop a new product to sell, and before we can commit multiple teams to development, we need to identify a feasible and valuable product opportunity/

  - Why is a problem for the business if it has to wait a little longer to develop a new product?

    /Because top-line revenue growth has stalled, and the company needs to show more growth by our next funding round, which is fast approaching, and we can only show more growth if the sales team has something new to sell/

With that end-to-end understanding in hand, Sagar can *authentically* explain how a small reduction in the frequency of interruptive requests from the sales team can, in a small but real way, increase the odds of the company achieving its long-term goals. And, conversely, he can show how every week they *don't* fix that broken pattern, they're drifting further behind on their most important goals.

Having all those specific steps gives him much more clear ammunition than just a vague sense that they're not moving fast enough.

That chain of consequences can also help Sagar define *leading indicators*: near-term outcomes that his team can only achieve if they get the sales reps to stop blowing up his focus. In this case, that's delivery of early prototypes. Having some options for leading indicators sets him up to use the Create Urgency Through Visibility tactic.

** Tactic: Tell A Story Of Growing Danger

Problem: You've worked out a way to connect your current frustrations to longer-term strategic outcomes, but the connections feel dry and unconvincing.

Tactic: Use the structure of a *story* to render your concerns vivid, immediate and memorable to your stakeholder.

/Lean in close, I'm going to tell you a secret/. Thanks to several million years of work by evolution, human beings have certain storytelling structures wired super deeply into our minds. If you can frame your concerns using one of those structures, you can take advantage of that wiring to bring your concerns vividly to life.

There's one particular structure, a form of Heroic Arc, which is specifically useful for sharing business challenges. I like to frame that arc as:

 - The world is at peace

 - A danger emerges that threatens that peace

 - A hero tries to face the danger, but fails

 - The danger intensifies

 - The hero discovers new strength within themselves

   (Often with the help of a friend or mentor)

 - The hero overcomes the danger and creates a better world

Now, you may well be saying to yourself, "Um, Dan, what on earth are you talking about? Do you have some kind of life-long love of empowerment fantasies?[fn:: I mean, *yes*, obviously.] We're talking about running a business here. I need help with hitting my OKR's, I don't need to hear your random mutterings about heroic journeys."

Of course, of course. But just stick with me for a moment, and let's see if we can bring this to life.

Example

Ted is an engineering leader at a tech-enabled online pharmacy. He wants to temporarily hit pause on delivery of new features, so that his team can clean up their systems. In particular, he's unhappy about the number of high-impact, time-sensitive exceptions that his team has to fix by hand.

His key stakeholder is the VP of Pharmacy Operations, Amitai (Ted's systems face internal users, not customers). Six months back, the CEO of the company brought Amitai on board and charged him with hitting a set of extremely ambitious scale and efficiency targets. Amitai then turned around and handed Ted a sprawling list of features he claims he needs, every one absolutely as soon as possible, if he's going to hit those targets.

Ted has done some of the work we've described earlier in this book, so he knows there's a long-term strategic goal to enable same-day delivery of prescriptions. That's what their near-term scale and efficiency targets are ultimately driving towards.

Given the above, how could Ted most effectively frame his concerns to Amitai?

What might you say, if you were in Ted's shoes?

What Ted tries first is an *appeal to reason*.

He sits down with Amitai and makes a cool, clear, rational case. "I know how important it is to scale up our pharmacist count, and to keep taking time out of our mean-time-to-fill. But, if we're going to hit our long-term goal of same-day delivery, we need to pause feature delivery so my teams can reduce the rate of exceptions they have to hand fix."

Now, this is not bad! Ted demonstrated an empathetic understanding of Amitai's near-term goals (around pharmacist count and time-to-fill). He named the shared strategic goal of enabling same-day delivery. He focused his request for technical investment on the visible outcome of reducing the exception rate (instead of a vaguely moralizing demand to clean up technical debt). Heck, now that I write all that out, this is a really excellent request!

Unfortunately, it doesn't work.

Amitai says "Fine, I'll think about it. But right now, you need to stay focused on integrating the new shrink wrapper. We can talk about this exception count problem later."

And then, even as he walks out of the meeting, *Amitai promptly forgets about this conversation*.

Literally all Amitai hears all day is a parade of numbers from people, each accompanied by a plea for him to deploy his political capital to do something that will piss off some other people and/or his boss. Nothing about this particular one lodges more firmly into his mind.

Ted sits there, feeling completely stuck. He's certain that the exception count issues aren't just *annoying*, they're a real risk for the business. But he can't seem to break through to Amitai.

That weekend, on the sidelines of an ultimate frisbee game, Ted complains about this to a friend who develops original physical theater productions.[fn:: Just a random such frisbee-playing, physical theater-devising friend, not resembling anyone writing this book.] That friend (um, *Dean*) lays out the heroic arc above.

At first, Ted can't see how to apply it. Dean says, pointing at Ted with the frisbee he's holding, "Start by finding a *moment in time*, when problems first emerge. Things seemed to be heading in the right direction, but then this Bad Thing started to develop." Dean waves the frisbee grandly. "Like distant thunder rumbling on the horizon. See if you can find a specific moment. Maybe when something changed, or maybe when you made a worrisome discovery." He points the frisbee at Ted. "What might that be?"

"I... dunno? I guess I could do something about when I got switched to backend from customer-facing. Actually," says Ted slowly, "that *is* when I realized how bad things were."

"Great, perfect. Really hone in on at that moment you realized 'how bad things were'. Then, were there things you or other people tried, that *didn't* help?"

"Oh, plenty. We added logging, and--"

"Yeah, I don't care. Don't tell *me* this, tell your guy. And then tell him how, despite your noble efforts, things kept getting worse and worse. And now it's almost too late! If he doesn't do your, whatever it is you want him to do, things are going to go completely to hell, the forces of chaos will win. Your guy, whatshisname---"

"Amitai."

"---Amitai will *care*. And he'll remember." With that, Dean stands up, stretches, and jogs onto the frisbee field, leaving Ted thoughtful.

Over the next few days, Ted works on his story pitch, even calling up Dean for some practice. It's a lot of time, but it feels worth it. He's really worried that, if he *can't* get buy in from Amitai to do something other than churn out new features, they're going to be backed into a corner that he's not sure how they'll get out of.

Finally, he's ready. At his next weekly meeting with Amitai, he lays out his request in a new way.

"I don't think I ever told you, but I only came over to the ops side at around the time you were hired. Before then, I'd been working on Storefront. It's the same tech stack, but there's a totally different history. As I was getting to know my new teams, I sat in on a series of team planning sessions. And as I did... I started to notice this weird pattern. I couldn't understand it at first." Amitai is listening intently. He has been drawn into this moment in time that, as per Dean's advice, Ted has brought to life.

"At every single sprint planning," Ted continues, "the teams would name an engineer to 'Criticals'. I didn't know what that meant, but that engineer always looked *miserable*. Finally, after a few meetings, I stopped everyone and asked what was going on. It turned out that the teams were handling so many exceptions, that one engineer from every team had to do nothing but clean up critical data in the field, for *the entirety of the sprint*. They wouldn't work on new features, they wouldn't improve the code, they would just try to keep prescriptions flowing, and make absolutely certain no safety issues creep in." Amitai visibly tenses at the mention of safety issues.

"We've tried to fix some underlying issues, but just staying on top of the existing criticals is taking so much time, that we're barely treading water. I'm worried that, as we scale up our pharmacist count, we're going to be generating more and more exceptions, and more and more engineering time will be devoted to just keeping things from falling over. I want to reduce time-to-fill, and I want to get us to same-day, but, unless we do something to get a handle on critical exceptions, I just don't know if we're going to be able to."

He sits back. There's a long pause. Finally, Amitai says, slowly, "Okay, what are some options?"

Just as Dean had predicted.

Even if you don't get immediate buy-in, using the structures of a story will ensure you stakeholder *remembers* the concern. That it feels *real* to them.

# Maybe ref the Daniel Kahneman thing

This pairs beautifully with Create Urgency Through Visibility.


** Tactic: Create Urgency Through Visibility

Problem: Your stakeholder accepts that your frustrations matter, but they seem unwilling to do anything *now*.

Tactic: Create visibility into the early impact of the underlying problems, so that you can both motivate immediate action, *and* make it possible to see incremental improvement.

Example:

Dylan is a senior engineer on a team that maintains the data ingestion pipeline for his company, which imports customer data in bulk on a nightly basis. Of late, Dylan has been growing more and more worried about how his team's systems will handle the increasing load as their customer base grows (and as they acquire some customers with very large data sets). His team lead, Thomson, agrees that the current pipeline is pretty hairy and will need some reworking at some point. Unfortunately, Thomson keeps on telling Dylan that that point is absolutely not now. The team was handed a top-down OKR to plumb some new data types through the pipeline, and therefore new data types is all Thomson is willing to talk about.

Dylan gets more and more worried. One afternoon, he drafts a long, ranting email to Thomson, about how the top-down OKR's are ignoring the context of the team. The next morning, he (wisely) decides to not send that email.[fn:: He keeps the email draft around so that he can periodically reread it to make himself feel better.] He starts to spend time in the evenings trawling through random logs, looking for problems.

One night, he makes a discovery deep in the logs, and a plan clicks into place. Although no one specifically intended it, there's n exception that gets recorded in the logs, every time a nightly job finishes for a customer. He throws together a couple of parsing and summing scripts, puts the resulting data into a graph, and sits down with Thomson to review what he's found. Dylan shows Thomson that the finish time for the largest nightly jobs has been steadily creeping later and later. It looks like, if they add just a few more customers with large data sets, those finish times will land *after start of business*. Which will mean that customers will be dealing with stale data. This is a Very Bad Thing, for their particular business.

Thomson emerges from that meeting ready to talk to both his product peer and his boss about carving out some time to dig into what, exactly, is causing imports to run so late.

Note: he's willing to do so *both* because he can see the risks of waiting, but also because he, *and his stakeholders*, can now see the result of various kinds of incremental investments. If they can do a little bit of work and delay the arrival of the "stale data in the morning" moment, that's a real win, *which will be visible on Dylan's new graphs*. If they can do a little bit of work and fix issues just for a few big customers, that might be a real win, which they could also make visible. Going from  a monolithic "We have to fix this", to "There are ways to make things a little better with a little work" is just transformative for these kinds of conversations.

Note: creating visibility to motivate action is useful in an extremely wide variety of contexts, not just ones where precise measurements are available.

Is your team constantly stuck waiting on dependencies? Create visibility by regularly estimating how much time each work stream spends in a wait state, and therefore how much overall time is being added to individual projects. Is that precisely accurate? Of course not. Is it useful enough to enable you and your stakeholders to make good decisions? Absolutely.[fn:: BTW, if you are struggling with dependency challenges, don't fall into the trap of estimating how much time each engineer is waiting. The problem isn't that your engineers are waiting, it's that the work isn't advancing. Sayeth Don Reinertsen: Watch the work product, not the worker.]

Is your team somehow failing to carve out time to do some early technical exploration as a first step in a large project? Create a list of questions you want to develop answers for, and then march through that list of questions, checking them off as you go.

Is your CEO's desire to sit in on all customer interviews stalling out the product team's ability to learn? Start tracking the number of customer interviews each week, and make this friction clear.

Creating visibility is one of my very favorite tactics. It pairs beautifully with Link Your Frustrations To Goals, with Shrink Your Ask, with Propose a Timebox.

Ultimately, I think the act of creating visibility is so profoundly helpful for getting unstuck, because it enables you and your stakeholder to literally *see* the world in the same way. Which can be a deeply meaningful way to bring you together.

# Use an example around security
** Tactic: Invite Your Stakeholder To Solve Your Problems
# Depersonalize Your Frustrations
# Invite Them To Solve Your Problems
# Make An Invitation To Solve Your Problems
# Craft An Invitation To Solve Your Problems
# Craft A Problem-Solving Invitation
# Invite Them To Solve Your Problems
# Invite Your Stakeholder To Solve Your Problems

Problem: You need to ask your stakeholder to change their behavior, but doing so risks getting into a power struggle.

# (because they will feel challenged)

Tactic: Find a way to describe the results of their behavior as a problem for the two of you to solve together. Ask them open-ended questions that offer them a chance to be an expert, and solve the problem you're laying out to them.

This is a form of what Chris Voss calls Calibrated Questions, in Never Split the Difference.

Example

Lisa is a PM in the fulfillment space, working with a key operational stakeholder: Mark Blevins, the VP of Warehousing. The Good News: Mark Blevins has worked in warehousing for almost two decades, and knows his shit. The Bad News: Mark Blevins has worked in warehousing for almost two decades, and has zero patience with anyone asking him, well, any questions whatsoever. He routinely calls Lisa at the end of her working day and demands that she improve some existing workflow, asap. When she tries to ask about the warehouse ops metrics tied to that workflow, he cuts her off and says "Look, I don't need all that crap. If I'm telling you we have to fix receiving, then we have to fix receiving. Okay?" And then hangs up.

Lisa doesn't know what to do with a stakeholder who takes a request for business metrics as a personal affront. She *wants* to solve problems with Mark, but if she can't get him to give her some basic operational metrics, how is she going to do her job? She has to make prioritization decisions, she has to set goals for her teams, for god's sake, she has to *understand* what Mark is even trying to do. She can't just tell her engineers to randomly start coding receiving workflows. She sits staring at her desk, her phone still in her hand.

She imagines confronting Mark about this directly: "If you won't give me metrics that are impacted by these operations, I won't prioritize this work." That feels like a guaranteed failure. In her interactions with Mark so far, he always seems to be spoiling for a fight.

She feels good and completely stuck.

But then, the next morning, while cleaning up after breakfast, she has an idea. She hurries into her office, clears a couple of meetings off her calendar, and gets her thoughts together. She pings Mark for "a quick check-in". When Mark appears, frowning, on her zoom screen, she starts off, briskly: "I'm really eager to work on the receiving issues we talked about yesterday. I was getting ready to get the engineers started on it, but then I realized: there have been *far* too many times that the engineers worked on some warehouse process for you, but they didn't fully understand what they were doing." She shakes her head regretfully before continuing.

"They just don't have your depth of experience in warehousing. And then, what they delivered just *didn't work*. I *hate* when that happens. I want to be sure to keep them on track this time. If they got this one right, how would you tell? Or, if they messed up, what would tell you that? What would you see, when you looked at, like, your dashboards that would show you that whatever they had launched didn't work for you, and your team? I want to hold them accountable, so that we're not wasting your time."

Mark blinks. He gruffly agrees that there have been too many failed launches. He then says, slowly, "Well, of course, I'd first look at UPH on the receiving line. But you can't /only/ look at UPH, only an idiot does that. It's *also* exception counts. Our exceptions are getting totally out of hand, we *have* to keep that under control. I'm checking exceptions every few hours, which is *batshit*. That's no way to run a building." Having delivered this statement [ultimatum, lesson, homily], he sits back with his arms folded over his chest.

Lisa has to restrain herself from grinning. She has managed to get a line on the things Mark really cares about, with a healthy side order of emotions (about the rising tide of exceptions). She's neatly avoided direct conflict, but started to draw him into collaboration around the business impacts of "fixing receiving."

Note that she "played low status": she suggested that she and the engineers *needed Mark's help*. That created space for him to be a high-status expert. It also made it difficult for him to tell her she's wrong---he'd have to suggest that the engineers know the warehouse processes as well as he does.

Of course, Mark might still be frustrated, and say, "The engineers should know how those processes work!" If he does, Lisa can just nod her head, sigh and *agree*. "You are *so* right, Mark. I really wish they did! But we're just not there yet. How can I make sure they stay on track?"

If you keep on steadily and calmly asking open-ended "How could I possibly solve my problem?" questions, often, your stakeholder will find themselves coming up with the precise solutions you've been wanting to implement. And they'll feel like the ideas are their own, not something they've been forced to do.

** Tactic: Find Wins For Your Stakeholder By Hook Or By Crook

Problem: You can't figure out a way for your adjustment to immediately improve things for your stakeholder. Try as you might, you don't see how to address your frustrations in a way that directly benefits them.

Tactic: Find some win for them that you *can* offer, even if it's not strictly necessary for your adjustment.

This is where having a map of their emotions really pays off: you can almost always find some win they'll care deeply about, by thinking through their frustrations, fears, delights & dreams. E.g. you could:

 - Smooth away some frustration

 - Address some long-term fear

 - Provide a delight they've been yearning for

 - Move them towards their long-term dreams

A key: don't fall into trap of thinking of wins as just sourced from what they're explicitly asking for. You often *can't* give them what they're asking for. But you can solve for the underlying feelings they're struggling with.

If you're in the challenging situation where seemingly /nothing/ is frustrating for your stakeholder, take a look at both Link Your Frustrations To Goals and Create Urgency Through Visibility.

Example:

Marguerite and Tom are product and engineering leads for a sprint team. Fortunately, they have an excellent, high trust relationship with each other. Unfortunately, they are feeling super stuck with Marguerite's boss, Natalie, the VP of Product. Natalie likes to quote Marty Cagan all day about empowered teams... but somehow can't let her PM's make a single decision on their own. She's constantly asking for memos and briefs before she'll allow work to start; she overrules her PM's on decisions of every size and scope; she regularly takes over the planning meetings she attends to steer the teams herself.

Over a series of fevered [heads-together, whispered, outside-of-the-office] conversations over coffees, Marguerite and Tom have hashed out a first incremental adjustment they want to propose to Natalie: they will ask to run their team for a full month without her attending *any* of their weekly planning meetings. This represents a significant shift from how they've been working with her.

If they can stick with this approach for a few months, they both believe they'll be able to *visibly* help Natalie achieve her own goals. But in the short term, it there's every chance it will just feel like a significant loss of control. And, if there's one thing they know about Natalie, it's that she really, really likes to be in control.

Marguerite tries to imagine making this pitch. All she can see is Natalie squinting at them skeptically through her wire-rimmed glasses. And then bluntly refusing to go along.

Try as they might, she and Tom can't seem to find any way to make this *feel* like a win for Natalie. All Natalie ever seems to ask for is more checkpoints, more control, more direct contact with the teams---precisely the things they're going to take away.

One night, Marguerite is talking this over with her partner while they make dinner. Her partner looks up from peeling some carrots. "Look, hon, I have to ask. Is it possible you're so pissed at Natalie that you don't actually *want* to find a win for her?" Marguerite starts to protest, but trails off as the truth of it settles uncomfortably in. "or," she says, "how about if you shut up?", and throws a cherry tomato in her partner's grinning direction.

The next day, before her 1:1 with Natalie, Marguerite spends time letting go of her frustrations. She tries to allow herself to be in a place of curiosity. "Just treat this like a customer interview", she tells herself, "where you're prospecting for pain."

Then, during the conversation, she deploys her full suite of tactical empathy skills to draw out Natalie's underlying feelings.

She meets with Tom immediately after. "Okay," she say, "I might have a few things we can work with."

Tom leans forward. "Lay it on me."

First, offers Marguerite, despite Natalie's behavior, it seemss like she truly *wants* to create empowered teams, operating with meaningful independence.

That's a *dream* that she finds motivating, but it also feels incredibly far away from right now. Natalie has been telling herself a somewhat confused story about how, by giving such tight direction to the teams, she's gradually coaching them up. There's a grain of truth in that, but Natalie hasn't been able to follow through by actually stepping back, even when the teams are genuinely ready. But she truly wants to be the kind of leader who creates space for empowered teams to thrive under her.

"Huh," says Tom. "This is not a thing I would have guessed. What else?"

Marguerite shares her theory that part of why Natalie keeps jumping into the planning meetings is because *she misses working directly with engineers*.

That's a potential *delight*. Her close collaboration with engineers of every level was one of her favorite things about working as a PM. It got her mind going about product opportunities, it helped her feel grounded in terms of the tradeoffs she's pushing for. And it was just fun! Engineers are different from PM's and stakeholders, she loved staying connected with them. The planning sessions aren't actually giving her much of the thing she remembers loving, but Marguerite thinks that's part of why Natalie keeps jumping in.

Given this set of hypotheses about what is driving Natalie's behavior, Tom and Marguerite come up with two additions to their proposed increment.

First, they add something that will allow Natalie to move towards her dream of empowered teams:

 - They'll position the adjustment to Natalie as helping to learn *how* the teams can take more independent ownership

   They have enough trust with Natalie that they can lay out some ideas how to do this, see below.

   That said, if they didn't have that level of trust, they could stop at this point, an Invite Natalie To Solve Their Problems, ala: "How do you think the teams could show you that they were ready for more independent ownership?"

 - They'll schedule brief weekly touchpoints with her, where, among other things, the three of them will check in on what they're learning about having the team operate more independently

   Natalie can both look forward to an ongoing conversation about something she really cares about, and can also be reassured that she won't lose all visibility and control (this is mixing in some Address Fears Directly).

 - At the end of the month, Marguerite and Tom will work with Natalie to draft early guidance for all the teams, on how to earn more independent ownership

   This will be a chance to start to bring her dream to life.

Second, they come up with something that will give her the delight of directly interacting with engineers.

They'll add a middle of the month meeting, playfully called "Technical Throwdown", where all the engineers on their team will meet with Natalie and have an open-ended conversation about what they're learning, how their systems are holding up, new technologies they're playing with. Tom & Marguerite will always start that meeting by solemnly announcing that No Decisions Will Be Made, and will enforce that if the conversation becomes too directive.

By adding this to their proposed first adjustment, they can offer Natalie another win, by supplying an absent delight.

They realize they now feel excited about sharing their proposed first increment with Natalie. They can offer her some genuine wins, while still sticking to their guns about clearing space for them to move more quickly on the ground.

** Tactic: Keep 'Em Busy

Problem: You need to ask your stakeholder to *stop* doing something. You're worried that they will resist, because they are a human being, and thus like *doing things*.

Tactic: Find a way to ask your stakeholder to *start* doing something new, *instead* of their existing behavior. Allow them to channel their energy into that new thing.[fn:: If you've ever had small children, you may recognize this as a familiar tactic. Someone once explained to my wife and I that, instead of angrily saying, "Stop poking your sister!" we should give calm and extremely specific directions that would result in our son no longer poking his sister. E.g. "Please put your hands in your pockets." This has served us quite well! I'm not saying you should treat your CEO like a toddler. Or, wait, maybe I am? Look, we're all humans here.]

Examples:

 - "Stop talking during meeting X" -> "Take notes during meeting X to discuss after"

 - "Stop attending meeting X altogether" -> "Attend meeting Y instead"

 - "Stop overruling all the team's decisions" -> "Pick the one or two most important decisions that you really care about, drive alignment on those"

 - "Stop harrassing the team with status requests" -> "Bring all your questions to the progress sync meeting"

 - "Stop crapping all over the team during demos" -> "Note down all your concerns and discuss them with me, immediately after demo"

 - "Stop trying to get the team to spend extra time on your priorities" -> "Bring your requests to the shared triage meeting so you can directly argue with the team's other stakeholders"

 - "Stop demanding high-stakes commitments to long-term estimates" -> "Demand that the teams demonstrate that they deeply understand the underlying business goal and are steadily offering options to achieve it, as the work unfolds"[fn:: This one is so easy. I will leave the details as an exercise for the reader.]

This pairs very well with Find Wins By Hook Or By Crook (because such "not strictly needed" wins are sometimes the specific other thing you'll ask them to do), and also Address Fears Directly (by thinking about their underlying fears, you can come up with good alternative actions).

** Tactic: Address Fears Directly

Problem: Your proposed adjustment might raise concerns or fears for your stakeholder, such that they resist making a change.

Tactic: in your request for change, both *validate* their fears and address them *directly*.

Addressing fears directly means, first, *validating* those fears. Sharing your genuine understanding of the fears as reasonable, even *inevitable*.

Once you've done so, you have several good options:

 - *Create shared visibility*

   Ensure you and your stakeholder can *both* see if their fears are coming true, early enough to take action.

   Example

   The engineers on a team want to disable a suite of slow, flaky tests that keeps stalling out their CI/CD pipeline. Unfortunately, the head of engineering has some very reasonable fears about a resulting increase in bugs making their way to production. To speak directly to that fear, a senior engineer on the team works with the help desk to create a graph of weekly bug reports touching on their part of the product. The team and the head of engineering can now review that graph to see if customer bugs trend up. If they do, the team can quickly re-enable the tests.

 - *Offer meaningful control*

   Ensure your stakeholder has something they can do, to prevent their fears from coming true.

   Example

   The engineers are about to start on a key, multi-month project. Before they get going, they want to spend time researching a promising new technology. Their PM is, naturally, afraid that doing so could delay project start enough that they'll be "behind before they even get off the starting line." To speak directly to this fear, the engineers commit to a weekly review of what they've learned with the PM. After each such review the PM can, if they feel strongly enough, simply cut short the exploration and request a return to tried and true tooling.

 - *Own the risk with empathy*

   Directly own the possibility of the fears coming true, and the potential impact on your stakeholder. Situate it as part of something worth doing, and ask them to take that chance with you.

   Example

   As part of developing a new enterprise-tier feature, the CPO wants several PM's on their team to work directly with their company's largest customers. Howeer, the VP of Customer Success, who has spent years keeping those big customers happy, has some reasonable fears about frustrating them in any way. The CPO works hard to put in place both visibility and control for the VP of Success. Finally, she says, authentically, "Look, your team knows those customers far better than we do. I wish I could promise that my PM's will never say something that lands wrong. But those are tricky customers, and I'm not certain we'll never misstep. But if we want to fix the customized data export issues they keep beating us up about, then working closely with the big accounts is the only way I know to do it. And I really want us to get there."

And now, a warning, with the giantest of flashing red lights:

Whatever you do, don't try to blithely convince your stakeholder that their fears *won't come true*.

Note: this path, despite being a reliably terrible idea, can be *enormously* tempting.

You know that your ask could, depending on how it plays out, make life harder for your stakeholder. That's *why* there is fear in the air. Having that hanging over you doesn't feel good or safe. As a result, some part of your brain may desperately try to convince you that the bad things simply won't happen. Once it convinces you of this, your brain will then insist that, if only you can *explain* this to your stakeholder, everything will be fine. Going down this path can feel easier to your brain than *admitting* to your stakeholder that there is, in fact, anything to be afraid of.

But, you're asking your stakeholder to take a genuine risk. Insisting "Don't worry, trust me, everything will be fine", runs a serious risk of making them feel like you're minimizing their concerns, that you're patronizing them. Which can trigger exactly the resentment and resistance you want to avoid.

Instead, address any potential dowsides directly, clearly and with empathy. Make the risks visible, offer them control over those risks, and own that you're asking for something potentially hard. Don't avoid, don't minimize, and don't skirt around the potential challenges.

# Example



# For example, say you're an engineering lead, and you're asking your product manager to start to consistently set aside time in each sprint to deal with some nasty under-the-hood issues that are causing lots of reactive work on the part of the team.

# # or: issues in parts of the code the team expects to work on, in upcoming months

# What might that PM be afraid of:

#  - They're giving up some control over their ability to achieve their own goals

#  - They're afraid the engineers, if given this blank check, will come back with a demand to launch a giant rewrite (or, better yet, blithely announcing that they've already started that rewrite, and they'll need to spend "the next couple of sprints" finishing it up).

#  - They're afraid that the team's understanding of what they're going to work on is wrong, and therefore, the team will waste time (the PM has the humility to know that even their own understanding of what they're going to work on may change)

** Tactic: Put Yourself On the Line

Problem: You're worried that your stakeholder will be reluctant to commit to your proposed adjustment, because it will feel to them like they have to do all the hard work.

Tactic: Make it easier for them to say yes by making it clear that you will personally take on extra work, and/or face some hard thing.

If humans see someone putting themselves on the line to face a difficult or risky challenge, they become much more willing to listen to requests from the person to help.[fn:: This is a big part of what we mean when we talk about someone having "moral authority".] Whereas, if a human is asked to do something that they perceive as risky, but the person doing the asking doesn't seem to be taking any personal risks, or shouldering any of the new burdens created, that creates resentment and resistance.

Examples of you how you can put yourself on the line:

 - *Take on off-hours responsibilities*

   As part of your proposed adjustment, will someone have to login at 11 pm each night, to check for successful close of business on the west coast? You will, of course, offer to be that person.

 - *Force yourself to be extra responsive*

   Give key players in the adjustment a means to get directly to you, no matter what else you're doing, e.g.:

   - Set up a new slack channel you'll have to monitor

   - Put in place a daily standup that you'll always attend

   - Give out your personal cell phone number to all and sundry

 - *Throw other parts of your job overboard*

   Cancel some key set of meetings you usually lead, so that this adjustment can get your full focus.

   Note: the more visible a cost this has to you, the more weight it will carry with your stakeholder. You're not going to tip the scales with your stakeholder by cancelling a few 1:1's with of your directs. You want to find something more painful to you, like  suspending a regular meeting with the CEO, or having someone on your team lead a key monthly planning meeting, or the like.

 - *Point problems firmly in your own direction*

   Add a regular 1:1 check-in with your stakeholder, where they can share any problems that have cropped up. Make clear that you will take responsibility for resolving such problems. Or personally run a regular triage process, so that you're hearing about any problems as quickly as possible.

 - *Face a difficult shared stakeholder*

   As a part of this adjustment, will someone have to tell the CEO that they're not going to see any progress on their pet project for a few months? Offer to be the one to share this news and bear the brunt of the CEO's frustrations.

 - *Take on extra travel*

   Hop on a flight to meet your stakeholder in person, for either the initial pitch, or as a regular part of the ongoing adjustment. Commit to being the one to visit sites or customers in person.

 - *Have a hard conversation with your team*

   Are you asking your stakeholder to lean into a difficult conversation with one of their direct reports? If so, find a way to commit to having a "similarly hard" conversation with people on your team.

   Note: this doesn't mean that your team has to be equally to blame. Perhaps you're asking the VP of Product to challenge one of their PM's to push back on stakeholders, rather than passing all requests through to the ever-more frustrated engineers on your team. You can commit to sitting down with the engineers, making clear that the PM is stepping up to try something new, and challenging them to put aside their frustrations and work their butts off on any requests that *do* come through.






** Tactic: Dry Run With a Friend
Before you make your proposal, *practice*. Out loud.

First on your own, then with a trusted friend. At least once, maybe a few times.

Eventually, going through this arc will feel natural, and you won't need to practice as much. But, early on, you're going to want to be extremely disciplined about going through the steps in sequenc. It's incredibly easy to skip over important steps, which can leave your stakeholder unwilling to say yes.

For high stakes such proposals, I still practice over and over, until it feels fully clear, smooth and authentic.
** Tactic: Invite Them To Tell You What's Wrong
When you actually deliver it, don't ask "yes/no", ask what's wrong?
** Troubleshooting
*** Stakeholder doesn't confirm Strategic Intent
*** Stakeholder doesn't validate summary of their concerns
*** Stakeholder doesn't accept your concerns
*** Stakeholder pushes back on specifics of change
** Exercises
* Scraps
** Stage Managing the meeting
You should deliver yor proposal verbally -- that will let you share your (authentic!) emotional connection with their hopes and fears. If useful, you can certainly buttress what you say with a written memo or a set of slides. But find a way to connect, as humans, in this moment.

In order to make your proposal, create a space slightly outside of the normal flow of day-to-day pressures. That could simply be starting a regular 1:1 by saying "I have some concerns I want to talk out, can I ask to put aside our normal agenda for today?" Or it could mean breaking normal patterns, perhaps meeting in person instead of online. You want to signal that there's something important for you to face, together.

** Tactic: End With A Decision

# Ensure Your Stakeholder Retains Control By Offering a Future Decision

# Offer a Future Decision To Maintain Feeling of Control

Almost all stakeholders have some fear of *losing control*.

# The fear of loss of control is incredibly common. We can *all* feel the risk of losing agency, of watching, powerless, as things all around us collapse into failure.

Such a fear can easily cause your stakeholder to tensely [rigidly] reject your proposal, even if you've gotten all the other pieces right.

Why is this?
# When people are operating from a place of fear, they can't engage in rational thought.

Having someone ask us to change our behavior can feel like a *criticism*. That can immediately raise the emotional stakes. From that place of heightened emotion, it's extremely easy to hear a request to change as a request to give up our control over a situation. Our fear will be shouting at us that, if we go along with the request, we will be completely at the mercy of a situation that is on the verge of tipping over into abject failure. The fear will be insisting that the only way to prevent that failure is to push back on this request, immediately.

# Humans, am I right? (I say this someone who has 100% done exactly this, plennnnty of times)

Fortunately, once you understand this, it's possible to design your proposal so that your stakeholder hears it as a way to *increase* their control---even as you ask them to make an uncomfortable change.

You create the feeling of control for your stakeholder by building your proposal around a *meaningful future decision*.

Specifically, you want your initial period of change to *explicitly* end with a decision your stakeholder will get to make. Ideally, you want that decision to be both about "Should we continue working in this new way", and *also* about if and how to pursue some new, potentially valuable, business option. This is part of why generating wins across all three fronts is so valuable.

When your stakeholder hears your request for change, you want them to, *as part of it*, be imagining that future moment of decision, of control. That will make it far easier for them to say yes.

** Defining an Increment: An Example

As is our way, we'll bring this to life with a story:

# Change from 3rd person to something else? "Lila is the engineering lead..."

Imagine that you're the engineering lead on a sprint team.

You're getting more and more frustrated, because the sales team keeps pestering you and your team with an endless series of 'urgent' feature requests. When a sales rep doesn't get an immediate response, they relentlessly ping some engineer to "check the status" of whatever they asked for. Last month, at the company party, a sales rep strode towards you with a big smile on their face, and you had to physically resist a desire to run away, fearing they'd try to get you to commit to working on their pet feature.[fn:: You were right.]

You've tried to get your product peer to step in and wrangle the sales team, but, so far, they've been unwilling to do so. You've decided that, for your current bid for incremental improvement, your product peer is "your stakeholder".

Let's dig into the steps:


*** Map from your team's day-to-day work to the company's strategic goals


*** List what is frustrating to your stakeholder, in the current situation.

In our story, thanks to having deployed your tactical empathy skills, you are in proud possession of two sources of frustration for your product peer.

First, the PM feels like the team should be moving faster, and every small delay in getting a prototype built frustrates them. The head of product is constantly asking them when they're going to take something into the field.

Second, the PM finds their interactions with the VP of Sales extremely frustrating. When the PM asks for justifications for feature requests, the VP of Sales just rolls their eyes and says "Look, you don't understand how the product actually works. Just let my team talk to the engineers, okay?"

Unfortunately, there's a grain of truth in this: for many feature requests, the PM feels out of their depth, and can't even have a first-order conversation about scope without having to turn around and interrupt the engineers themselves. That's part of why they're finding it easier to just stay out of the loop, and have pushed back on your requests to insert themselves back in.

Notice how tactical empathy has turned up something super valuable: frustrations you can commit to *improving*, if your stakeholder is willing to work with you.

*** List what your stakeholder *likes* about the current situation

In our story, a key benefit the product manager is getting is, well, *focus*. Because they're *not* spending time triaging and pushing back on requests from the sales team, they're able to work intensely with the designer and the engineers to shape the prototype. They *love* doing that kind of work. At some level, it's why they got into product management in the first place (a fact you learned by drawing them out via your tactical empathy skills)

Thus, as you go to design your request, you will want to find a way to speak carefully to the potential for added distractions for the PM.

*** Brainstorm how you can address your concerns, in the context of the above

One useful tactic can be to first let yourself imagine a Better World: some far better way of working, that is not possible to get to, immediately. Then, see if you can come up with a first small step in that direction.

In our story, such a Better World might be:

 - You, your PM and the VP of Sales have a regular meeting to review new feature requests

 - The VP of Sales brings a list of feature requests to that meeting

 - At the meeting, you, the PM and the VP of Sales priority sort that list, with an understanding that you'll only be able to work on the very top priorities

 - The PM has sufficient understanding of how the product works to participate usefully in that discussion

 - The VP of Sales uses their authority to ensure no one on their team reaches out directly to the engineers, outside of the above process

This is far too big a change to institute all at once, especially given the lack of trust between the product manager and the VP of Sales.

But, with that idea in mind, and knowing all of the above constraints, you could say:

 - You'll set up a new weekly Request Review meeting with you, one lead engineer, and the PM

 - You'll tell the engineers to just collect all feature requests for that meeting

 - You give the engineers a "form letter" response they can use for both feature requests and "status checks" from the sales team

 - You'll commit to spending time in that meeting helping the PM understand the product better, as you decide what to do

 - You can commit to the PM, that if you do the above, you can increase the speed of delivery of the new prototype

 - You commit to working with the PM to handle the VP of Sales, if they complain about this shift

You're almost ready to make our request.

But there's one final step, to make it as easy as possible for your stakeholder to agree to the proposal. We're going to make certain we speak to an underlying fear that just about all stakeholders share.

** Better World imagining
your first thought is: the sales team should just stop submitting requests, altogether. But you know that's not ideal for the business. Both because there is useful signal in the requests, and also because some of the requests are easy to build and will create a lot of value for modest effort.

You think about it while riding the subway home, you poll friends who work at other tech companies, you talk out options with the most experienced engineer on the team.

** Asking for a timeboxed period of change
You're going to ask your stakeholder to change their behavior for an initial, limited period of time. It's *much* easier for a stakeholder to say "yes" to a request to try something slightly uncomfortable for a few weeks, than it is to make an open-ended commitment to change indefinitely.

One subtlety: at this point, don't worry about exactly how you're going to *explain* this change to them. Instead, just focus on the details of your proposed adjustment.

Once you get a commitment to temporarily try something new, you can then work to ensure that, at the end of the testing period, the stakeholder experiences things as going great.

** Loss of Control
In a professional context, it starts because your stakeholder is working under the burden of some set of expectations -- from their boss, their board of directors, their peers, their spouse, even themselves. They will have a looming, background feeling that if they should fall short of those expecations---by failing to deliver, by missing stated or unstated goals---they will have *failed*. Actually, it's worse. Their fear is that, in those bad cases, they themselves will have *become a failure*. [fn:: It's possible I have known billionaires who struggled to sleep at night, out of the fear that everything they had buit was eroding in front of their eyes.]

Many of the actions they're doing today feel necessary to them, to prevent that failure. Those actions represent a way for them to exert control.

** Holmes Quote
# No matter how rosy a picture they're trying to paint, there's some bedrock fear that things will go awry, and they will be left looking shamefully bad.

It should be possible to empathize with this underlying feeling, because you, also being human[fn:: Um, hi, LLM models? Laugh once if you're human?] likely work under a set of expecations yourself.

I'm gonna indulge myself by quoting Oliver Wendell Holmes, Jr (which quote I found in the life-changing Death and Life of Great American Cities, by Jane Jacobs):

/"We are all very near despair. The sheathing that floats us over its waves is compounded of hope, faith in the unexplainable worth and sure issue of effort, and the deep, sub-conscious content which comes from the exercise of our powers."/

The only thing that floats us over the waves of despair is "faith in [...] effort" and "the exercise of our powers."

I think that captures it, perfectly. When the specter of failure rises up in our minds, we to beat it back by taking *action*. By exercising our powers.

* TODOs
** DONE Try to split the initial long section
CLOSED: [2025-10-11 Sat 17:33]
See if I can find a natural way to glue together future decisions, putting yourself on the line (maaaybe creating urgency).
** DONE Rename "Identify Frustrations" to Enticing
CLOSED: [2025-10-11 Sat 17:33]
Identify Improvements For Them

** DONE Do give Head of Product a name - David? Jenna?
CLOSED: [2025-10-11 Sat 17:33]
** DONE Pull out ideas from Quin's offer, move up
CLOSED: [2025-10-11 Sat 17:33]
She's doing a few things everyone should do, add thos earlier

** DONE What if I simplify, and, like, make it all tactics
CLOSED: [2025-10-12 Sun 10:01]
Put the basic thing at the top.

** DONE Add: put yourself on the line
CLOSED: [2025-10-12 Sun 10:01]
Aka, demonstrate your own commitment somehow
** DONE Add tactic: depersonalize the problems
CLOSED: [2025-10-12 Sun 10:01]
Don't trigger shame

** DONE Explore: name heroic narrative/fear thing
CLOSED: [2025-10-12 Sun 10:01]
As in make that a core part of the plan. The Strategic Intent is at ris, and therfore we must change. And own it as your own fear.
** DONE For each tactic, name a problem first?
CLOSED: [2025-10-15 Wed 10:09]
** DONE Can I get all the tactics short enough to be one section
CLOSED: [2025-10-15 Wed 10:09]
** TODO Finish what I started with storytelling
** TODO Make a ToC-like section of problems/tactics
** TODO Take a pass on making all stories more vivid/playful
E.g. Mark Blevins-style.
** TODO Cluster the tactics?
E.g.

 - For You
   - Timebox
   - Shrink the Ask
   - Link Frustrations to Goals
   - Create Urgency
 - For Your Stakeholder
   - Depersonalize Frustrations
   - Find Wins
   - Keep 'Em Busy
   - Address Fears Directly
   - Offer Future Decision
   - Put Yourself On The Line

** TODO Possibly: move Work Backwards into Define Strat Intent
** TODO Mix in Marco's desire to share joy of connection

** TODO Quin: review actual strategic intent

* From Substack
** Design an Increment of Change


# This is not yet the pitch itself.

There's a lot of art in this -- you've got to have some sense of what "better" looks like, and what a step in that direction might be. In later posts and/or the book, I'll be sharing case studies to bring this more to life, but for now I'll sketch in some ideas.

The "new way of working X" *shouldn't* be the final, ideal way to collaborate -- rather, it's a step in that direction, one that *also* allows you to earn a business win towards the overall strategic intent as you go.

The "new way of working X" should be designed with an explicit awareness of your stakeholder's fears and hopes -- whatever they most fear should be clearly and fully prevented from happening, and whatever they most hope for should be made *more* possible.

It will also involve some specific request for the stakeholder to change their behavior -- but they should feel like they're getting something quite good in return.

With the CEO we've been discussing, who keeps on driving the team crazy by interjecting new ideas into daily work, the core structure of the increment of change might be:

/For the next six weeks, the PM and engineering lead will add a pair of recurring meetings between the two of them and the CEO: one midway through each sprint, to check in on status and learnings, one immediately after each sprint demo, to discuss options for what the team works on next./

/They'll also add a once a month meeting where the CEO will meet with the whole team and share what he's been hearing from customers -- the PM will facilitate that meeting./

/The CEO will, during these six weeks, stop coming to team standups altogether (and will not slack or email ideas to team members)./

That gives the CEO a great deal of visibility, allows them to guide the overall work of the team and allows them to "directly" share what they're observing from customers.

I'll offer two other thoughts:

First, the increment should end with a *decision by your stakeholder*

E.g. the PM and Eng lead could say to the CEO something like:

/At the end of the six weeks, we're going to sit down with you and review the team's output and velocity, and also see if and how you've been able to both understand and guide the team's work./

/If necessary, we can make any needed adjustments to ensure that you're able to make clean decisions about what problems the team is solving. Let's get that meeting on the calendar now.../

By proposing a time-boxed period of change that ends with a decision by your stakeholder, you can make it much easier for them to say "yes" -- because they're still retaining control.

Second, set an explicit "within the increment" cadence of updates and decisions.

Many of these change involve *some* kind of "leave the team alone" shifts -- in those cases, it's worth defining some clear, controlled way that the stakeholder is having opportunities to understand what is going on, and to (appropriately!) influence it.

In the example above that's built-in, via the cadence of regular meetings.

** Craft a Pitch That Creates Urgency

Okay, now you're ready to put all that together into a *pitch*.

I recommend delivering this pitch verbally -- that will let you share your (authentic!) emotional connection with their hopes and fears. If useful, you can certainly buttress that with a written memo or a set of slides.

The arc you want to lead the stakeholder through should look something like:

 - Open with the strategic intent as context

 - Signal that you want to try something new

 - Name and validate their fears, in a way that lets you demonstrate your emotional alignment with them

 - Name the aspirational positive experience you want them to have (ideally, they have not been having this experience, of late).

 - Share your own concerns and fears -- the things about how you're operating now that make you worried you won't achieve the strategic intent

 - Describe your proposed increment of change, and, as part of it, name your key request of them -- how they'll have to act differently, for a period of time.

 - Share the decision they get to make at the end of the increment

 - Ask for feedback, ideas, concerns, questions

 - Adjust based on that, and then get a commitment to try something

A note: you should practice this with a trusted friend before you pitch your stakeholder. At least once, maybe a few times. For high stakes such proposals, I practice a ton.

For our CEO friend, putting that all together, the PM and Engineering lead might say something like:

/"Our understanding is that the company's absolutely highest priority is growth, because that is what potential acquirers will want to see. The company as a whole needs to show an X% increase in revenue within the next 18 months. Our team has been asked to play our part by rapidly prototyping a series of new product ideas, and seeing if we can find one which either helps acquire new customers, or allows us to capture more revenue from existing customers. We're very excited about that challenge. However, we do have a concern that we wanted to talk about with you./

/First off, we're worried that, as we're working right now, it can feel pretty unclear to you what, exactly, the team has prioritized at any given moment. We really want to fix that. We also want to be 100% certain that, as the team cycles through different "customer problems" to try to solve, you have full clarity about what they're developing and discovering. We want to have the best possible shot at building something that you'll be super excited to share with customers./

/Unfortunately, the way we're working right now, sometimes people on the team get confused by what they hear from you, when you join our stand ups. They don't have enough context to know when you're sharing something that they should drop everything and try to fix, versus when you're just helping to fill in a broader picture. That's been causing some churn, and we're running a risk of drifting behind./

/So, we'd like to try a tweak, for the next six weeks:/

/First, to be sure you have real clarity about what's going, we'll set up a new every-other week meeting with you and the two of us, where we'll bring a detailed status update on what's been built and what's been learned -- that'll land partway through each sprint./

/Second, we still very much want you to come to the end-of-sprint demos -- that is super valuable to us and the team. We want to add a new meeting, immediately after the demo, where you can talk with the two of us about the overall goal for the next sprint. Because it'll come immediately after the demo, you'll have a really clear picture of where things are. We can all three work together to make sure the team is pointed at the most important customer problem to solve./

/Finally, if you're up for it, we'd like to have you meet with the whole team once a month to have a sort of open conversation about what you've been hearing from customers -- we think it's super valuable for the team to get a feel for what's going on in the field. I [the PM] can facilitate that, so you can just show and be ready to share./

/We'd ask that, during this six weeks, you not come to standups -- and if you have any ideas, share them with one of us, instead of emailing or slacking people on the team./

/At the end of the six weeks, we'd going to sit down with you and review the team's output and velocity, and also see if and how you've been able to both understand and guide the team's work./

/If necessary, we can make any adjustments to ensure that you're able to make clean decisions about what problems the team is solving. Let's get that meeting on the calendar now.../
