:PROPERTIES:
:ID:       A99B72A8-3582-4BEA-8FA8-40CA8EDD306D
:END:
#+title: Intro - Fix Stakeholder
#+filetags: :Chapter:

* Introduction: The Pains of Working With Humans
# The Pains of a Broken Interaction Pattern
# The Problem - Engineering Would Be Easy, If It Weren't For These Pesky Humans
# The Pains of Being Stuck in a Broken Interaction Pattern
*** Bring Problem to Life (maybe start w/ my own story of biz problems?)
There's *something* about the way you're working every day which feels, well, less than awesome.

It's not (usually) a full-on disaster (though if it is, man, this book is for you), but you can feel that you're wasting time, or working at cross-purposes. Sure, you're super busy every day... but are you making a big impact? Are you solving real problems for the business?

Or is your work going to be thrown away, or land to late too help?

Good News: this book has a lot to offer you, in steadily improving the way that you work, so that you solve more business problems, create more value, and feel a greater sense of agency and control.

Bad News: this is a non-trivial problem to solve. Every single time I've talked to someone about their company, or I've started working with a new company, I've quickly found that there are some sort of "know problems" that, well, everyone is frustrated by, but no one seems to feel like they can address.

At heart, I believe these problems are hard to solve for two joined reasons, which reinforce each other:

**** Designing a way for a group of humans to work together to successfully build and selling software is an inherently complex challenge

There is some *inherent* trickiness in it, with tendrils that extend into how large your company is, how close or far you are from product/market fit, the complexity of the software you're trying to write, your customer behavior, etc.

As a result, there isn't One True Process, that, if everyone just did it, you'd all smoothly work together to solve business problems, build valuable software and sell it.

So you have to figure out how to work together, given the exact circumstances you find yourself in. And then you have to adapt that, over time.

I don't mean some super theoretical organizational structuring (though you can get a lot of leverage from that, we'll talk about that in a Case Study on Domain-Aligned Teams), but often just the day-to-day relationships all around you.

And it's not always obvious *how* exactly you should work together.

Does your company urgently need to discover a new product to unlock growth? How should you be working together to do that?

Does your team need to land a major restructuring of your core platform, to allow you to meet security demands from your enterprise customers? How should you be working together to do that?

Are you trying to balance maintenance of an existing product with develoment of something new, and finding them team thrashing?

Do you have multiple teams who need to work together?

Is your company trying to balance competing priorities?

Are you trying to figure out how to balance engineering-driven investments to improve speed of delivery against near-term feature requests?

The only people who will tell you these are simple problems to solve are consultants trying to sell you something.

**** It's not easy to persuade humans to change their behavior... especially humans who think they get to tell you what to do

You *can* find some quite good ideas for how to organize your work and your collaborations to face the problems above.

But, most of the books and writing on those topics tends to leave the question of "How do you persuade your stakeholders to change their behavior" as, like, an Exercise for the Reader.

# This second thing is very hard

# You need to solve them *together*. Incrementally make things a little better, adapt.

# This is fun!

# Then, tell it as a story, calling out some of the details.



*** State My History
*** Define Stakeholders
*** Define Who the Book Is For
*** Name Other Key Books to Learn From
# I want to say something like --

This book is not seeking to exhaustively teach you everything about how to collaborate with groups of humans to create value by developing software. I will pick out some really key things I've learned from others, share those, and be generous with refences and recommendations[fn:: If you ever interview for a job with me, odd are better than even that you'll emerge with a book recommendation or four.]

But, in my experience, a gap in those books is that they don't provide you with any guidance on how to get the wonderful, irrational, frustrating, opinionated people around you to work in a new way. And the books about how to influence and change people are so abstractly far away from the day-to-day concerns of building valuable software, it's hard to see how to apply them.

My goal is to put those together, into a highly *actionable* plan.

I'll cite specific books as I get to them, and also pull them all out in an Appendix at the end.

# XXX Nope, weave these in as you get to them
That said, I heartily recommend adding these to your bookshelf.

For a marvelous, concise, actionable understanding of how engineering and product can work within a high-functioning company, I recommend Melissa Perri's Escaping the Build Trap very, very highly. It focuses on the role of Product, specifically, but within that are a lot of key means for engineers to collaborate with stakeholders.

For a wealth of ideas on how to negotiate and influence, Never Split the Difference by XXX (and XXX) is incredibly good.

For an understanding of the value of a concise, guiding strategic intent, I found "The Art of Action" by Stephen Bungay a revelation. I've also had good luck with Good Strategy/Bad Strategy.

For a deep understanding of how value is actually created, Principles of Product Development flow can't be beat.


*** Overview of Remainder of Book

* Scraps
** Putting Ourselves In a Stakeholder's Shoes

# A Brief Exercise In Stakeholder Empathy

# Sometimes, It's Hard To Be a Stakeholder

# It's Hard Out There for a Stakeholder

Before we dig into the *specific and practical* skills of empathy we're going to study, I want to take a moment to encourage you to slow down, and think, really think, about what life is like for your stakeholder.

Isn particular, what it's like for them to have to *depend on an engineering team*, in order to accomplish a business goal they've been tasked with.

I suspect it's hard for most engineers (and even for some product managers) to imagine just how well and truly *miserable* such a situation is for a stakeholder.

In almost every other part of their working life, if that stakeholder is trying to accomplish some important business objective, they will

 - Identify a *problem* to solved

 - Set *goals* that represent solving that problem

 - And then *give those goals to someone*

In fact, they've probably learned that that is what it means to be an effective leader -- you set clear goals, and then you hold people *accountable* to achieving them.

But once engineering gets involved, everything goes to hell.

What seem like straightforward goals turn into an absolute blizzard of confusion, the engineers produce ridiculous estimates, then fail to meet those estimates, then finally deliver something that doesn't even *work*.

When the business leader asks questions, they get back a flurry of incomprehensible jargon.

And then, despite literally *everything* being painfully far behind plan, the engineers announce that they want to *stop working on actual business needs* so they can "clean things up", or "retire tech debt".

It's weird as hell to work with engineering.[fn:: I like to think it's like hiring a contractor to remodel your kitchen, going away for the weekend, and coming back to discover they're on the verge of demolishing your entire house because they found some wiring they think is "ugly".]

I think sometimes that when engineers tell stakeholders it's really hard to estimate projects, the stakeholder make a subconscious mental analogy to something like remodeling a kitchen. And they think "Oh, sure, I know, if you say it'll take 6 months I better be ready for it to take *9 months*, let's go."

Working with a software engineering team is like hiring a contractor to remodel your kitchen, having them tell you it'll take six months, and then, one month in, discovering they've *demolished your entire house* because they found some wiring they think is "ugly" and now your genuinely best option is to build an entirely new house.

It's really really hard for people to imagine this until they've lived through it.
