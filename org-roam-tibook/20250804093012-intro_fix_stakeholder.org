:PROPERTIES:
:ID:       A99B72A8-3582-4BEA-8FA8-40CA8EDD306D
:END:
#+title: Intro - Fix Stakeholder
#+filetags: :Chapter:

* Introduction: The Pains of Working With Humans
# The Pains of a Broken Interaction Pattern
# The Problem - Engineering Would Be Easy, If It Weren't For These Pesky Humans
# The Pains of Being Stuck in a Broken Interaction Pattern
*** Bring Problem to Life (maybe start w/ my own story of biz problems?)
*** State My History
*** Define Stakeholders
*** Define Who the Book Is For
*** Name Other Key Books to Learn From
# I want to say something like --

This book is not seeking to exhaustively teach you everything about how to collaborate with groups of humans to create value by developing software. I will pick out some really key things I've learned from others, share those, and be generous with refences and recommendations[fn:: If you ever interview for a job with me, odd are better than even that you'll emerge with a book recommendation or four.]

But, in my experience, a gap in those books is that they don't provide you with any guidance on how to get the wonderful, irrational, frustrating, opinionated people around you to work in a new way. And the books about how to influence and change people are so abstractly far away from the day-to-day concerns of building valuable software, it's hard to see how to apply them.

My goal is to put those together, into a highly *actionable* plan.

I'll cite specific books as I get to them, and also pull them all out in an Appendix at the end.

# XXX Nope, weave these in as you get to them
That said, I heartily recommend adding these to your bookshelf.

For a marvelous, concise, actionable understanding of how engineering and product can work within a high-functioning company, I recommend Melissa Perri's Escaping the Build Trap very, very highly. It focuses on the role of Product, specifically, but within that are a lot of key means for engineers to collaborate with stakeholders.

For a wealth of ideas on how to negotiate and influence, Never Split the Difference by XXX (and XXX) is incredibly good.

For an understanding of the value of a concise, guiding strategic intent, I found "The Art of Action" by Stephen Bungay a revelation. I've also had good luck with Good Strategy/Bad Strategy.

For a deep understanding of how value is actually created, Principles of Product Development flow can't be beat.


*** Overview of Remainder of Book

* Scraps
** Putting Ourselves In a Stakeholder's Shoes

# A Brief Exercise In Stakeholder Empathy

# Sometimes, It's Hard To Be a Stakeholder

# It's Hard Out There for a Stakeholder

Before we dig into the *specific and practical* skills of empathy we're going to study, I want to take a moment to encourage you to slow down, and think, really think, about what life is like for your stakeholder.

Isn particular, what it's like for them to have to *depend on an engineering team*, in order to accomplish a business goal they've been tasked with.

I suspect it's hard for most engineers (and even for some product managers) to imagine just how well and truly *miserable* such a situation is for a stakeholder.

In almost every other part of their working life, if that stakeholder is trying to accomplish some important business objective, they will

 - Identify a *problem* to solved

 - Set *goals* that represent solving that problem

 - And then *give those goals to someone*

In fact, they've probably learned that that is what it means to be an effective leader -- you set clear goals, and then you hold people *accountable* to achieving them.

But once engineering gets involved, everything goes to hell.

What seem like straightforward goals turn into an absolute blizzard of confusion, the engineers produce ridiculous estimates, then fail to meet those estimates, then finally deliver something that doesn't even *work*.

When the business leader asks questions, they get back a flurry of incomprehensible jargon.

And then, despite literally *everything* being painfully far behind plan, the engineers announce that they want to *stop working on actual business needs* so they can "clean things up", or "retire tech debt".

It's weird as hell to work with engineering.[fn:: I like to think it's like hiring a contractor to remodel your kitchen, going away for the weekend, and coming back to discover they're on the verge of demolishing your entire house because they found some wiring they think is "ugly".]

I think sometimes that when engineers tell stakeholders it's really hard to estimate projects, the stakeholder make a subconscious mental analogy to something like remodeling a kitchen. And they think "Oh, sure, I know, if you say it'll take 6 months I better be ready for it to take *9 months*, let's go."

Working with a software engineering team is like hiring a contractor to remodel your kitchen, having them tell you it'll take six months, and then, one month in, discovering they've *demolished your entire house* because they found some wiring they think is "ugly" and now your genuinely best option is to build an entirely new house.

It's really really hard for people to imagine this until they've lived through it.
