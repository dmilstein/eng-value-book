:PROPERTIES:
:ID:       BB09F432-DEEB-4129-8F88-D23C86E8CEBB
:END:
#+title: Build Visibility First
#+filetags: :Chapter:
* Build Visibility First

Given that a tech investment is:

/Something the engineers believe is valuable for the business, but that no one is asking for./

... one of the most important tactics for working effectively with technical investments is to *build visibility*.

Aka, create a shared means to *see* the potential value.

Doing so can fundamentally change the conversation with stakeholders -- instead of stakeholders perceiving the engineers as "asking for time" (which they will hear as "time away from creating value"), they can perceive the engineers as showing them something *important*, and inviting them to make a decision.

We'll talk at real length in Part II about how to gradually build sufficient trust with stakeholders to get into a repeated cycle of decision-making.

But first we'll dig in on the ideas of both visibility and value.

Why is building visibility *first* such a powerful technique? Let us count the ways.[fn:: For you Product Development Flow geeks out there, I feel like I'm Don Reinertsen writing about Small Batches. "But wait, there's more!"]

** Visibility Brings Your Stakeholders Into Your World

By creating visibility, you're *showing* your stakeholders the thing the engineers are worried about.

That's a far better approach then asking them to *trust* you.

In the deployment story above, the simple spreadsheet that Alla set up converted the constant background noise of engineer complaints into a clear picture of painfully unreliable and slow deploys.

Before she set that spreadsheet up, it wasn't that the product team "didn't care" about the pains of deploy.

It was that they literally couldn't *see* them.

Once they were all laid out in cells in a spreadsheet, the conversation changed.

# Visibility Will Show If Things Get Worse

** Visibility Is (Relatively) Cheap To Build

It is *always* cheaper to build some form of visibility than it is to actually dig in and change your systems.

*Always.*

Sometime it's so cheap that, as above, an engineer can get started on the side.

But sometimes building visibility is itself a significant undertaking.

However, whenever that's the case... the actual technical work itself is an *even bigger undertaking*.

An example: during (and after) my time at Wayfair, the Supply Chain teams went through a massive, multi-year effort to decouple key logistics systems from the inner guts of the central orders database.

One of the absolutely key steps in that massive initiative was to build initial visibility into the nature and limits of the coupling, before the work started to fully unwind it.

That visibility work itself took many many months (I'll tell the full story in [[id:D901A4C9-885B-4F42-8B8D-3595616857E8][The Extraordinary Value of Knowing What To Do Next]]).

But building that visibility was a *tiny* fraction of the investment cost of doing the full decoupling.

** Visibility Can Itself Be Built Incrementally

Because you can use visibility to negotiate further investment, you can (and most of the time, *should*) build the visibility in small incremental steps.

You can then use the results of each step to *both* decide what to do next *and* to advocate for that work.

That's how the deploy spreadsheet -> deploy stage timing -> deploy dashboard work went for Ellevation -- each step both justified more investment *and* pointed at specific opportunities.

Note: your engineers will sometimes push back on this kind of incremental approach.

e.g. you'll get a flurry of customer complaints about site performance, and some senior engineer will inform you that they have simply no choice but to build a distributed tracing and profiling system .[fn:: Or, sigh, they'll tell you they've already "built most of it on a branch" and just have a few "trivial" steps left to actually hook it up to anything in production.]

This is one of the (um, many) places you're going to earn your salary by gently redirecting such engineers.

FWIW, I don't recommend saying, "Look, that's insane, we're not doing that."[fn:: You totally *can* say this to your engineer manager friends later, while venting over drinks.]

Instead you can say something like, "Huh, that sounds like it could potentially be super useful. How about if we start by just getting some overall response times metrics, in like, the dumbest, simplest way possible. Once we've got those, you and I can look at those together, and can figure out if now is a good time to start building more full instrumentation?"

The combo of naming a small initial increment with a later shared decision point... is also what you're going to be doing with stakeholders!

Also, I use the frame of "the dumbest, simplest", all the time. There's something about saying those words that I have found to be liberating to all involved.

Also, also, I can't let this story pass without mentioning that, if you're getting complaints about site performance, I highly recommend running the game plan in the first few chapters of O'Reilly's Implementing Service Level Objectives, by XXX and XXX. We'll talk more about our (excellent) experience of doing so at Ellevation, in [[id:0A54C1F2-B531-4CF9-9337-8FC336B0AB15][Leverage the Dark Art of "Metrics" In Your Favor]].

** Visibility Prevents Meaningless Waste Work

We've been somewhat focused in the above on the ways that visibility helps you in your conversations with stakeholders.

But visibility is also a huge boon in your conversations with the engineers on your team.

Without some form of visibility into what might be causing your problems, engineers have a habit of guessing incorrectly... and being certain that their guess is right.[fn:: If you've done any performance improvement work, you've likely learned a similar lesson about not trusting engineer intuitions about bottlenecks in code.]

We had a memorable case of this at Wayfair, when we were experiencing a rash of problems with a recently-rolled out change to the software that supported the Final Mile Delivery Agents (the relatively small warehouses that stage goods before delivering them to people's homes).

The problems got bad enough that we started having one of those unpleasant daily triage sessions -- and, as things kept getting worse, more and more senior people kept on gradually joining in.

The engineer who best understood the systems kept on reporting at those triage sessions that he and the team were pushing out fixes...

...but each day, the warehouses kept experiencing chaos.

Finally, we paused all the "fixing" work, and spent two days just figuring out a way to roughly count the number of items that the system was confused about, in each warehouse. We couldn't do that perfectly, but we were able to capture a meaningful initial proxy.

We then threw the overall count across all the warehouses onto a Grafana dashboard.

We made that dashboard a central focus of the daily triage sessions, and we created a playful but very real rule that the engineering team could no longer report on "fixes", unless they could show some actual improvement to operations in reality.

This drove a major change in the engineering work -- instead of desperately trying one speculative change after another, the team gradually shifted into a much more disciplined process of identifying issues, dealing with them, and verifying the improvements. Which (along with a bunch of other work), gradually got the Delivery Agents back into a sane state.

Before we move onto the next benefit, I want to call out a subtle but real benefit to this approach to working with your team.

When there's some pressing problem in the air, that seems to be getting worse all the time, a group of humans will feel an incredible pressure to do *something*.

By pointing them at the challege of building visibility, you can channel that energy into something productive.

That is much easier and much more effective than just telling them to stop doing what they're doing -- even if what they're doing is actively making things worse. (as, frankly, it often is)

In the story above, it was much easier to say to the (understandably) stressed out and worried engineers "Hey, let's find some quick and dirty way to visualize the scope of the problem", than it would have been to say, "You're wasting your time doing meaningless things, please stop immediately."

** Visibility Enables Incremental Progress
I have become, over the course of my career, profoundly obsessed with building in increments.

In my How To Survive a Ground-Up Rewrite post, I name it as "Worship at the Altar of Incrementalism".

An absolutely core part of how engineering leaders created value is to identify creative means to break very large and complex problems down into small steps, that can be taken one at a time.

I care so much about this, we're going to spend an entire chapter on it -- [[id:03D1870C-E583-4D5C-9589-5E0799793D48][Develop Incremental Options]].

But I'll note here that building visibility is a crucial enabler for developing in increments -- because it allows you to verify that you're actually making things better, as you go.

At Wayfair, we dug out from our Delivery Agent problems one step at a time -- and the visibility is what let us do so.

The extraordinarily insight Kellan Elliot-McCrea says, in his post [something], "Modern software engineering is about making constant progress and measuring the results."

# XXX Add link/quote to Kellan's thing.

** Visibility Creates Opportunities To Celebrate

If, before you "fix" anything, you first build visibility, then you create a significant later benefit:

When you've made things better you can celebrate the visible improvements.

Such celebrations are extremely valuable for several reasons:

 - Celebrating wins with your stakeholders is a core part of building towards a repeated cadence of collaborative decision-making

   In the Ellevation deploy story, Jordan, the CEO, "felt" the win of the deploy improvements, which set us up for really good conversations about later technical investments we wanted to make.

 - Celebrating wins with your team helps them *feel* the impact and meaning of the work they're doing

   You (I'm guessing?) manage a team of humans, this is a thing humans want (and, frankly, need).

 - Celebrating *incremental* wins is a powerful way to demonstrate to your team what you value

   (what you celebrate becomes your culture, again hat tip to Kellan, he should really write a book or something)

   # XXX Find Kellan quote maybe in Ritual Design?

But, beyond all that, there's an even more fundamental reason why the "option to celebrate" is so important.

It allows you to pick a point to declare the investment "done".

For most tech investments, you're not going to know, ahead of time, the exact point at which the benefit of continuing to invest will outweigh the costs.

If deploys are painful, how much better should you commit to making them?

If customers are complaining about site slowness, how much effort should you put in to addressing that?

If engineers are worried about security risks due to out of date libraries, how long should the team spend on addressing those concerns?

In all of these cases, the answer isn't just "We don't know ahead of time", it's that you'll eventually want to pick some point to stop, when there is still more work you could do.

If you've built visibility first, not only can that visibility help you make that decision, but it also makes it enormously easier for your engineers to accept.

Without visibility, the engineers will tend to create an implicit goal of a "better-designed" or "higher-quality" system -- will leads to much more challenging tradeoff conversations later.

Okay, now that we've covered an array of reasons why Visibility is your very best friend, we're going to dig into the other central concept:

How engineers create value for the businesses within which they operate.

# XXX Ugh, word echo with the next chapter

* Scraps/Notes
** Visibility Allows You To Choose Your Battles

** Tech Debt has an end
With the old "tech debt" frame, everyone imagines there will be natural point for a project to be done -- when you have "removed all the tech debt".

But, again, in that "negative" framing, there is an implicit end state -- "when the tech debt is gone."

In the "tech investment" frame, you should be, *for the rest of time*, making decisions about whether or not to invest in specific improvements.



** Notes
Allow myself to be a bit tactical.

Can tease the idea of a fuller understanding coming later

Focus on:
 - the lack of shared understanding
 - inability to show progress
 - difficulty for the engineering leader to make decisions
 - Knowing when you're "done"
 - Having a thing to celebrate
 - Showing things getting worse
 - Often much cheaper
 - Can do it iteratively -- a little bit, then a little bit more.
