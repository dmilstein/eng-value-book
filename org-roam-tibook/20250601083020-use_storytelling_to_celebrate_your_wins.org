:PROPERTIES:
:ID:       4D62F0DE-2862-45F3-97EE-6AFED5382F2C
:END:
#+title: Use Storytelling To Celebrate Wins
#+filetags: :Chapter:
* Use Storytelling To Celebrate Wins
** Intro
If you've followed the plan up to here, you've advocated for an initial increment, gotten buy-in, then completed that increment, and brought some new options and visibility to your stakeholder.

Surely, it's time to build momentum and dive right into another cycle of improvements, right?

Actually, *no*.

/But, Dan... what?/ I hear you ask. /I've laid out solid options, the stakeholder *understands* the options. We've built visibility, we have a next increment all planned! They'll even be able to *see* the improvement!/

True, true, true.

But, here's the thing.

Whatever your stakeholder is /saying/...

... they likely still *feel* like they're *doing engineering a favor*.

As in, they don't yet emotionally experience this as "their" win.

Thus, there's a very good chance that their mind is coming up with all sorts of reasons to *stop* working on this "engineering issue" so they can get back to solving business problems.

Left unaddressed, these feelings and thoughts in your stakeholder's mind will first slow and then completely stall out your ability to move through repeated, iterative cycles of investment.[fn:: "Huh, Dan, I didn't really expect a book on Tech Investments to feature, I dunno, quite so much speculative psychology about stakeholders and their feelings?" Look: you work with humans. And I have just not had any luck whatsoever approximating humans as "beings with no emotions". Feel free to ignore this fact if you'd like to keep having all the most important work get cancelled over your bitter protests!]

If every single cycle of investment feels like a *concession* -- you're going to really struggle to create significant value for your business.

# To address this, you're going to *tell a story*.

To address this, we're going to draw on one of most powerful tools for getting other human beings to +do your bidding+ understand your perspective on the world:

You're going to tell a story.

** Y U No Just Discuss Value?

Before we get into the details of how to tell really effective stories, I want to back up slightly.

Ultimately, we're trying to get the stakeholder to *join us*, in an understanding of how an investment can create value for the business.

That is what will ultimately make them feel like this is not "a favor for engineering", but rather is "important for the business".

That is what will make them "ask for" *more* investment...

... instead of trying to bargain their way back to churning out more features that someone has dreamed up.[fn:: I kid, I kid! I'm sure your company is resolutely focused on customer problems, not features. But *some* companies have an obsession with features.]

However, as we discussed way back in [[id:D3158CC2-8A69-4097-B9ED-ED6BD855A7AD][Understand Value In Depth]], "value for the business", is actually a fairly complex and subtle notion.

It is incredibly powerful to understand company value as a probabilistic estimate of future profits.

Unfortunately, it is not particularly *useful* in helping stakeholders to feel that value.

Almost all the stakeholders I've ever worked with have a sort of impatience with what they perceive as "abstract thinking" -- and starting to talk about risks, information, etc, will trigger that impatience.

Let's bring this to life with a story.[fn:: "Wait are we being meta?" Oh goodness, yes. You, the reader of this, are *also* human, so stories are the best ways to get things lodged into your brain. Mwuhahahaha?]

** You Can "Tell Stories" Everywhere
We're going to illustrate this approach in the context of a "Friday Wins" meeting -- a lightweight end-of-week celebration of wins from each team.

But you can use the structures and tactics of storytelling in a wide variety of contexts -- *not* just when your listeners are "consciously expecting stories", e.g.:

 - When you run into your CEO in the office kitchen, and she asks what your team has been doing lately

 - When you're participating in a review of a half dozen big initatives, and have a minute or two to share an update on yours

 - When you're presenting to a roomful of executives, sharing options that have been turned up by a technical investment you've been leading

 - When you write up and share out the results of a post-mortem or retrospective

Fundamentally, the human mind has an obsessive bent for understanding the world through narrative.

You can take advantage of that obsessive bent in many different contexts.

** The Story of RP and T-Rest at Friday Wins

It's the Friday Wins zoom session. The engineering and product teams are all hovering in their little zoom boxes. Anand, of one of the engineers on the Platform Team, turns on his mic to share his team's Win for the week.

Anand takes a breath and looks up into the camera -- Bennett, the Platform Team manager, has clearly been coaching him on making eye contact.

Anand says: "This week, the Platform Team win is that we wrapped up the RR project. We achieved a T-Rest of 60 minutes."

The other members of the Platform Team hoot and holler from their little screens.

Once it's clear Anand isn't going to say anything else, the chat fills up with "congrats!" messages and thumbs up emojis from engineers on other teams.

One PM posts "What's T-Rest?" but no one has time to respond, because Anand has already switched off his mic, and the next team is stepping up to share a win.

The End.

# What has just happened?

# First off, Friday Wins are great. See Kellan again, on designing rituals.

# XXX Find Kellan link. "No, you have a searing intellectual crush on Kellan"

First, there is something good in this win -- Anand is reporting on a *visible*, measurable improvement, not just a project being "done".

But, unfortunately, no one who wasn't already intimately familiar with the project is going to remember anything about it. Or, likely, care.

The product team certainly isn't walking away saying "Wow, I'm so glad we invested engineering effort in the RR project! I can't wait to invest more!".

Let's go through some steps to turn it into a story that listeners will remember.

# XXX Should I try telling this as a story of helping Anand?

# How to Craft a Compelling Story
** Explain the Obvious

As you prepare to share a win, remember that there are things they'll need *explained*, even though those things *feel* completely obvious.

One of the profound occupational risks of working in software engineering is that, as we dive deep into arcane problems, we lose all track of what civilians do and do not understand about those problems.

For example, Anand cited progress on the "T-Rest" metric, which was part of the "RR" project.

Why would he be so cryptic?

Well, for the last six weeks, Anand has spent every waking moment working on the *Rapid Recovery* project, living and breathing improvements in *Time to Restore*.

Every morning of those six weeks, the Platform team started their standup by reviewing the T-Rest dashboard, which shows the result of overnight test restores.

It will take Anand real effort to remember that most people don't even know what RR and T-Rest mean -- they have become fundamental factors of the universe, for him and his entire team.

When you explain concepts, you *don't* have to go into tremdendous detail.

All your listeners need is enough context to understand *why* you're talking about this, and how it connects to other things they *do* know about.

I like to call this "opening up" the key concepts or terms, more than just "defining" them.

# Take the time to give concise, capsule summaries of the most important concepts or terms that come up.

Anand might open up "RR" as follows::

"The Rapid Restore project had a goal of reducing the time to restore a full database of customer data from a backup. Our engineers depend on being able to restore database backups for everything from routine development work to protecting us from permanently losing critical customer data."

That names the project, explains what its goal was in plain language, and then gives a reason why that goal *matters*.

It's well worth developing that kind of concise summary for any concepts you're going to be sharing.

** Establish a Reason to Listen

At the start of any story, your listeners will be wondering: "What is this about?" aka "What's in this for me?".

They will likely not be consciously aware that that's what they're thinking, but that's what their mind will be doing.

Thus, you want to start with something that establishes a *reason to listen*.

Two solid options are to either a) open with a "blurb", or b) create suspense with a "teaser".

A "blurb" is a quick preview of:

 - *What* you're talking about

 - *Why* that thing is interesting or important

 - *The Outcome* for the listeners

It's like the blurb on the jacket of a book.

Anand might start with a blurb by saying:

/I'm going to talk about the the Rapid Restore project, and what we learned from addressing a serious issue in how we back up and restore critical customer data./

 - What: A project the Platform Team ran, named Rapid Restore

 - Why: Handled a serious issue, for critical customer data

 - Outcome: Sharing "what we learned"

That's it. It's just enough for the listeners to feel oriented, to know what's going on.

Giving *some* sort of initial blurb like that is far better than launching into details without any context.

An alternative to a blurb is to create a bit of drama up front with a "teaser", by naming something particularly vivid and interesting that you're going to get to, *late* in your story.

Like a teaser trailer for a movie, or a TV show.

Anand might start off:

/Do any of you remember that exciting outage last month, when Integrated Tech threatened to cancel, because they couldn't ship customer orders for 6 hours?/

/[pause, wait for nods]/

/Here's what happened./

You can tease with "bad" things, as above, but also with fun or positive ones, too, e.g.

/"I'm going to talk about the Platform Team's Rapid Restore project. Just as a teaser, the final project meeting featured Nia Martin from Customer Success saying, and I quote: 'Please stop! I don't want this to be any faster.' No, really!"/

** Use The Heroic Arc For Structure

You can find different theories on inherent story structure.

I'll offer a framework I've found useful, which mixes a bit from The Hero's Journey (as described by Nancy Duarte, in Resonate, drawing on Joseph Campbell's), with some ideas from playwriting and screenwriting.

We'll frame the "heroic arc" as:

 - The world of the hero is at peace

 - A danger emerges that threatens that peace

 - The danger intensifies

 - The hero struggles to face the danger

 - They discover new strength within themselves, often with the help of a friend or mentor

 - The hero overcomes the danger and creates a better world

In case you're wondering if this is truly wired into our brains, I encourage you to watch the short videos made as part of the XXX projects, which have all the steps above. If you watch those, I predict that you will find it *impossible* to see it as anything other than a struggle to overcome a challenge... even though it's just a pair of dots and a line. Our minds are constantly looking for this pattern.

# XXX Find this experiment

That "heroic" arc can be used to tell "dry" stories about engineering work.

E.g. Anand could share his win by saying:

 - /One of the Platform Team's responsibilities is ensuring that we take regular backups of our key databases./ [The world is at peace]

 - /But, during a recent incident, we went to *restore* one of those backups... and discovered that it took nearly *6 hours*. That meant almost a full day of downtime for a customer./ [a danger emerges]

 - /When we dug in, we realized we'd actually gotten lucky. For our biggest, most important customers, we could easily have had *10 hours* of downtime/ [danger intensifies]

 - /What was going on? Well, it turned out that our nightly backups are *incrementals* -- we only take *full* backups on Saturday nights. And that meant, for a restore on a Thursday or Friday, the database engine has to replay 5 or 6 full days -- and that takes a long time./ [The hero struggles, 1]

 - /We tried switching to nightly full backups, but that created horrible site slowdowns that bled into working hours./ [The hero struggles, 2]

 - /It was Erika who came up with the approach that finally worked. We set up read replicas for the largest db's, and now we can pull nightly full backups from *those*, without impacting site performance./ [discover new strengths with help]

 - /We've now running regular restore tests, and the most recent one brought back our largest database in just under one hour -- which is a 90% improvement! We've talked with the support team, and they agree that that's plenty fast enough for now/ [overcome danger / better world]

Put yourself in the shoes of a senior member of the product team, attending that Friday wins session.

Compared with a dry recitation of an improved metric, this story form is vastly more likely to stay in their mind -- and to feel *meaningful*. To feel connected with ultimate business goals and value.

If the VP of Engineering was to, the following week, suggest that the Platform Team start a new initiative, that senior member of the product team will *feel* like the Platform Team has been "doing valuable work".

That said, we can do better!

We can make the story feel more vivid, memorable and impactful.

** Bring Your Listeners Into Key Moments

Once you've primed your audience into "story" mode, they'll be "waiting to find out what happens next."

You can take advantage of that by slowing down and bringing specific moments in time to life.

Done well, that will make the story feel more suspenseful, immediate and interesting.

These should be moments where you discover or learn something -- those are the key moments of drama.

E.g. Anand could open as follows:

 - /One of the Platform Team's responsibilities is ensuring that we take regular backups of our key databases./ [The world is at peace]

 - /A month ago, on a Friday morning, we were just wrapping up our standup, when all a sudden, all of our Slack channels exploded at once. We discovered there was some kind of horrible incident going on with Integrated Tech. Tom B was running point, and he needed us to restore IT's database./ [danger emerges]

Note how that makes a very specific *moment* in time really clear -- and, in particular, it's a turning point in the story, when the main characters (the Platform Team), have their peaceful world interrupted by a looming danger. It brings the listener *into* that moment.

Some useful questions to ask, to find ways to bring your listeners into key moments:

 - Where were you, when you made that discovery?

 - What was happening, immediately before?

 - How did the realization hit you?

 - What did you feel?

Anand could continue in this vein:

 - /We patted ourselves on the back for having nightlies, and started the backup/ process./

   /I was the one running the commands. When I hit return, one of those little progress bars showed up on my screen -- you know the ones, which show you the current rate of something, and a forecast for how long the whole thing is going to take?/

   /You know how those always start by showing it's going to take forever, and then the forecast drops to something reasonable?/

   /Well, this one, initially said it was going to take *five hours* to finish... but then that forecast *got longer*./

   /I can remember the feeling of panic as I looked at that progress monitor, just hovering at 5 hours and 49 minutes left, barely ticking down at all./

   /In the end, Integrated couldn't ship product to customers for almost an entire 8-hour working shift./

If you can open with something that makes the initial emergence of the "threat" or "danger" really vivid, the listeners will find themselves sitting on the edge of their seats.

** Celebrate Those Who Helped

A central part of the heroic narrative is "help from others".

Finding moments to cite specific people story can make the story feel more full.

E.g. in the concise form above, Anand named "Erika" as the person who finally came up with the key idea.  Something as simple as naming a person helps shift from "generic" recitation of past events, to something that feels more alive, because some specific person is subtly playing the role of helper.

In telling stories to stakeholders, one *very* useful way to apply this tactic is to cite help from people outside of engineering.

That makes it *feel* like the work is more than "just an engineering issue", and also gives you ways to naturally show the customer or business impacts of the work.

E.g. Anand could throw in:

/Throughout the project, we worked super closely with Nia, the lead for the Enterprise Success team. Nia was fantastic. We learned from her that, like, 90% of the time we have to restore from backups, it's because a customer did something horrible to their *own data*. Their admin wiped out all of last year's SKU's, or someone implemented a new inventory system and didn't tell us, or their IT team firewalled off their own export process and totally eff'd up sync. Nia said, and I quote, "If you can get this down to an hour, that's plenty. I *want* them to feel some pain, so they think about how to not do it again." We loved Nia!/

Notice how that takes gritty backend work (moving from weekly to nightly database backups), and effortlessly connects it to actual customers, while also showing genuine respect for the work of other teams.

** Structure Presentations Around Lessons Learned

A very natural way to turn a story into a "talk" is to build up to a set of "Lessons Learned".

So asking yourself "What did we learn?" is incredibly useful, if you're trying to turn your win into a fuller story.

# Note that the second half of the story arc represents *a series of lessons learned* -- the struggle, the help from the friend, overcoming the danger. All of those are encoding key lessons.[fn:: if I had to guess, this is why evolution encoded this into our brains -- so that we can share non-obvious facts and strategies about our environments that improve the likelihood of reproductive success)].

If speaking to Engineering or Company All Hands, Anand might spend some time at the end saying something like:

/What did we learn?/

/We realized that having backups isn't the same as being able to *use* backups in a crisis./

/The backups on their own aren't valuable. The thing that's actually valuable is the *ability to restore*./

/We started calling it: we care about the *verb* not the *noun*./

/Golden Docker Images aren't valuable. Being able to *quickly set up* dev or test environments is valuable./

/Quarterly AWS spend reports aren't valuable. Being able to *decide* if and how we might want to reduce spend is valuable. That's the verb./

/Looking for verbs has already turned up some really interesting opportunities./

/Second, working closely with Enterprise Success was a huge win. They know so much about what enterprise customers are trying to do, being able to brainstorm with them was fantastic. We went down a lot of blind alleys before we started talking to Nia and her team./

/Finally, a key was that measuring let us go faster. We spent time early on just trying things out, but timing would be different across different runs, and there were so many variables, we didn't know what was going on. Then, Eduardo wrote a test harness that let us run and measure restores overnight on isolated, spun-up instances. We could run multiple ones in parallel and everything sped way up./

It's often nice to end, as Anand does above with the "verbs not nouns idea", by looking to the future in a positive way.

When I work with engineers to prepare talks, we usually spend the last half or third of the presentation on interwoven "struggle" and "learning" -- we learned "Z", because first we tried "X" and it didn't work, but then we did "Y" which did work.

** Take Time To Practice
As we've been talking about, you can use the structures of storytelling in many contexts.

But one particularly valuable one is "presenting to groups".

And that means speaking in public.

I'll just share a couple of notes for improving your speaking in public:

 - Prepare and Practice

   Specifically, practice in front of  someone who will give you feedback. Do this early enough that you have time to apply that feedback. E.g. if you're presenting on Friday morning, do a dry run on Tuesday afternoon with a friend.

 - Finish Your Points / Enjoy Your Pauses

   I've coached dozens and dozens of people on presenting. I've given every single one of the same note -- which is to slow down. When people are at all nervous, their brain goes haywire, and tells them to speed up.

   Sometimes that literally means talking fast.

   More often, it means taking no pauses between points, barely exhaling before rushing to the next thing.

   Your listeners will find this exhausting.

   The most effective way to get yourself out of this mode is to find a way to put focus on "finishing your points" and *enjoying* your pauses.

   Break what you have to say up into a large set of fairly small points. As you speak, just purely aim for the "end" of the next point, really let yourself hit that moment and finish the point. Then enjoy a little break before you start the next.

   When you first do this, it will feel absurdly broken up -- but ask the person you're practicing in front of how it felt. Nine times out of then they'll say "That was great, I could really stay with you".

 - If You Feel Like You're Going Slow, Slow Down

   If, during a presentation, it feels like it's slow, that is your brain panicking. It's not actually going slow -- it's your brain worrying that it's not *interesting*.

   Paradoxically, the best way to address this is to force yourself to slow down -- and find a way to be genuinely interested in what you're saying.

   A brilliant performer once told me "We are interesting onstage if we are interested in something". I have found that to be very useful guidance for sharing presentations.


* Scraps

** Resonate Link
https://www.duarte.com/blog/presentation-storytelling-audience-is-hero/
** Rando Thinking
Alright, let's just do some thinking out loud, here.

I can start by defining the problem -- the risk.

What is the risk? Well, even after the work is over, your stakeholder is likely not thinking of it as their win. They're thinking "can I get back to business goals" already. Notice how we never took the time to fully bring them into our thinking about business value. Also, there's a good chance that the visibility still feels a bit abstract to them -- even if it's a true reflection of value for the business.

I think pick either:

 - Enable Parallel Development Across Multiple Teams

 - Reduce Risk of Losing Data

Both of which are super valuable and super opaque.

I think parallel dev, and use Flagship stories w/ Lisa, Cartz + M&M as example, alongside various challenging bits of making that work. Feature Sean E, Neil, Topher, Bryan?

** Saving Integrated Tech From Their Own Incredible Stupidity

Do any of you remember that exciting outage last month, when Integrated Tech threatened to cancel?

[nods from the room]

Here's what happened.

We like to think of ourselves as a, well, *competent* platform team.

Among other things, that means we're responsible for maintaining the central DB, which most of your teams depend on.

Now, *of course*, we take backups of that database.

Of course we do!

Last year we even built a little dashboard, that shows the time to the last backup.

We felt pretty good.

But then, a month ago...

...our friends at Integrated Tech--who you may also know as "our fourth-largest enterprise customer"--began to implement a new third party inventory reconciliation package in their Warehouse Management System.

Of course, they didn't *tell* us that they were doing this.

But guess what that vendor's implementation engineers did, as *step one* in their *standard process*? They completely wiped out the numbering scheme for every single one of Integrated's SKU's. And started them over again from 0.

Yep.

So, when Integrated sent us their nightly pull of inventory data, our system couldn't recognize a single SKU, and so the import process *replaced all the existing SKU data in our system*.

Thus, on Friday morning, our alerts all exploded at the same time, as lead users at every warehouse escalated P1 issues... because *they couldn't use our product to print shipping labels*.

Which meant Integrated couldn't move a single package out.

Their fulfillment operations were totally frozen.

This is where the Platform Team came in.

Tom B, who was running point on the outage, slacked us: "Can you restore Integrated Tech from back up?"

We looked at our little dashboard. "Sure," we said. "We've got backups from last night."

Tom told us to restore as quickly as we could.

We patted ourselves on the back for having nightlies, and started the backup process.

I was the one running the commands. When I hit return, one of those little progress bars showed up on my screen -- you know the ones, which show you the current rate of something, and forecast how long the whole thing is going to take?

You know how those always start by showing it's going to take forever, and then the process ramps up, and the forecast drops by a ton?

Well, this one, initially said it was going to take *six hours* to finish... and then that forecast *never changed*.

I can remember the feeling of panic as I looked at that progress monitor, just hovering at 5 hours and 49 minutes left, barely ticking down at all. Man that sucked.

In the end, Integrated couldn't ship product for almost an entire 8-hour working shift.

Even though we had backups to save ourselves *and them* from just this kind of incredibly stupid customer mistake.

But wait, there's more!

Integrated is only our *fourth*-largest enterprise customer. We ran some numbers, after the post-mortem, and realized it would have taken over 10 hours to restore our largest customer.

We'd found out that, although we had *backups*, we did not have the ability to *rapidly restore*.

We dug in. We discovered that our DB is configured to only do *full* backups *once a week*, on Saturday nights at 2 am. The nightly backups are just incrementals -- just the set of changes accumulated on that day.

So then, if late in the week we need to restore, the system first has to bring back the full backup from the previous weekend, and then replay one incremental patch after another.

There were some things we could optimize (e.g. turning off some constraint checking), but there was no way we were going to get to a reasonable time with that approach.

Of course, the first thing we tried was to switch to nightly full backups.

Eduardo found that the backup process has to lock some key tables, and that means that we can't accept any nightly imports during the backup window. He talked with Mary K, and found that customers sends us imports all through the night -- and some of those customers need to turn the data around quickly, to be used by the next shift. So it was going to be really really hard to have a nightly window where we couldn't accept imports.

So we threw that away.

# XXX Cut the below, replace with replicas
# XXX Then add turning off constraints on dump / reload, because not live
# XXX Then some kind of compression step? Maybe switch compression algorithms to a streaming one.
# Maybe finally add running every morning?

Then, Erika had an idea. What if we rented a giant, super beefy instance from Amazon, ran our DB on that *just for the restore*, then killed it, and started up a new one on a smaller, normal-sized box. We could maybe get away with doing a fast/unsafe dump and restore, and it would be fast enough.

That... kinda worked? I mean, it got us down to 90 minutes, which was way better than 10 hours, but it was crazy complex and felt really fragile.

We all looked at each other during the review. Erika was the one who finally said "Look, I came up with this, and *I* am really not excited about having to depend on it in a crisis." She was totally right -- having a fast but fragile restore was going to be *worse* than having a slow but safe one.

So we threw that away.

At this point, we were getting kind of nervous. We were only okay as long as none of our big enterprise customers did something super boneheaded with their own data. Which... we all know can happen at any time!

Then, Ryan P finally came up with the thing that worked. We set up read replicas for the main DB's -- which wasn't too hard to do, there are good tools to stream the updates. Every night, at 2 am, we pause the *replication* process from the leaders to the replicas. Then we take a full backup off the replica, which we can do quickly because it's not receiving any updates. And during that time, customers can still upload and import data to the leaders. Then, once the backup is done, we turn replication back on, and the systems catch up.

We were even able to do some post processing on the backups, to speed them up, so now we can, start to finish, restore to last night's back up in 60 minutes.

Which is enough to stay within our SLA for even our biggest customer.

Even if they do something totally stupid at some point again!

# Notes - took 5 minutes
#  - Convert 2 failures + 1 success, to 1 failure, partial success, partial success, total success

** Copy of: Everything Everywhere All In the Same Goddamn Place At Once

aka, The Value Of Enabling Multiple Teams To Work In Parallel

At Ellevation, the product team had identified a massive opportunity for the business: overhauling how educators used the core product to collect, review and analyze information about students.

Thousands of districts already used the product to do some of that work -- but the product team believed we could massively improve their workflows and experience.

There were a lot of different facets to this overhaul:

 - We had to add dozens and dozens of new field definitions

   E.g. Texas-specific english proficiency levels, that would allow educators in Texas to track students proficiency over time.

 - We had to ensure our search index saw every update to one of these new fields

   Educators reviewed progress for their students by running queries and reviewing dashboards built on top of that search index, and expected very rapid updates to it.

 - We had to develop a way to create new "Forms" to display to classroom teachers

   The leaders of the EL department needed to be able to select and arrange subsets of the new fields to show to those teachers.

 - Then *another* system had to be layered on top of that, to the allow administrators to assign, track and review hundreds or thousands of forms at a time

And all of that had to be done while the existing product kept on working without missing a beat.

This was a big enough project that we had multiple teams collaborating on it for a very long time.

Thus, we wanted to split the work up between them.

We wanted to set up one team to focus on the *fields*: definitions, indexing, queries and dashboards.

We set up another team to focus on the *forms*: creating, administering and sharing out the the forms built on top of those fields.

Unfortunately, at the start of the project, the existing code to do those "two parts" was completely snarled up together, and much of it lived in some of the hoariest parts of the legacy product.

Practically every user story we could come up with not only required both teams to complete work, but we didn't even have a vague idea of how to split that. Trivial-seeming decisions about the front-end UI for the Forms would turn out to be blocked by esoteric bits of the search indexing logic. But we wouldn't find that out for weeks, so development just kept stalling out.

# Given this, massive value for enabling parallel development

# But, how can we make that visible?

# Lucky, tech savvy product team. Even so.

# A long, long period of struggle

# Maybe: build up an imagined version of this?
