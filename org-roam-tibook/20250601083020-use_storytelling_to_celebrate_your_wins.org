:PROPERTIES:
:ID:       4D62F0DE-2862-45F3-97EE-6AFED5382F2C
:END:
#+title: Use Storytelling To Celebrate Wins
#+filetags: :Chapter:
#+SELECT_TAGS
#+OPTIONS: tags:nil
* Use Storytelling To Celebrate Wins
** Intro
If you've followed the plan up to here, you've completed an initial increment of work, and brought some options and visibility to your stakeholder. You've made a decision about what to do next, together.

Time to dive into another cycle of improvements, right?

Actually, no.

/But... why not?/ you ask. /We even laid out some options, they mostly understand the options. We've built visibility, we have a next increment all planned!/

Here's the thing.

Whatever your stakeholder is /saying/...

... *they likely still /feel/ like they're "doing engineering a favor".*

As in, they don't yet emotionally experience this as "their" win.

There's a very good chance they urgently want to *stop* working on this "engineering issue" so they can get back to solving "business problems".

Left unaddressed, this feeling inside your stakeholder, will first slow and the completely stall out [destroy, hinder, block] your ability to move through repeated, iterative cycles of investment.[fn:: Huh, Dan, I didn't really expect a book on Tech Investments to features, I dunno, quite so much speculative psychology about stakeholders and their feelings? I mean, sure. But you do work with humans. And, personally, I have just not had any luck whatsoever approximating humans as "beings with no emotions".]

If every single cycle feels like a *concession* -- you're going to really really struggle to create significant value for your business.

# To address this, you're going to *tell a story*.

To address this, we're going to draw on one of most powerful tools for getting other human beings to +do your bidding+ understand your perspective on the world:

We're going to tell a story.

** Y U No Just Discuss Value?

Before we get into the details of how to tell really effective stories, I want to back up slightly.

Ultimately, we're trying to get the stakeholder to *join us*, in an understanding of how an investment can create value for the business.

That is what will ultimately make them feel like this is not "a favor for engineering", but rather is "the best possible investment for the business".

That is what will make them "ask for" *more* investment, if in fact that makes sense.

Instead of trying to bargain their way back to churning out whatever features someone has dreamed up.[fn:: I kid, I kid! I'm sure your company is resolutely focused on customer problems, not features. But *some* companies have an obsession with features.]

However, as we discussed way back in [[id:D3158CC2-8A69-4097-B9ED-ED6BD855A7AD][Understand Value In Depth]], "value for the business", is actually a fairly complex and subtle notion.

Taking the time to really deeply understand a model of company value as a probablistic estimate of future profits is incredibly helpful in analyzing potential technical investments.

Unfortunately, it is not particularly useful in getting stakeholders to see and feel that value.

Almost all the stakeholders I've ever worked with have a sort of impatience with what they perceive as "abstract thinking" -- and starting to talk about risks, information, etc, will strongly trigger that impatience.

Let's bring this to life with a story.[fn:: Wait are we being meta? Oh goodness, yes. You, the reader of this, are *also* human, so stories are the best ways to get things lodged into your brain. Mwuhahahaha?]

** Everything Everywhere All In the Same Goddamn Place At Once

At Ellevation, the product team had identified a massive opportunity for the business: overhauling how the core product allowed educators to collect, review and analyze information about students.

There were a lot of different facets to this work:

 - Dozens and dozens of new field definitions had to be added to the core system

 - Every one of those fields needed to be fed into the complex search indexing that powered the queries and dashboards that customers used every day

 - An entirely new system had to be built, for selecting subsets of those fields to create "Forms" to display to educators

 - Then another system had to be layered on top of that, to allow the EL administrator to create, assign and review completion of hundreds or even thousands of forms to educators across a school district.

And all of that had to be done while the existing product kept on working without missing a beat -- although painfully limited in many ways, the old version of the product was absolutely critical for thousands of school districts. If it broke, they could fail to meet crucial auditing and compliance deadlines, with very bad long-term imnapcts.

This was a big enough project that we had multiple teams collaborating on it (and ended up doing so for several years).

We set up one team focused on the field definitions, indexing, queries and dashboards.

We set up another focused on creating and administering the actual forms built on top of those field definitions.

Unfortunately, at the start of the project, the existing code to do the various facets above was all snarled up together, and much of it lived in some of the hoariest parts of the legacy product.

Practically every story we could come up with not only required both teams to complete work, but we didn't even have a vague idea of how to split it. Trivial-seeming decisions about the front-end UI for the Forms would turn out to be blocked by esoteric bits of the search indexing logic. But we wouldn't find that out for weeks, so development just kept stalling out.

# Given this, massive value for enabling parallel development

# But, how can we make that visible?

# Lucky, tech savvy product team. Even so.

# A long, long period of struggle

# Maybe: build up an imagined version of this?


* Scraps
Alright, let's just do some thinking out loud, here.

I can start by defining the problem -- the risk.

What is the risk? Well, even after the work is over, your stakeholder is likely not thinking of it as their win. They're thinking "can I get back to business goals" already. Notice how we never took the time to fully bring them into our thinking about business value. Also, there's a good chance that the visibility still feels a bit abstract to them -- even if it's a true reflection of value for the business.

I think pick either:

 - Enable Parallel Development Across Multiple Teams

 - Reduce Risk of Losing Data

Both of which are super valuable and super opaque.

I think parallel dev, and use Flagship stories w/ Lisa, Cartz + M&M as example, alongside various challenging bits of making that work. Feature Sean E, Neil, Topher, Bryan?
