:PROPERTIES:
:ID:       4D62F0DE-2862-45F3-97EE-6AFED5382F2C
:END:
#+title: Use Storytelling To Celebrate Wins
#+filetags: :Chapter:
* Use Storytelling To Celebrate Wins
** Intro
If you've followed the plan up to here, you've advocated for an initial increment, gotten buy-in, then completed that increment, and brought some new options and visibility to your stakeholder.

Surely, it's time to build momentum and dive right into another cycle of improvements, right?

Actually, *no*.

/But, Dan... why not?/ I hear you ask. /I've laid out solid options, the stakeholder mostly understands the options. We've built visibility, we have a next increment all planned! They'll even be able to *see* the improvement!/

True, true.

But, here's the thing.

Whatever your stakeholder is /saying/...

... they likely still *feel* like they're *doing engineering a favor*.

As in, they don't yet emotionally experience this as "their" win.

Thus, there's a very good chance that their mind is coming up with all sorts of reasons to *stop* working on this "engineering issue" so they can get back to solving business problems.

Left unaddressed, these feelings and thoughts first slow and then completely stall out your ability to move through repeated, iterative cycles of investment.[fn:: "Huh, Dan, I didn't really expect a book on Tech Investments to feature, I dunno, quite so much speculative psychology about stakeholders and their feelings?" Look: you work with humans. And I have just not had any luck whatsoever approximating humans as "beings with no emotions". Feel free to ignore this fact if you'd like to keep having all the most important work get cancelled over your bitter protests!]

If every single cycle of investment feels like a *concession* -- you're going to really really struggle to create significant value for your business.

# To address this, you're going to *tell a story*.

To address this, we're going to draw on one of most powerful tools for getting other human beings to +do your bidding+ understand your perspective on the world:

You're going to tell a story.

** Y U No Just Discuss Value?

Before we get into the details of how to tell really effective stories, I want to back up slightly.

Ultimately, we're trying to get the stakeholder to *join us*, in an understanding of how an investment can create value for the business.

That is what will ultimately make them feel like this is not "a favor for engineering", but rather is "important for the business".

That is what will make them "ask for" *more* investment...

... instead of trying to bargain their way back to churning out more features that someone has dreamed up.[fn:: I kid, I kid! I'm sure your company is resolutely focused on customer problems, not features. But *some* companies have an obsession with features.]

However, as we discussed way back in [[id:D3158CC2-8A69-4097-B9ED-ED6BD855A7AD][Understand Value In Depth]], "value for the business", is actually a fairly complex and subtle notion.

It is incredibly powerful to understand company value as a probabilistic estimate of future profits.

Unfortunately, it is not particularly *useful* in helping stakeholders to feel that value.

Almost all the stakeholders I've ever worked with have a sort of impatience with what they perceive as "abstract thinking" -- and starting to talk about risks, information, etc, will trigger that impatience.

Let's bring this to life with a story.[fn:: "Wait are we being meta?" Oh goodness, yes. You, the reader of this, are *also* human, so stories are the best ways to get things lodged into your brain. Mwuhahahaha?]

** RP and T-Rest at Friday Wins

It's the Friday Wins zoom session. Anand, of one of the engineers on the Platform Team, turns on his mic to share his team's Win for the week.

Anand takes a breath and looks up into the camera -- Bennett, the Platform Team manager, has clearly been coaching him on not just looking down at his shoes.

He says: "This week, the Platform Team win is that we wrapped up the RR project. We achieved a T-Rest of 60 minutes."

The other members of the Platform Team hoot and holler from their little screens.

Once it's clear Anand isn't going to say anything else, the chat fills up with "congrats!" messages and thumbs up emojis from engineers on other teams. One PM posts "What's T-Rest?" but no one has time to respond, because Anand has already switched off his mic, and the next teams is stepping up to share a win.

What has just happened here?

First off, Friday Wins are great. See Kellan again, on designing rituals.

# XXX Find Kellan link. "No, you have a searing intellectual crush on Kellan"

There is something good in this win -- Anand is reporting on *some* kind of a visible, measurable improvement, not just the project being "done".

But, unfortunately, no one who wasn't already intimately familiar with the project is going to remember anything about it. Or, honestly, care.

Let's go through some steps to turn it into a story that listeners will remember.

# XXX Should I try telling this as a story of helping Anand?

** How to Craft a Compelling Story
*** Step -1: Listener / Context

First off, the tactics I'm going to describe below work at a range of scales.

You can use them to:

 - Construct a vivid 3 sentence summary that sticks in people's minds

 - Prepare a condensed, one minute overview as part of a broader review

 - Develop a full presentation, to be shared with slides

The fundamental structures that plug into the human mind's penchant for narrative are very similar, although some of the details will be different.

*** Step 0: Expect to Explain the Obvious

As you get ready to share a win, a key step is to put yourselves in your audience's shoes.

In particular, work to remember that there are things they'll need *explained*, even though those things seem completely obvious to you.

Anand cited progress on the "T-Rest" metric as part of the "RR" project.

One of the profound occupational risks of working in software engineering is that, as we dive deep into arcanes problem, we lose all track of what civilians do and do not understand about those problems.

For the last six weeks, Anand has spent every waking moment working on the *Rapid Recovery* project, living and breathing improvements in *Time to Restore*, which the team labels "T-Rest" on all their dashboards.

It takes real effort to remember that not everyone knows what RR and T-Rest even mean.

You don't have to give long, detailed explanations. All your audience needs is enough context to understand *why* you're talking about this, how it connects to other things they do know about.

I like to call this "opening up" the key concepts or terms just a bit.

# Take the time to give concise, capsule summaries of the most important concepts or terms that come up.

Anand might define "RR" as:

"The Rapid Restore project, which had a goal of reducing the time to restore a full database of customer data from a backup. We depend on being able to restore database backups for everything from routine development work to protecting us from permanently losing critical customer data. Which we really, really don't want to do."

That names the project, explains what its goal was in plain language, and then gives a reason why that goal *matters*.

It's well worth developing that kind of concise summary for any concepts you're going to be sharing, that anyone in your audience might not fully understand.

# When you read that, you might hvae thought: /Come on, Dan, those cryptic random acronyms are too cryptic. Engineers at my company don't speak in gibberish like that/.

*** Step 1: Open With a Blurb or Teaser - Why Am I Here?

At the start of any story, your audience's will be wondering: "What is this about?" aka *Why Am I Here?*, aka "What Is In This For Me?"

Two ways to address this:

 - Blurb

 - Teaser

A blurb is a summary is that gives a quick preview of what you're talking about, why, and what they'll get from it -- like the blurb on a book jacket.

Anand might do that by saying:

/I'm going to talk about the the Rapid Restore project, and what we learned from addressing a serious issue in our overall data resiliency/

That's perfectly fine -- and way better than launching into details without any context.

An alternative, depending on context, is to create a bit of drama up front:

/Do any of you remember that exciting outage last month, when Integrated Tech threatened to cancel?/

/[pause, wait for nods]/

/Okay, here's what happened./

That's a teaser -- creates a bit of fun suspense or drama.


# Book Cover / Movie Poster / Why Am I Here

*** Step 2: Use The Heroic Arc

You can find different theories of what the inherent story structure is, I'll offer the framework I've found useful, which mixes a bit from The Hero's Journey (as described by Nancy Duarte, in Resonate), with what I've learned about playwriting and screenwriting.

 - The world of the hero is at peace

 - A danger emerges that threatens that peace

 - The danger intensifies

 - The hero struggles to face the danger

 - They discover new strength within themselves (often with the help of a friend or mentor)

 - The hero overcomes the danger and creates a better world

In case you're wondering if this is truly wired into our brains, I encourage you to watch the short videos made as part of the XXX projects, which have all the steps above, and is *impossible* to see as anything other than a struggle to overcome a challenge... even though it's just a pair of dots and a line.

# XXX Find this experiment

Anand could tell a concise form of that story arc by saying:

 - /One of the Platform Team's responsibilities is ensuring that we take regular backups of our key databases./ [The world is at peace]

 - /But, during a recent incident, we went to *restore* one of those backups... and discovered that it took nearly *6 hours*. That meant almost a full day of downtime for a customer./ [a danger emerges]

 - /When we dug in, we realized we'd actually gotten lucky. For our biggest, most important customers, we could easily have had *10 hours* of downtime/ [danger intensifies]

 - /It turned out that our nightly backups are *incrementals* -- we only take full backups on Saturday nights. And that meant, for a restore on a Thursday or Friday, the database engine has to replay 5 or 6 full days -- and that takes a long time./ [The hero struggles, 1]

 - /We tried switching to nightly full backups, but that created horrible site slowdowns that bled into working hours./ [The hero struggles, 2]

 - /It was Erika who came up with the approach that finally worked. We set up read replicas for the largest db's, and we can pull nightly full backups from *those*, without impacting site performance./ [discover new strengths with help]

 - /We've now running regular restore tests, and the most recent one brought back our largest database in just under one hour -- which is a 90% improvement! We've talked with the support team, and they agree that that's plenty fast enough for now/ [overcome danger / better world]

That form of the story is vastly more likely to stay in a stakeholder's mind -- and to feel *meaningful*.

However, there are things you can do, to make it feel more vivid, memorable and impactful.

*** Step 3: Bring Key Moments to Life

Once you've primed your audience into "story" mode, they'll be constantly "waiting to find out what happens next."

You can often take advantage of that by slowing down and bringing a specific moment in time to life. Done well, that will make the story feel more suspenseful and immediate and interesting -- aka *less* slow to the listener.

These should be moments where you discover or learn something -- those are the key moments of drama.

E.g. in the story above, Anand could open as follows:

 - /One of the Platform Team's responsibilities is ensuring that we take regular backups of our key databases./ [The world is at peace]

 - /A month ago, on a Friday morning, we were just wrapping up our standup, when all a sudden, all of our Slack channels exploded at once. Apparently, there was some kind of horrible incident going on with Integrated Tech, and Tom B, who was running point, needed us to restore their database./ [danger emerges]

Note how that makes a very specific moment in time really clear -- and, in particular, it's a turning point in the story, when the main characters (the Platform Team), have their peaceful world interrupted by a looming danger.

Where were you, when you made that discovery?

What was happening, immediately before?

How did the realization hit you?

What did you see?

What did you feel?

Anand could continue in that "bring moments to life" vein, ala:

 - /We patted ourselves on the back for having nightlies, and started the backup/ process.

   /I was the one running the commands. When I hit return, one of those little progress bars showed up on my screen -- you know the ones, which show you the current rate of something, and a forecast how long the whole thing is going to take?/

   /You know how those always start by showing it's going to take forever, and then the process ramps up, and the forecast drops by a ton?/

   /Well, this one, initially said it was going to take *five hours* to finish... but then that forecast *got longer*./

   /I can remember the feeling of panic as I looked at that progress monitor, just hovering at 5 hours and 49 minutes left, barely ticking down at all./

   /In the end, Integrated couldn't ship product for almost an entire 8-hour working shift./







*** Step 4: Fill In Characters

*** Step 4.5: Optional: Call Out Lessons Learned

Note that the second half of the story arc represents *a series of lessons learned* -- the struggle, the help from the friend, overcoming the danger. All of those are encoding key lessons.[fn:: if I had to guess, this is why evolution encoded this into our brains -- so that we can share non-obvious facts and strategies about our environments that improve the likelihood of reproductive success)].

So asking yourself "What did we learn?" is incredibly useful, if you're trying to turn your win into a story.

*** Step 5: Enjoy Your Pauses

*** Step Infinity: Prep, Practice, Improve

Let's see how Anand's Win could be work as a *story*, instead of a dry fact.



# Logistically, we'll imagine Anand can take up to about five minutes to share a win.

** Saving Integrated Tech From Their Own Incredible Stupidity

Do any of you remember that exciting outage last month, when Integrated Tech threatened to cancel?

[nods from the room]

Here's what happened.

We like to think of ourselves as a, well, *competent* platform team.

Among other things, that means we're responsible for maintaining the central DB, which most of your teams depend on.

Now, *of course*, we take backups of that database.

Of course we do!

Last year we even built a little dashboard, that shows the time to the last backup.

We felt pretty good.

But then, a month ago...

...our friends at Integrated Tech--who you may also know as "our fourth-largest enterprise customer"--began to implement a new third party inventory reconciliation package in their Warehouse Management System.

Of course, they didn't *tell* us that they were doing this.

But guess what that vendor's implementation engineers did, as *step one* in their *standard process*? They completely wiped out the numbering scheme for every single one of Integrated's SKU's. And started them over again from 0.

Yep.

So, when Integrated sent us their nightly pull of inventory data, our system couldn't recognize a single SKU, and so the import process *replaced all the existing SKU data in our system*.

Thus, on Friday morning, our alerts all exploded at the same time, as lead users at every warehouse escalated P1 issues... because *they couldn't use our product to print shipping labels*.

Which meant Integrated couldn't move a single package out.

Their fulfillment operations were totally frozen.

This is where the Platform Team came in.

Tom B, who was running point on the outage, slacked us: "Can you restore Integrated Tech from back up?"

We looked at our little dashboard. "Sure," we said. "We've got backups from last night."

Tom told us to restore as quickly as we could.

We patted ourselves on the back for having nightlies, and started the backup process.

I was the one running the commands. When I hit return, one of those little progress bars showed up on my screen -- you know the ones, which show you the current rate of something, and forecast how long the whole thing is going to take?

You know how those always start by showing it's going to take forever, and then the process ramps up, and the forecast drops by a ton?

Well, this one, initially said it was going to take *six hours* to finish... and then that forecast *never changed*.

I can remember the feeling of panic as I looked at that progress monitor, just hovering at 5 hours and 49 minutes left, barely ticking down at all. Man that sucked.

In the end, Integrated couldn't ship product for almost an entire 8-hour working shift.

Even though we had backups to save ourselves *and them* from just this kind of incredibly stupid customer mistake.

But wait, there's more!

Integrated is only our *fourth*-largest enterprise customer. We ran some numbers, after the post-mortem, and realized it would have taken over 10 hours to restore our largest customer.

We'd found out that, although we had *backups*, we did not have the ability to *rapidly restore*.

We dug in. We discovered that our DB is configured to only do *full* backups *once a week*, on Saturday nights at 2 am. The nightly backups are just incrementals -- just the set of changes accumulated on that day.

So then, if late in the week we need to restore, the system first has to bring back the full backup from the previous weekend, and then replay one incremental patch after another.

There were some things we could optimize (e.g. turning off some constraint checking), but there was no way we were going to get to a reasonable time with that approach.

Of course, the first thing we tried was to switch to nightly full backups.

Eduardo found that the backup process has to lock some key tables, and that means that we can't accept any nightly imports during the backup window. He talked with Mary K, and found that customers sends us imports all through the night -- and some of those customers need to turn the data around quickly, to be used by the next shift. So it was going to be really really hard to have a nightly window where we couldn't accept imports.

So we threw that away.

# XXX Cut the below, replace with replicas
# XXX Then add turning off constraints on dump / reload, because not live
# XXX Then some kind of compression step? Maybe switch compression algorithms to a streaming one.
# Maybe finally add running every morning?

Then, Erika had an idea. What if we rented a giant, super beefy instance from Amazon, ran our DB on that *just for the restore*, then killed it, and started up a new one on a smaller, normal-sized box. We could maybe get away with doing a fast/unsafe dump and restore, and it would be fast enough.

That... kinda worked? I mean, it got us down to 90 minutes, which was way better than 10 hours, but it was crazy complex and felt really fragile.

We all looked at each other during the review. Erika was the one who finally said "Look, I came up with this, and *I* am really not excited about having to depend on it in a crisis." She was totally right -- having a fast but fragile restore was going to be *worse* than having a slow but safe one.

So we threw that away.

At this point, we were getting kind of nervous. We were only okay as long as none of our big enterprise customers did something super boneheaded with their own data. Which... we all know can happen at any time!

Then, Ryan P finally came up with the thing that worked. We set up read replicas for the main DB's -- which wasn't too hard to do, there are good tools to stream the updates. Every night, at 2 am, we pause the *replication* process from the leaders to the replicas. Then we take a full backup off the replica, which we can do quickly because it's not receiving any updates. And during that time, customers can still upload and import data to the leaders. Then, once the backup is done, we turn replication back on, and the systems catch up.

We were even able to do some post processing on the backups, to speed them up, so now we can, start to finish, restore to last night's back up in 60 minutes.

Which is enough to stay within our SLA for even our biggest customer.

Even if they do something totally stupid at some point again!

# Notes - took 5 minutes
#  - Convert 2 failures + 1 success, to 1 failure, partial success, partial success, total success

** Where Do You Tell The Story?

** Who Tells the Story?

* Scraps

** Resonate Link
https://www.duarte.com/blog/presentation-storytelling-audience-is-hero/
** Rando Thinking
Alright, let's just do some thinking out loud, here.

I can start by defining the problem -- the risk.

What is the risk? Well, even after the work is over, your stakeholder is likely not thinking of it as their win. They're thinking "can I get back to business goals" already. Notice how we never took the time to fully bring them into our thinking about business value. Also, there's a good chance that the visibility still feels a bit abstract to them -- even if it's a true reflection of value for the business.

I think pick either:

 - Enable Parallel Development Across Multiple Teams

 - Reduce Risk of Losing Data

Both of which are super valuable and super opaque.

I think parallel dev, and use Flagship stories w/ Lisa, Cartz + M&M as example, alongside various challenging bits of making that work. Feature Sean E, Neil, Topher, Bryan?

** Copy of: Everything Everywhere All In the Same Goddamn Place At Once

aka, The Value Of Enabling Multiple Teams To Work In Parallel

At Ellevation, the product team had identified a massive opportunity for the business: overhauling how educators used the core product to collect, review and analyze information about students.

Thousands of districts already used the product to do some of that work -- but the product team believed we could massively improve their workflows and experience.

There were a lot of different facets to this overhaul:

 - We had to add dozens and dozens of new field definitions

   E.g. Texas-specific english proficiency levels, that would allow educators in Texas to track students proficiency over time.

 - We had to ensure our search index saw every update to one of these new fields

   Educators reviewed progress for their students by running queries and reviewing dashboards built on top of that search index, and expected very rapid updates to it.

 - We had to develop a way to create new "Forms" to display to classroom teachers

   The leaders of the EL department needed to be able to select and arrange subsets of the new fields to show to those teachers.

 - Then *another* system had to be layered on top of that, to the allow administrators to assign, track and review hundreds or thousands of forms at a time

And all of that had to be done while the existing product kept on working without missing a beat.

This was a big enough project that we had multiple teams collaborating on it for a very long time.

Thus, we wanted to split the work up between them.

We wanted to set up one team to focus on the *fields*: definitions, indexing, queries and dashboards.

We set up another team to focus on the *forms*: creating, administering and sharing out the the forms built on top of those fields.

Unfortunately, at the start of the project, the existing code to do those "two parts" was completely snarled up together, and much of it lived in some of the hoariest parts of the legacy product.

Practically every user story we could come up with not only required both teams to complete work, but we didn't even have a vague idea of how to split that. Trivial-seeming decisions about the front-end UI for the Forms would turn out to be blocked by esoteric bits of the search indexing logic. But we wouldn't find that out for weeks, so development just kept stalling out.

# Given this, massive value for enabling parallel development

# But, how can we make that visible?

# Lucky, tech savvy product team. Even so.

# A long, long period of struggle

# Maybe: build up an imagined version of this?
