:PROPERTIES:
:ID:       4FEA3BD5-8E85-4BB6-8F59-15FDE4F38572
:END:
#+title: Master Tactical Empathy
#+filetags: :Chapter:
* Master Tactical Empathy
** A Brief Exercise In Stakeholder Empathy

# Putting Ourselves In Our Stakeholder's Shoes

# Sometimes, It's Hard To Be a Stakeholder

# It's Hard Out There for a Stakeholder

#

I think it's legitimately hard for most engineers to imagine just how well and truly miserable it is for many stakeholders to work with engineering.

In almost every other part of their working life, a business leader gets to:

 - Identify an important problem

 - Set goals that represent solving that problem

 - And then *give those goals to someone*

# That is, in fact, what it means to be an effective leader -- set clear goals, and hold people accountable to achieving them.

But once engineering gets involved, everything goes to hell.

What seem like straightforward goals turn into an absolute blizzard of confusion, the engineers produce ridiculous estimates, then fail to meet those estimates, then finally deliver something that doesn't even *work*.

When the business leader asks questions, they get back a flurry of incomprehensible jargon.

And then, despite literally *everything* being painfully far behind plan, the engineers announce that they want to *stop working on actual business needs* so they can "clean things up", or "retire tech debt".

It's weird as hell to work with engineering.[fn:: I like to think it's like hiring a contractor to remodel your kitchen, going away for the weekend, and coming back to discover they're on the verge of demolishing your entire house because they found some wiring they think is "ugly".]

If you want to be effective in *advocating for technical investments*, you need to build a different kind of relationship.

Ideally, your company has a strong product team, who play a central role in building trust and rapport with The Rest of the Business.

But I have found that, for *technical investments specifically*, it's often down to the engineering leader to persuade their business counterparts -- be they sales, the CEO, *or their product manager* -- of the potential value of some specific chunk of work.

This is a core part of why great engineering leaders combine strong technical judgment with *effective influence*.

We're going to talk in this chapter about leveling up on influence.

** Tactical Empathy

Mastering effective influence is the work of a lifetime.

We're going to focus on a few core skills.

These are factors in what Chris Voss, in his excellent book "Never Split the Difference" (written with Tahl Raz), calls *Tactical Empathy*:

    In my negotiating course, I tell my students that empathy is "the ability to recognize the perspective of a counterpart, and the vocalization of that recognition." That's an academic way of saying that empathy is paying attention to another human being, asking what they are feeling, and making a commitment to understanding their world.

    Notice that I don't say anything about agreeing with the other person's values and beliefs or giving out hugs. That's sympathy. What I'm talking about is trying to understand a situation from another person's perspective.

    One step beyond that is tactical empathy.

    Tactical empathy is understanding the feelings and mindset of another in the moment and also hearing what is /behind/ those feelings so you increase your influence in all the moments that follow. It's bringing our attention to both he emotinoal obstacles and the potential pathways to getting an agreement done.

NSTD is *incredibly* good, by the way. I super, super highly recommend it.

** A Situation Requiring Tactical Empathy

Let's say you've followed the game plan in this book, up to here.

You've dug in on some engineering concerns, and, in so doing, found one that you were able to turn into a statement of real potential value for the business.

Let's say that one was around site capacity -- the engineers are concerned about the site potentially slowing down to the point of being unusable.

You've done a little bit of work on the side, to build some basic visibility -- but you believe now is the time to take the next step of investment: developing good SLI's and SLO's[fn:: The first few chapters of O'Reilly's Implementing Service Level Objectives are an incredibly good game plan for this].

Doing so is going to require a real chunk of engineering time, *and* a commitment of time from the product team (good SLI's must be developed in collaboration)

You could go to your product counterpart and lay that out as a proposal, ala:

/We're worried about site capacity. Our initial monitoring of the database is showing some worrisome spikes, so we want to spend a few weeks building Service Level Indicators, which will create much more actionable data./

That's reasonable. It might work.

But let's practice empathy again, this time focused on our product counterpart:

Your product counterpart has dozens of other people making *similarly reasonable* requests of them, *all the time* -- sales, success, the help desk, the visionary CEO, you name it. Every request urgent, every request time-sensitive.

To a first approximation, Product's *job* is to continually disappoint everyone around them.

And that includes engineering.

So you should not be surprised if this advocacy falls on deaf ears.

What can you do, to move your request higher up the list?

If you want someone to *listen to you*, you are incredibly well-served by *first, listening to them*.

It takes a bit of work to get most humans to share what they're thinking and feeling.

So we're going to use a few tricks.

** Repeat Trailing Three Words

The first one is simple and somewhat *bizarrely* effective:

First, you ask someone a question.

They respond with an answer.

You then calmly and curiously repeat the last three words they said, back to them, inflected as a question.

And then you stop talking and wait.

*That's it*.

If you can achieve any form of genuine curiosity as you speak, and if you can stop yourself from saying anything other than those three words...

... the person will then start talking again, telling you more and more.

And they'll *feel* like you're hearing and understanding them.

It shouldn't be this simple. But it totally works.[fn:: If you happen to like romcoms, you might catch this *exact tactic* from Never Split the Difference being referenced in Nobody Wants This]

In our example, let's start by imagining that the engineering leader does *not* have this skill, and let's see how the conversation might go.

    ENG: I'd like to talk about taking the time this month to implement Service Level Indicators -- it'd really help us stay ahead of potential capacity issues.

    PRODUCT: Okay, how much time are we talking about?

    ENG: We're not sure, we think it's probably three weeks of work for Andrea. And we'd need some of your time to review what she comes up with.

    PRODUCT: Oh, I don't know. I thought we were depending on Andrea to fix the issues with the search indexing with Forms 2.0. I'm not sure we can slow that down right now.

    ENG: If we don't do the work now, I bet we're not going to find time for it before launch. We're only talking about three weeks, we can timebox it you want.

    PRODUCT: Okay, I'll think about it.

The Engineering leader is trying to speak to value, which is good.

But most product leaders would experience this as someone *pushing* them for something.

And a *core survival skill* for a PM is being able to ignore people who push them for things. They couldn't get through a single day without doing so, many times.

Also, notice that, at one point, the PM stated a concern ("I'm not sure we can slow that down right now"), and were met with, essentially, an *argument* ("If we don't do that work now...").

Let's replay the start of this conversation with the Repeat Trailing Three Words tactic.

First, the engineer will *lead with a question* -- not with immediate advocacy.

    ENG: I wanted to ask -- how are you thinking about our key priorities for the month?

    PRODUCT: Well, we absolutely have to stay on track for the Forms 2.0 migration.

    ENG: ...the Forms migration?

    [tiny pause]

    PRODUCT: Yes. The Success team has *finally* started converting some of the Enterprise customers, and they're complaining about all sorts of blocker requirements.

    ENG: ...oh, new blocker requirements?

    [tiny pause]

    PRODUCT: Yeah. I mean, we're absolutely not going to do them all, but we're going to have to figure out which ones are genuinely important.

    ENG: ... which are genuinely important?

    [tiny pause]

    PRODUCT: Yep. Oh, that, and just some other fit and finish work, I think. What's on your mind?

If you play this game at all well, you'll achieve two *super* important things:

 - First, you'll build *rapport*

   You're demonstrating, simply by listening, that you want to work *with* the PM to solve their problems.

 - Second, you'll acquire extremely useful *context*

   Which you can then use as part of making your case.

We'll demonstrate how to do so, but first, we'll talk about a second core skill of Tactical Empathy.

** Echo Back Summaries

Now, in the little story above, the eng leader has done something great -- by digging deeper with their product counterpart, they have learned some extremely useful context.

In particular, they've learned that the product manager is very focused on transitioning Enterprise customers.

This context provides the Eng leader with an *excellent* opening to discuss the site capacity issues they're wanting to advocate for:

They can draw a connection between the intensity of enterprise customer usage and greater than normal strains on capacity (aka, if they don't build better visibility into capacity limits, they could end up frustrating the enterprise customers the moment they convert).

Given the above, here is the key question:

*What should the engineering leader say next?*

Remember, the last thing the product manager said was:

    /PRODUCT: Yep. Oh, that, and just some other fit and finish work, I think. What's on your mind?/

The PM has *invited* the engineering leader to state their concerns!

Clearly, the engineering leader can now start speaking to potential value, right?

Nope.

Instead, in this moment, the engineering leader should slow down and carefully *repeat back a brief summary of what they've just learned*.

And then ask if they've got it right.

i.e. in our story above, that might look like:

    PRODUCT: Yep. Oh, that, and just some other fit and finish work, I think. What's on your mind?

    ENG: Let me just see if I've got this. [consults notes]. The biggest focus for this month is converting Enterprise customers. The success team is raising a lot of issues they think are blockers, but your guess is that not all of them are *actual* blockers, so there's going to be some work to untangle that. Beyond that work, it's mostly just fit and finish, to get ready for the big launch. Is that about right?

    PRODUCT: Yeah. I mean, the one caveat is that I don't expect us to actually convert many Enterprise customers *this* month -- but we need to be sure we can *next* month.

    ENG: So, it's, like, ensuring we're fully *ready* to convert, is that right?

    PRODUCT: Yes.

Why is this valuable?

Two reasons:

 - You will usually discover that there was something you didn't get quite right

   In the example above -- *actually converting* Enterprise customers vs *being ready* to convert Enterprise customers are very different goals for a month.

   If you had left the conversation believing it was the former, you could easily have wasted a ton of time (and, likely, a ton of your team's time), before you came to realize that the PM hadn't been precise in speaking about the goal.

 - It makes an *enormous* difference in the product manager *feeling understood*

   When someone has just explained something to you, they will not, in general, feel confident they've been understood.

   They may not consciously realize that, but it's a near-universal experience.

   Humans rarely experience themselves as being fully understood.

   Thus, if you summarize back to someone what they just said, at all accurately, they will feel a genuine sense of relief -- almost like they can exhale.

   # It's like you've completed an open transaction that was otherwise hanging.

   Which is exactly the mode you want them to be in, if you're going to turn the corner and now ask them to engage in *your* concerns.


** Retrain Your Brain By Practicing With Friends

This tactic -- echoing back -- is incredibly valuable.

I have coached dozens and dozens of people on it.

Over and over, I have seen it significantly improve people's ability to influence  others (while also helping them feel more calm and in control themselves).

But, when first employing this tactic, it *always* feels very strange, for two reasons:

 a) Your brain will be just yelling at you to get on to the next part, where you can state your own awesome idea

    # If you've employed tactics like Repeat Trailing Words above, you'll feel genuine excitement about the connections they now see to the work they want to propose.

    # Your brain will be eager, it'll feel like there's open door to go through.

 b) Your brain will also be telling you "Ugh, don't *bore* the person, they just told you this."

Because of this, I strongly recommend *practicing this with friends* first.


** Posit a Spectrum to Draw People Out
** Make The Speaker a Beleaguered Hero
** Cultivate Curiosity & Sincerity
# Embrace Cheerfully Smart Naivete
** Practice With Friends

* Scraps
** Warning: Deliberate Practice Required

I'm going to share what I have experienced as one of the most powerful tactics of my entire working life.

# No exaggeration, I think my good fortune to be strong at this has made me a few million dollars over the course of my working career.

I have coached dozens and dozens of people on this approach -- and seen them adopt it with outstanding results.

But I have also seen that it takes just about everyone some real work to master.

The approach I'm talking about is what Chris Voss calls, in his excellent book, Never Split the Difference, *"tactical empathy"*.

I'll explain what that concept means, break down some specific tactics, and offer exercises that I've seen people use to build their skills up.

But this chapter, more than most, is going to require you to do some genuine homework, to get the value.

** Engineers Need Context and Decision-Making

# Product? CEO? Marketing? Yes.

Unfortunately, for the company as a whole to be successful, engineers also need two things from their business counterparts, that *not all other teams need*.

First, engineers need a lot of *context* -- they need to know *why* they're being asked to achieve certain goals.

It's only with generous amounts of context that engineers can, when they hit the inevitable roadblocks in the original plan, come up with creative solutions that still solve the underlying problems.

Second, engineers also need someone who can make frequent *decisions*. So much is learned as you go, the company can only win if there's someone who is ready to swiftly make difficult tradeoff and reprioritization calls.

In some ways, we're just talking about the role of product management.


But, I have found that, for *technical investments specifically*, it's often down to the engineering leader to persuade their business counterparts -- be they product, marketing, or the CEO -- to provide that kind of full context and decision-making partnership.

I would love to live in a world where, when an engineer asked someone "*Why* are you asking me to build thing X?", they got a rich, full answer, situating the desired feature as part of a coherent business strategy, with various options and tradeoffs already on the table.
But, back here in reality, we often fail to live up to that ideal.

So, the first thing engineering leaders are going to want to level up on is, extracting business context from those around them -- and doing so in a way that builds trust and rapport.

Which brings us to the marvelously powerful skills of *tactical empathy*.

** Scrap

I would love to live in a world where, when an engineer asked someone "*Why* are you asking me to build thing X?", they got a rich, full answer, situating the desired feature as part of a coherent business strategy, with various options and tradeoffs already on the table.
But, back here in reality, we often fail to live up to that ideal.

So, the first thing engineering leaders are going to want to level up on is, extracting business context from those around them -- and doing so in a way that builds trust and rapport.

Which brings us to the marvelously powerful skills of *tactical empathy*.

** Tactical Empathy By Example

A series of ways that, when talking with someone, you can make them feel deeply and fully *heard*.

Both intellectually (as in, they feel like you actually understand some thing they care deeply about), and also emotionally (as in, they perceive you as "with them" in facing some difficult challenge).

It allow you to both building trust, but *also* draw out vastly more information than you otherwise would, about context, goals, risks, etc.

All of which is just incredibly valuable for engineering leaders -- *especially* if they are preparing to advocate for a technical investment.

I'll bring that to life with two versions of a conversation an engineering leader might have with an executive at their company.

*** Scrap

The information you're obtaining is super useful for at least two reasons:

 - First, so you can understand what technical work is most valuable to the business right now

 - Second, so you can clearly draw those connections

E.g. if you come to understand that the new user model tweaks are a part of a major strategic shift to open the product up to more users, who are are likely to significantly increase the volume of daily visits, suddenly those lingering database capacity issues might feel a lot more important to fully suss out. And you have a straightforward way to advocate for that work, by tying it to the upcoming shift.s

*** Version 1 - Solid Questions, No Tactical Empathy

[Scene: Morning. We're in the kitchen in the offices of WeFixU, a health care startup that provides virtual primary care. LIESL KO, an engineering manager at WeFixU, is blearily pouring herself a cup of coffee. She looks up, and there, hovering by her elbow, she discovers CHRIS COLABRI, WeFixU's CEO. LIESL blinks uncertainly.]

CHRIS: [briskly] Morning.

LIESL: Morning, um, Chris.

CHRIS: [Nodding] It's... Lisa, right?

LIESL: Actually Liesl, but close enough, haha.

[CHRIS smiles absently and, as LIESL steps back, pours himself a cup of coffee. LIESL screws up her courage].

LIESL: Do you mind if I ask you a question?

[CHRIS blows on his coffee and shrugs, non-committally. LIESL forges on.]

LIESL: So, my team is adding providers to our user model.

CHRIS: Okay?

[LIESL has clearly lost him]

LIESL: Let me back up. I think we're trying to let doctors log in? Is that right?

CHRIS: Oh, absolutely. That's a key goal. [He nods vigorously]

LIESL: Why are we... doing that?

CHRIS: Because it's really important.

LIESL: Oh. I see.

CHRIS: Glad we got to talk, Lisa. Wait, Liesl! [He claps her on the shoulder and strides off]

*** Post-Game Analysis

First off, seriously, god bless Liesl, for having the guts to ask her CEO *why* her team was building something.

But... she didn't get very far -- her question kind of bounced off Chris.

She neither learned anything that might help her team come up with creative solutions to underlying business problems, *nor* did she build up rapport and trust with Chris so that she could later be ready to advocate for one of those creative solutions.

Let's see how it might go, if Liesl had really strong tactical empathy skills.

*** Version 2 - Same Questions, Solid Tactical Empathy

[...]

LIESL: Let me back up. I think we're trying to let doctors log in? Is that right?

CHRIS: Oh, absolutely. That's a key goal. [He nods vigorously]

LIESL: [intently]... a key goal?

CHRIS: Yes. We've got to improve the provider experience.

LIESL: ... the provider experience?

CHRIS: *Exactly*. Right now, specialist providers can't even find us an option, so they're turning patients away.

LIESL: Oh, interesting. Let me say that back, see if I've got it. It sounds like right now, when patients talk to a specialist, and tell them that WeFixU is their primary care, the specialist doesn't know who we are. And that means they turn the patients away? Is that right?

CHRIS: Yes, yes. Well, *almost*. It's also, they have systems to verify primary care providers, but we're not listed in those.

LIESL: ... not listed in those?

CHRIS: Right. And that's not something we think we can fix.

LIESL: Okay, let me say that back. The reason we're getting turned away is partly because we're not listed in the systems that the specialists use to verify primary care providers. But that's hard enough to solve, we think we're better off giving the specialists a way to connect with us directly? Is that about it?

CHRIS: Yes, exactly. That's good. That's right.

LIESL: Cool. Can I ask one more question?

CHRIS: [checks watch] Shoot.

LIESL: Why, exactly, do we think we can't fix the issue with being listed?

CHRIS: What do you mean?

LIESL: Well, it's like, I could imagine a couple of reasons. Maybe [she gestures with one hand, over to her right], it, like, takes a long time to get listed, and we don't think we can afford to wait. Or, on the other [gestures with the other, to her left], I could maybe imagine that, because WeFixU is a pretty different kind of primary care provider, the main listings don't know what to do with us. Is it one of those, or like, a mix of the two? [indicates with her hands, points on the spectrum between the two]. Or something else?

CHRIS: Oh I see what you're saying. It's kind of a combination -- *because* we're so different, it seems to be taking forever to move ahead with the listing companies. So we think it makes more sense to let providers just directly log in.

LIESL: Got it, got it. It's the combination of those two.

CHRIS: Exactly. Well, I've got to go. I'm really glad we got to talk!

LIESL: Me, too. And remember, Liesl not Lisa!

[CHRIS laughs]

*** Post-Game Analysis
