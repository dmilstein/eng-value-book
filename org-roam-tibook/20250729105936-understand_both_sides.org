:PROPERTIES:
:ID:       78678319-4D0D-474C-AC5C-A3231B826D89
:END:
#+title: Understand Both Sides
#+filetags: :Chapter:

* Understand Both Sides
** Engineering Would Be So Easy Without Those Pesky Humans

One of my favorite things to do is to sit down for lunch or coffee with some bright engineer who is eagerly engaged in learning everything they can about the job.
# XXX Fix this intro graph

# One of my favorite things to do is to sit down for lunch or coffee with one of the extremely bright engineers who I was lucky enough to work with early in their careers.

I love hearing about what they've learned, the company they've landed at, the new responsibilities they're taking on -- be that as managers, or moving up the technical track.

At these lunches or coffees, there's one topic that comes up over and over.

# over cups of coffee or sandwiches or pho

It's *not* how to structure complex softare[fn:: I mean, we do sometimes end up talking about misguided moves to microservices, but that's just a thing, [obvs]].

It's *not* how to speed up the pace of the team's delivery. [agile rituals]

It's *not* how to have hard conversations with engineers on their team.

*It's about how to work with the crazy, conflicting, impossible requests from their stakeholders.*

I want to be carefully clear: these are engineers who love solving business problems.

They don't *want* to "just do engineering" -- they want to make an impact.

But, they find themselves struggling to do so.

And their relationship with their stakeholders feels central to that struggle.

# Is this a sidebar? Later?
Before we go any further, what exactly is a "stakeholder"?

For this book, we'll define a stakeholder as:

/Someone the engineers work with, who has the authority to decide what is valuable for the business./

That doesn't necessarily mean that person directly tells the engineers "what to do". It *does* mean they play a central role in determining *priorities* for the engineers. And usually, it means they decide, after the fact, if what the engineers did *worked* -- aka actually solved a proble for the business.

That person could be a product manager.

It could be the CEO.

It could be the head of sales.

It could be the lead user for an internal, tech-enabled operation.

It could even be other engineers, for teams that build tooling or a platform for the  broader eng team.[fn:: I *love* working on DevPlats teams, but I must also note that doing so means having stakeholders who will question every single move you make. "You're unpacking the builds *on* the hosts? Why would you do that? That seems kind of dumb."]

It isn't always one person! Often engineers work with multiple people who each believe they should be able to decide what is valuable for the business. Sadly, those people don't always agree with each other[fn:: It's super common that, instead of hashing it out directly, such rival stakeholders will each separately try to convince the engineers to work on their personal priorities.]

# Now, I firmly believe that most stakeholders well and truly want the overall business to succeed.

*** I've Looked At +Love+ Engineering From Both Sides Now

All appearances to the contrary, I strongly believe that the engineering team and their stakeholders have the same underlying goal:

*They both want the business to succeed.*

They find themselves in conflict when they have different understandings of how to achieve that goal.

This sounds like an absurdly simple truism, but I've spoken with plenty of engineers *and* plenty of stakeholders over the years who would struggle to believe it.

On the engineering side, given how frustrating some stakeholders are to work with, and how deeply unwilling those stakeholders seem to be to *listen*, engineers will decide that those stakeholders are either pursuing some kind of narrow, political self-interest, or are trying to get an obvious immediate win and then move on, leaving a painful mess behind them for the future. Engineers will also assume that their stakeholders are well, *dumb* -- that they *can't* understand what needs to be done, in order to create valuable software for the business.

# that they simply can't or won't understand the issues that engineers are trying to share with them.

For the stakeholders, working with engineering teams can be such a nightmare of uncertainty and confusion, it can be very hard indeed for them to believe that those engineers are trying to solve any business problems whatsoever. Much of the time, the engineers speak in impenetrable techno-gibberish, and when they do briefly make sense, it's usually to announce that they've missed yet another delivery date. The median stakeholder experience is: they don't know what the engineers are doing; they can't get them to do what they want; and, when the team finally does deliver something, it doesn't work.

# The engineers seem to  want to talk about absurdly specific details, and complain about not having time to address some abstract notion of "good design".

I have a plan! A way to gradually bring engineers and their stakeholders into a *shared understanding* of what to do *and* how to do it -- such that each side sees the other as a true partner.

But we're going need to go fairly deep into all of:

 - Why engineering projects are so hard to manage

 - How value is actually created for a business

 - What is going on inside the heads of your stakeholders

As step one in that deep dive, we're going to explore the experience of both the engineering team *and* their stakeholders, on a "typical" project.

This will help us identify key things each side is *trying* to do -- which is a crucial step in finding better ways to work together.

** The Engineer's Lament
*The Saga of the New Patient Onboarding App, Version I*
*** Estimates & Commitments & Tigers & Bears, Oh My

One day in late January, your PM comes back from a meeting with the executive team. They look down at their notes, and say:

"They want us to commit to a Q4 launch for the new patient onboarding app. Can we make that work?"

# [fn:: If you'ret thinking, "Hang on Dan, why is this PM talking about 'your' team? Isn't the PM *on* the team, too?" Yes yes yes! I agree 1000%. But, sadly, not every engineer gets to work in such an environment.]

Q4 is 9 months away.[fn:: Or.. is it? Does "Q4" mean October 1st or December 31st? Or some vague point in between? Surely Dan, you've never led a project which blew up because of ambiguity over exactly what "Q4" meant, right? Right?! Sigh.]

The "new patient onboarding app" is, currently, a pile of dreams and half-built Figma wireframes.

# The Patient Experience team has been somewhat hastily assembled, and it's not clear if Rich--the only experienced mobile engineer on the team--is going to be a good fit.

# And that newly-hired mobile engineer has been overheard muttering about forking React native, has been overheard muttering about forking React native, so you're pretty spooked. keeps muttering about how you need to throw away all your front-end code and start over, and you don't know if they're crazy or your code is. to your horror.

A key step in the planned onboarding flow depends on obtaining data from the patients' insurance companies... but insurance data teams seem to move at a slug-like speed designed to defeat urgency at all costs.

How, exactly, are you supposed to answer this question?

You could demand detailed requirements before committing, but that runs the risk of turning the effort into one big waterfall project, with the attendant vanishingly low likelihood of success. Or, you could just cross your fingers and offer a hopeful "Yes?", but that *also* has a nasty habit of blowing up.

It often feels like there isn't any good answer -- merely a half dozen equally terrible bad ones.

*** Thinking Would Be Great, If Only We Had Any Time To Do So

The team cautiously agrees that a Q4 launch looks possible, and dives into the work of building the new patient onboarding app.

But every other day features the CEO popping into the team's Slack channel, fresh off a conversation with customers, asking for an engineer to dig into some new issue, or demanding an update on progress, or wanting to relitigate the prioritization scheme.[fn::Or asking for help with an enterprise sales call; or wanting to do a quick brainstorm on level of effort for some speculative future thing they just thought of last night; or asking their favorite engineer to read some extremely interesting and relevant article about {AI, Blockhain, <Insert Buzzword Here>}; or, or, or...]

If the team keeps on running around like chickens with their heads cut off, you're running a serious risk of missing your delivery target.

Unfortunately, the CEO aggressively pushes back when you suggest that they stay out of the team's hair.

"The engineers *need* to hear what customers are saying," they insist. "And," they continue, "*I* need to know that we're on track."

They then proceed to do the favorite thing of human beings everywhere: not change their behavior one little bit.

*** If Only "Make It Work" Was Just a Catchphrase From Project Runway

The team slowly drifts behind schedule, thanks in part to their struggle to carve out meaningful focus time.

But, somehow, they manage to keep slogging forward, and, by the middle of Q3, they're closing in on a usable version of the onboarding app.

But then, an engineer makes a horrifying discovery: over half the insurance companies you're working with don't even *have* the user id you've been planning on using for joins.

This discovery upends all your plans. There's absolutely no chance you'll be able to ship the new onboarding app to all customers in Q4.

You're going to have to either settle for a very limited release or back up and fundamentally redesign the planned onboarding flow.

You take a deep breath, and you and your product partner go talk this over with your CEO & Head of Sales.

It takes them a minute to understand what you're saying. Once they do, they both get  upset.

"That's unacceptable," the CEO says, tension making their voice tight. "You *committed* to launching in Q4."

"Marketing has already started the campaign," adds the head of sales.

"We've promised that revenue to the board for next year. You're just going to have to make it work."

You go away, a pit in your stomach. It looks like it's going to be engineering's fault. Again.

*** Those Who Fail To Learn From History Are Actually Most Of Us

As recriminations swirl after the delayed, semi-functional rollout of the new onboarding app, you sit down with some engineers to talk about what you could do differently in the future.

You all agree that the biggest challenge was having to work in the Data Ingestion pipeline.

That system is a terrifying pile of legacy code, developed by contractors in the early days of your company's history. It's written in a language you no longer use, has libraries that haven't been updated in years, and enjoys the test coverage of a pile of moldy tissue paper.

But when you try to bring this up, citing the years and years of accumulated tech debt, your PM deflects your concerns with a sigh. "I'm afraid we need to focus on business priorities right now," they say. "Especially since we're behind on revenue thanks to the missed launch date."

*** A Sad But Possibly Accurate Summary of the Engineering Experience
How, given the story above, can I suggest that the stakeholders "want the business to succeed"?

How can an engineering team possibly create real value for a business, if faced with:

 - Demands for commitments to long-term estimates

 - Constant interruptions with new requests

 - A refusal to engage in tradeoff discussions

 - An unwillingness to face looming technical problems

# Because they want the overall business to succeed, every stakeholders listed above deeply believes that, when they make a request of the engineering team, they are being *completely and totally reasonable*.

# And yet... *somehow*, engineers find themselves on the receiving end of a stream of requests that feel anything *but* reasonable, e.g.:

** The Stakeholder's Lament
*The Saga of the New Patient Onboarding App, Version II*
*** Why Does Making a Plan Require An Apocalyptic Fight?
You're the CEO. You're working backwards from a next funding round in 18 to 36 months.

You and your exec team have spent weeks and weeks developing revenue targets for next year, as part of an annual plan you'll be taking to your board. At the last board meeting, you were good and soundly beat up for not being aggressive enough -- the VC market has cooled, your lead investor reminded you firmly. You'll need to show some real traction, and soon.

Your exec team has settled on a suite of improvements to the patient experience as the best bet for helping the sales team win more deals.

But, of course, that depends on the product and engineering teams actually delivering what they promise.

As is always the case, they seem to be extremely reluctant to work with you -- instead of developing a plan and committing to it, they seem to want to fight over a hundred tiny details and force a negotiation on every one. No other team you work with is this unwilling to sign up to hit key targets for next year.

Unfortunately, most major projects that have involved engineering have dragged on well past their planned timelines. So it's not like you can just step back and trust them.

It can feel like there's no way to win.

*** Apparently I'm Supposed To Be The Buddha

As the work unfolds, any attempt you make to either understand what is going on, or to update the engineering team with key information from the field is met with patronizing lectures from the PM's or engineering leads about not "distracting" the team.

Given that engineering projects routinely go so dramatically off the rails that they plunge unrecoverably into the depths, it's extremely frustrating that you're constantly being pushed back.

You genuinely don't *want* to micromanage the team -- but you also can't feel like you're being responsible in doing your job if you're not tracking progress and updating goals over time.

Again, with the other functions, you get steady updates on progress against plan, and, whenever you have questions, it's straightforward to dig in.

E.g. when you came back from that conference last month, having personally met a half-dozen key customers, and wanted to talk out upcoming campaigns with the marketing team, they didn't say to you "Stop interfering! How can you be such a terrible person!"

But that seems to be what the engineers genuinely believe.

*** Surprise!

You like to think of yourself as a reasonable leader. You're *constantly* making hard tradeoff decisions. But you expect your teams to not *surprise* you.

In fact, that's how you think of a sort of contract between you and your teams.

You will work with them to understand what is possible, you'll then make the hard decisions about what to actually do, and then they'll execute.

Of course, you know that things change over time -- all you ask is that you don't get surprised at the worst possible moment.

So, when the engineers show up, just three months before you're expecting to launch, shuffle their feet, and announce that the whole planned launch is now impossible because of some technical issue they clearly should have identified earlier, you're very upset.

They have genuinely not left you with any alternatives, and given that they were the ones who were supposed to identify what was possible in the first place, you push back and insist they find *some* way to work around this technical issue.

*** Engineering Goals vs Business Goals

You have long since learned that, in working with engineers, you should expect them to constantly complain about not having enough time to work on "tech debt".

Because they don't seem to be able to explain this in any useful detail [except for some clearly absurd belief that quality code will somehow let them finish all work instantly], you've learned to manage those complaints as part of, well, managing the engineers' *feelings*.

You don't want them to be unhappy. But, staring at those revenue targets, and with your next board meeting looming, you genuinely don't have time right now to divert them from solving key business problems to make their systems more pleasant to work in.

# Even if their belief that this will let them go faster in the future was true, you don't have time for such investments right now.
** Solving For Both Requires Understanding In Depth

# You're Not Even Vaguely Alone In This

If this story sounds at all familiar, I have some bad news and some good news.

The bad news is that the difficulties in collaborating with stakeholders are, ultimately, due to *inherent* challenges in attempting to developing software that creates value for a business.

If some of that story above feels familiar, it's not because your stakeholder is somehow weak or foolish or limited.

It's because it's *genuinely hard for them to do their job*, when they're dependent on the creation of new software in order to success in that job.

If you've only ever *written* software, it can be hard to understand how deeply and painfully true this -- and we'll spend some real time in the next chapter digging into why.

Many of the worst dysfunctions that creep into the relationship between engineers and their business counterparts are, ultimately, due to the stakeholders trying to ovecome these inherent challenges -- but doing so in ways that are ultimately counterproductive.

For engineering, product and the rest of the business to work together to *create value* for the overall business, they need to develop a specific form of partnership -- one that requires a great deal of learning for engineering leaders *and* for their business counterparts.

The Good News is that, it is possible to work that way, to genuinely partner.

But step 1 will be understanding exactly where your stakeholders are coming from, and what they're trying to achieve.

The good news is that there *is* a way to build a very different form of partnership with stakeholders.
