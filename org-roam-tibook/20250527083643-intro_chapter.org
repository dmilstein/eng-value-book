:PROPERTIES:
:ID:       47FF75F6-17DB-4E36-950D-F7CFAFA950EA
:END:
#+title: Intro Chapter
#+filetags: :Chapter:
* Outline from ToC
** Stakeholders Scream About Features, the Team Screams About Tech Debt: The Joy of Engineering Leadership
# Statement of empathy, touching on a bunch of the human experience + potential failure modes.
** Why the "Tech Debt" Metaphor Has Become Limiting
# Sketch in the key problems (focus on "bad code", offers nothing positive to your product or stakeholder peers, don't go too deep on moral vs economic)
** A Better Way: Technical Investments
# Give the definition
** The Fundamental Cycle
# Basically just name each of these, will go deeper in later chapter.

# Emphasize that you do this over and over, deliberately starting with small scale, and gradually "levering up" to larger investments.
*** Find things engineers are *worried about*
*** Convert each into a statement of *potential value*
*** Select the highest value option, based on what is *currently known*
*** *Build visibility* into current state
# In a way which will show the improvement, if/when you make it
*** Identify a *small increment* that will improve things and/or create more visibility
*** Share visibility with stakeholders to *motivate investment*
*** Offer an *incremental option* to stakeholder, get buy-in
*** Do The Thing
*** Celebrate improvements via *story-telling*
*** Return to Step 1, with more *capital and trust*
** What If My Stakeholders Don't Care About Engineering?
** What If My Engineers Don't Care About the Business?
# Aka, what if my very senior engineer just wants to rewrite everything?
** What's Coming In the Rest of the Book


* Writing the Thing
** Stakeholders Scream About Features, the Team Screams About Tech Debt: The Joy of Engineering Leadership
# What does it mean to be an engineering leader?

# Fundamentally, it means being pulled in two different directions at once.

Stop me if you've heard this one before.

At this very moment, your stakeholders--the product team, executives at your company, operational users--are urgently demanding that your team deliver an ambitious set of *features*.

# absolutely as soon as possible.

# And, what's more, you're behind

Those stakeholders are certain that if the features aren't shipped *right this minute*, the business is going to suffer, and badly.

At the very same time, the engineers *on* your team are demanding that you carve out time, *now and not later*, to deal with a teetering pile of tech debt.

The engineers are equally certain that, if they don't have a chance to clean up some of the buggy, insecure, utterly inscrutable legacy code, the business is going to suffer, and badly.

So, what do you do?

First, I have some bad news.

# For all their hysterical urgency, the stakeholders are usually representing genuine needs of the business.

For all their hysterical urgency, the stakeholders are... not totally wrong.

# "are not totally wrong"?

# As you've moved up into engineering leadership, you've come to realize that
A lot of business opportunities *are* time-sensitve -- not having the new features shipped in time for a scheduled launch or an upcoming peak season will represent a big, visible missed opportunity.

# [One of the features of getting into leadership is often getting a clearer picture of those opportunities, *and* the expectations around them]

Except people in the business won't call it a "visible missed opportunity".

They'll call it a failure.

More specifically, since you're the engineering leader, they'll call it *your* failure (being in charge means failures are your fault! Like, that's literally and precisely what it means!).

You have the potential for failure hanging over you, all the time.

But, wait, I have *more* bad news.

The engineers who want to slow down and deal with tech debt... *also* aren't wrong.

If you simply race to build the features that stakeholders demand, you're going to end up with a system that fails in some very exciting way at the worst possible time.

Maybe it'll suffer a spectacular outage just as your peak season starts.

Or maybe you'll experience a painful security breach just as your sales team is trying to close that one extra security-conscious enterprise customer.

Or maybe the overall system will just become so difficult to safely change that the pace of delivery grinds to a halt (and your engineers lose all respect for you, and the very best ones start not deleting the recruiter emails they get every day).

All of those are *also* your (potential) failures.

# This doesn't even speak about the trust and respect of your engineers -- which you need to maintain to be effective.

# And of course, you can also feel the trust that your engineers have in you eroding over time, as they see you not use your authority to advocate for the crucial technical work.

So, again, what do you do?

# I have an answer.

** Um, Who Are You, Exactly?

Hi, my name is Dan.

For the last 30 years, I've worked in various combinations of engineering and product -- I love both discplines, and value both super highly.

I've worked as an senior IC engineer building and operating complex systems; I've led product at startups desperately trying to find traction; I've managed engineering teams ranging in size from 2 to 500.

Across it all, I constantly wrestled with this tradeoff between what was being explicitly asked for versus what engineers believed was important.

# were worried about.

I've tried a slew of things to manage that tradeoff -- many of which failed, some in interesting and instructive ways.

# works, first with a small group of engineers, and then, as I moved up in various organizations, across a much larger team.

# This book is sharing what I have learned.

# Fortunately, there's a way to approach this challenge so that, over time, you gradually bring those two sides together.

# so that all sides are *participating a collaborative discussion about how best to spend your team's time*.

Over time, I gradually found an approach that brings the two sides together, into a collaborative discussion about how best to spend the engineering team's time.

# Personally coached
# I've seen engineering leaders apply this approach to:
I've seen engineering leaders apply this approach to:

 - Visibly improve their systems

 - Build trust with their stakeholders

 - Create meaningful agency for their engineers

All while steering clear of the terrifying fire swamp of a ground-up rewrite.

I want to share that approach with you.

But...

# Where do we start?

# First, we all have to
The first step is to *stop talking about technical debt.*

** Why the "Tech Debt" Metaphor Has Become Limiting

I believe that, although "technical debt" started as a useful metaphor about economic tradeoffs, it has, over time, largely devolved into a shorthand for *"bad" code*.

As in, when engineers think, talk and argue about "tech debt", they're thinking, talking and arguing about the very worst, most horrifying code in their codebases.

There are two reasons why this causes problems.

First, by only thinking about *existing bad code*, the engineers miss a vast set of opportunties for improvements.

Over and over in my career, I've seen engineers propose and then deliver incredibly valuable work that involved writing *new code*.

And, pretty often that meant writing *more bad code* (of course, no one called it "bad" -- we called it "scrappy" or "pragmatic").

Those opportunities just don't come up much, when you start the conversation by talking about "technical debt".

# I could show you bash scripts that would make your eyes bleed, but that were just insanely valuable.

# E.g. the junior engineer who hacked something together over the weekend to log stack traces from failed deploys, or the senior engineer who bargained for enough time from their PM to jury-rig a hacky testing framework that stubbed out the entire OS layer, or the engineer who threw together a UI to allow members of the ops team to clean up failed shipments, so that the engineers could stop spending all their time executing SQL queries against production.

E.g. the junior engineer who hacked something together over the weekend to log stack traces from failed deploys... which saved hours and hours of fruitless debugging and ultimately sped up deploys enormously.

Or the senior engineer who bargained for enough time from their PM to jury-rig a hacky testing framework that stubbed out the entire OS layer... which allowed the team to finally write tests to cover the weird network errors that kept tripping them up.

Or the engineer who threw together a UI to allow members of the ops team to clean up failed shipments, so that the engineers could stop spending all their time executing SQL queries against production.

Note, carefully: *none of the above efforts "retired tech debt"*.

The problems addressed -- unreliable deploys, blind spots in testing, repetitive operational work -- aren't the kinds of things most engineers think of when you're talking about "tech debt".

The above efforts helped deal with *gaps* that the engineers were painfully aware of.

Crucially, those gaps represent *genuine problems* for their businesses.

In later chapters, we'll explore how such gaps aren't just *annoying* to the engineers, they are in fact *expensive* for the business.

And thus, dealing with such problems is a chance to *create value* for the business.

Unfortunately, engineers rarely identify and advocate for such forms of value, when they're thinking about "tech debt".

So, that's the first reason to not use the metaphor -- because it tends to focus on too narrow a kind of potential improvement.

The second is a bit more subtle, and has to do with the conversations you'll get into with your stakeholders.

*** Lo, Let Us See This From the Stakeholder's Perspective

Any stakeholder who has worked with engineers for any length of time knows about "tech debt".

When the team asks for time to deal with "tech debt", the stakeholder hears a request to give up something they actively want (the requested features), for something that will create *no visible value* (reducing the amount of "bad code" in the system).

The stakeholder does not, in general, experience it as an economic argument where they'll get something they understand as valuable in return for what they're giving up.

This is in part because some engineers have strong emotions about how bad the technical debt is (again, because they're talking about "bad code")

They'll sometimes feel like *they shouldn't have to explain why fixing bad code is valuable*.

# Maybe, combined with frustrations over not being able to do what they perceive as important..

They might say or feel:

Why should they have to *prove themselves* to the stakeholders?

Shouldn't they be *trusted* to know what good code is? Isn't that their job?

When engineers fall back on their technical authority like this, they are essentially saying:

/Bad code is bad because it is bad, and getting rid of it is an inherently good thing, and you have to just trust us./

A student of human nature would say that they are framing this as *moral decision* -- a question of right vs wrong.

Unfortunately, that kind of moral framing is a reliably terrible starting point for conversations with stakeholders.

Both sides will usually exit such conversations feeling very frustrated.

# TODO open this up a bit, play out the convo, even if it gets to a one-time agreement, it's a concession, etc.

# See my talk [[https://www.youtube.com/watch?v=78qzrXIPn5Q][How to Run a 5 Whys (With Humans, Not Robots)]] for more on the moral vs economic mindsets (and also for a somewhat dramatically hilarious mustache I briefly adopted in late 2012).

The engineers, even if they extract some amount of time to work on the issues they're worried about, will feel like their stakeholders don't care about the horrible code they have to work with, nor the looming problems getting worse with every commit.

The stakeholders, even if most of the engineering capacity is still devoted to the features they're want, will experience the engineers as just completely unaware of the pressing needs of the business, and of the very real costs of slowing down. They will be girding themselves to push back the next time the engineers make their urgent demands in service of an abstract notion of "quality".

By starting with tech debt, with its underpinnings of "good" vs "bad" code, you're just inviting the moral frame and the resulting oppositional arguments.

The poor engineering leader will find themselves caught between the two sides, making both unhappy.

So, if talking about "tech debt" causes problems, what's the alternative?

** A Better Way: Technical Investments

Instead of technical debt, I believe engineering leaders should challenge their teams to talk about *technical investments*, which we'll define as:

/Something that the engineers believe is *valuable for the business*, but that *no one is asking for*./

That focuses on the genuine problem: a *mismatch in understanding* between the engineers and their business or product counterparts, about what is potentially valuable for the business.

This assumes that, at heart, both the engineers and the stakeholders *want to create value for the business*.

They just have different information and beliefs about how best to do so.

To bring the two sides together, engineering leaders must develop a deep understanding of how engineers can create value for a business.

We'll spend a great deal of part 1 (The Technical Investment Cycle) talking about this.

Engineering leaders also have to be willing to *educate* their business peers -- and those business peers have to be willing to listen.

# Eh, this isn't quite right.

That requires a steady building of trust, which we'll talk about in part 2 - Scaling Up.

** The Fundamental Cycle
# Basically just name each of these, will go deeper in later chapter.

# Emphasize that you do this over and over, deliberately starting with small scale, and gradually "levering up" to larger investments.
*** Find things engineers are *worried about*
*** Convert each into a statement of *potential value*
*** Select the highest value option, based on what is *currently known*
*** *Build visibility* into current state
# In a way which will show the improvement, if/when you make it
*** Identify a *small increment* that will improve things and/or create more visibility
*** Share visibility with stakeholders to *motivate investment*
*** Offer an *incremental option* to stakeholder, get buy-in
*** Do The Thing
*** Celebrate improvements via *story-telling*
*** Return to Step 1, with more *capital and trust*
** What If My Stakeholders Don't Care About Engineering?
But wait, I can hear many of you saying, I don't know what delusional hippies you've worked with Dan, but you've apparently never met my stakeholders. They just don't care about quality at all, and there's no way I can make them.

First off, I'm not going to lie -- there *are* some business leaders who are just profoundly unwilling to face tradeoffs.

Such people usually have a vision of leadership as extracting "commitments", and then holding people "accountable", and nothing can change that.

However, the vast majority actually want the business to succeed -- and, if the success of the business depends on the value of technical assets and practices, then they



** What If My Engineers Don't Care About the Business?
# Aka, what if my very senior engineer just wants to rewrite everything?
** What's Coming In the Rest of the Book
