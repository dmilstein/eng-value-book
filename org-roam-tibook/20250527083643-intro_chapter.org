:PROPERTIES:
:ID:       47FF75F6-17DB-4E36-950D-F7CFAFA950EA
:END:
#+title: Intro Chapter
#+filetags: :Chapter:
* Outline from ToC
** Stakeholders Scream About Features, the Team Screams About Tech Debt: The Joy of Engineering Leadership
# Statement of empathy, touching on a bunch of the human experience + potential failure modes.
** Why the "Tech Debt" Metaphor Has Become Limiting
# Sketch in the key problems (focus on "bad code", offers nothing positive to your product or stakeholder peers, don't go too deep on moral vs economic)
** A Better Way: Technical Investments
# Give the definition
** What If My Stakeholders Don't Care About Engineering?
** What If My Engineers Don't Care About the Business?
# Aka, what if my very senior engineer just wants to rewrite everything?
** What's Coming In the Rest of the Book


* Writing the Thing
** Stakeholders Scream About Features, the Team Screams About Tech Debt: The Joy of Engineering Leadership
# What does it mean to be an engineering leader?

# Fundamentally, it means being pulled in two different directions at once.

Stop me if you've heard this one before.

At this very moment, your stakeholders--the product team, executives at your company, operational users--are urgently demanding that your team deliver an ambitious set of *features*.

# absolutely as soon as possible.

# And, what's more, you're behind

Those stakeholders are certain that if the features aren't shipped *right this minute*, the business is going to suffer, and badly.

At the very same time, the engineers *on* your team are demanding that you carve out time, *now and not later*, to deal with a teetering pile of tech debt.

The engineers are equally certain that, if they don't have a chance to clean up some of the buggy, insecure, utterly inscrutable legacy code, the business is going to suffer, and badly.

So, what do you do?

First, I have some bad news.

# For all their hysterical urgency, the stakeholders are usually representing genuine needs of the business.

For all their hysterical urgency, the stakeholders are... not totally wrong.

# "are not totally wrong"?

# As you've moved up into engineering leadership, you've come to realize that
A lot of business opportunities *are* time-sensitve -- not having the new features shipped in time for a scheduled launch or an upcoming peak season will represent a big, visible missed opportunity.

# [One of the features of getting into leadership is often getting a clearer picture of those opportunities, *and* the expectations around them]

Except people in the business won't call it a "visible missed opportunity".

They'll call it a failure.

More specifically, since you're the engineering leader, they'll call it *your* failure (being in charge means failures are your fault! Like, that's literally and precisely what it means!).

You have the potential for failure hanging over you, all the time.

But, wait, I have *more* bad news.

The engineers who want to slow down and deal with tech debt... *also* aren't wrong.

If you simply race to build the features that stakeholders demand, you're going to end up with a system that fails in some very exciting way at the worst possible time.

Maybe it'll suffer a spectacular outage just as your peak season starts.

Or maybe you'll experience a painful security breach just as your sales team is trying to close that one extra security-conscious enterprise customer.

Or maybe the overall system will just become so difficult to safely change that the pace of delivery grinds to a halt (and your engineers lose all respect for you, and the very best ones start not deleting the recruiter emails they get every day).

All of those are *also* your (potential) failures.

# This doesn't even speak about the trust and respect of your engineers -- which you need to maintain to be effective.

# And of course, you can also feel the trust that your engineers have in you eroding over time, as they see you not use your authority to advocate for the crucial technical work.

So, again, what do you do?

# I have an answer.

** Um, Who Are You, Exactly?

Hi, my name is Dan.

For the last 30 years, I've worked in various combinations of engineering and product -- I love both discplines, and value both super highly.

I've worked as an senior IC engineer building and operating complex systems; I've led product at startups desperately trying to find traction; I've managed engineering teams ranging in size from 2 to 500.

Across it all, I constantly wrestled with this tradeoff between what was being explicitly asked for versus what engineers believed was important.

# were worried about.

I've tried a slew of things to manage that tradeoff -- many of which failed, some in interesting and instructive ways.

# works, first with a small group of engineers, and then, as I moved up in various organizations, across a much larger team.

# This book is sharing what I have learned.

# Fortunately, there's a way to approach this challenge so that, over time, you gradually bring those two sides together.

# so that all sides are *participating a collaborative discussion about how best to spend your team's time*.

Over time, I gradually found an approach that brings the two sides together, into a collaborative discussion about how best to spend the engineering team's time.

# Personally coached
# I've seen engineering leaders apply this approach to:
I've seen engineering leaders apply this approach to:

 - Visibly improve their systems

 - Build trust with their stakeholders

 - Create meaningful agency for their engineers

All while steering clear of the terrifying fire swamp of a ground-up rewrite.

I want to share that approach with you.

But...

# Where do we start?

# First, we all have to
The first step is to *stop talking about technical debt.*

** Avoid the "Tech Debt" Metaphor

I believe that, although "technical debt" started as a useful metaphor about economic tradeoffs, it has, over time, devolved into a shorthand for *bad code*.

As in, when engineers think, talk and argue about "tech debt", they're thinking, talking and arguing about the very worst, most horrifying code in their codebases.

Why is that a problem?

Starting with a focus on "bad code" is problematic for *both* of the two key conversations engineering leaders need to have:

First, the conversation with the engineers about what work to prioritize (aka, a conversation where the enginering leader is *identifying* potentially valuable work)

Second, the conversation with stakeholders about why that work is worth doing (aka, a conversation where the engineering leader is *advocating* for the work).

Let's take each of those in turn, and see why "bad code" causes problems.

*** "Tech Debt" Considered Harmful, Part I - With Engineers

First, when engineers use the frame of "tech debt" to talk about bad code, they are *necessarily* thinking about the *existing* code.

They are therefore *not* thinking about opportunities to write *new* code, to cover gaps in operations or reduce risks of various kinds.

But such opportunities often represent some of *the most valuable work the engineers could be doing*.

Below are some example I've seen, where engineers identified incredibly valuable work that involved writing new code (and, often, new, scrappy code aka... *new* bad code):

# Footnote: I could show you bash scripts that would make your eyes bleed, but that were just insanely valuable.

A junior engineer who hacked something together to log stack traces from failed deploys... which saved hours and hours of fruitless debugging and ultimately sped up deploys enormously.

A senior engineer who bargained for enough time from their PM to jury-rig a hacky testing framework that stubbed out the entire OS layer... which allowed the team to finally write tests to cover the weird network errors that kept tripping them up.

An engineer who threw together a UI to allow members of the ops team to clean up failed shipments, so that the engineers could stop spending all their time executing SQL queries against production.

None of the above efforts "retired tech debt", by any stretch of the imagination.

The problems addressed -- unreliable deploys, blind spots in testing, repetitive operational work -- aren't the kinds of things most engineers think of when you start with "tech debt".

But, engineering leaders should *want* their teams to identify and prioritize such opportunities -- because they are so incredibly valuable.

So, that's the first reason to not use the metaphor -- it focuses on far too narrow a set of potential improvements.

The second is a bit more subtle, and has to do with the conversation with stakeholders.

*** "Tech Debt" Considered Harmful, Part II - With Stakeholders

Any stakeholder who has worked with engineers for any length of time knows about "tech debt".

When an engineering leader advocates for time to deal with "tech debt", the stakeholder hears a request to give up something they actively want (the requested features), for something that will create *no visible value* ("better code").

Because tech debt has become a way to talk about "bad code", most engineering leaders *will not try to make that value more visible*.

Instead, they'll feel like, by citing "tech debt", they've *done their job* -- everyone knows that tech debt is bad, and you have to spend some time on it, and now is that time.

But pushing stakeholders to give up time in order to work on something which is totally invisible to them has very negative long-term consequences.

It means you're not able to enter into a *collaborative economic discussion*, about what's best for the business -- which is how the best decisions are going to be made.

Instead, when the engineers fall back on their technical authority, they are essentially saying:

/Bad code is bad *because* it is bad, and getting rid of it is an inherently good thing, and you have to just trust me./

A student of human nature would say that they are framing this as *moral decision* -- a question of right vs wrong.

Unfortunately, that kind of moral framing is a reliably terrible starting point for conversations with stakeholders.

It usually leads to engineers getting extremely frustrated, ala:

"Why should I have to *prove* that fixing bad code is important? Shouldn't I be *trusted* to know what high quality code is? Isn't that my *job*?"

But it *also* leads to stakeholders getting extremely frustrated, ala:

"Do the engineers have *any idea* how this business actually works? Am I supposed to care about some abstract notion of code quality when we're hemorrhaging customers? We can worry about code quality *later*, I'm definitely pushing back right now."

This is how you end up with bitterly fought over, narrowly-scoped "tech debt projects"... that don't end up having much impact, but do leave both sides seething with resentment.

The engineering leader finds themselves caught between the two sides, making both unhappy.

Iif talking about "tech debt" causes problems, what's the alternative? Are engineers and stakeholders just doomed to not get along?

Nope! There is, in fact, a better way.

** Talk Instead About "Technical Investments"

Instead of technical debt, engineering leaders can ask their teams *and* stakeholders talk about *technical investments*, which are defined as:

/Work the engineers believe is *valuable for the business*, but that *no one is asking for*./

That puts the focus on the genuine problem: a *mismatch in understanding* between the engineers and their stakeholders, about what is *potentially valuable* for the business.

At heart, the vast majority of both engineers and stakeholders want to create value for the business.

They just have different information and beliefs about how best to do so.

Many engineers try to resolve this gap by *explaining* the potential value: "You see, when code has bad 'coupling', a change in one place can impact many other places, which is a drag on development. This is why we should spend a week refactoring."

Although there's a good instinct in this -- bringing the stakeholders into a shared understanding with the engineers about what is valuable -- it has one crucial flaw:

It requires the stakeholders to take the entire statement of value on faith.

There is nothing they can *see*, that shows them things are "bad", before the investment is made.

And there will be nothing they can *see*, after, that shows them things have gotten "better".

Given that lack of visibility, it's hardly surprising that stakeholders, confronted with such a choice, often feel like they are giving something up and getting nothing in return.

One of the core theses of this book is that engineering leaders can *build visibility* into potential value.

It is *massively cheaper* to build such visibility than it is to make the full investment.

Once there is visibility, the engineers and their stakeholders can look at it, together, and operate from a shared understanding of the reality of the business.

If the engineering team can then offer disciplined, incremental steps to gradually (and visibly) improve things (including improving the depth and reach of the visibility), the can build real trust with stakeholders over time.

That then allows them to "lever up" from small initial investments to, sometimes, very  major, transformative investments.

The best way to do that is not as a one-off project an engineering leader puts all their authority on the line for (ugh, I've done that so many times, and never seen great results), but instead, a series of *tech investment cycles*, each of which generates visibility and options.

All in partnership, not opposition, with stakeholders.

** What If My Stakeholders Don't Care About Engineering?

But wait, I can hear many of you saying, I don't know what delusional hippies you've worked with Dan, but you've apparently never met my stakeholders.

They absolutely refuse to talk about *anything* except the features they are demanding. I've tried to get them to understand technical challenges or limitations and they just reject that discussion outright.

This can be a real challenge.

However, in my experience the vast majority of cases of stakeholders genuinely want the business to succeed -- and they see a core part of their job as *making good decisions* in service of that goal.

If you follow the game plan in this book, you'll be offering your stakeholders something they will love -- decisions where they will have a combination of meaningful *visibility* with meaningful *control*.

And you'll do so in a way which steadily builds trust and rapport.

# Move the below into a footnote
Look, I'm not going to lie: there *are* business leaders who will only ever of their relationship with engineering as one of extracting "commitments", and then holding the engineers "accountable". They don't want to "worry about the details".

Unfortunately for them, the whole commitments / accountability / shame thing is an *objectively bad interface* with an engineering team.

If you're stuck in this situation, and have no luck gradually building trust and moving to a collaborative relationship... I dunno, you might need to find a new job before some chickens come home to roost?


** What If My Engineers Don't Care About the Business?

This overall approach does assume that the engineers care about "creating value for the business".

The vast majority of engineers are, in my experience, profoundly motivated to *solve problems*.

The rest of this book is going to explore a slew of ways to point engineers at the fascinating, profoundly challenging problem of *creating as much value for a business as possible*.

# Footnote the below

Again, I'm not going to lie. There are some engineers who truly don't care about the businesses they work in, and only want to pad their resume with cutting-edge technologies or impress other engineers with the clever complexity of the code they write.

Maybe don't hire those engineers? That's the subject of another book.

** A Few Tech Investment Cycles

At a recent job, the engineers had grown incredibly frustrated by deploying the legacy app to production.

The deploy process was a hodgepodge of different jobs, some of which ran automatically, some of which engineers had to step in to kick off after the previous one completed.

It had everyone's favorite feature of a deploy pipeline: slow from-scratch rebuilds of containers; a giant suite of poorly-maintained Selenium tests that were flaky and unreliable; jobs that failed with cryptic error messages that required contacting the most senior engineer and/or sacrificing a goat to resolve.

The #deploy-sucks Slack channel was a constant firestorm of angry emojis.

First, a key fact: this situation is not just "annoying" for the engineers.

It's hideously *expensive* for the business

As the marvelous book Accelerate makes clear, the ability for engineers to make frequent, fast, safe deploys is *extremely valuable* for a software business.

Thus, improving deploy could have been *very* valuable.

But... what was the product team's experience?

What could they *observe*?

Well, development felt slow. But, development *always* felt slow. And there were plenty of other suspects.

Also, engineers were complaining about deploys. Kind of a lot.

But, most product teams experience engineers as *always* complaining about deploys. So this didn't really stand out.

What's more, the engineers, when asked, *weren't* able to offer any specific ideas for what to improve -- it was such a mess, it wasn't clear where to start.

One engineer kept saying "We just need to rewrite all our Selenium tests to use WebRobot", but that was clearly an apocalyptic amount of work.

And so the situation was stuck.

Then, one afternoon, while waiting for a deploy to finish, a very bright and very frustrated engineer threw together a spreadsheet (she called it "Deploy Misery") and asked all the engineers on the team to just *manually* log their deploy times in it. They would fill in one column when they started the first in the series of jobs, and then another when the final one finished up.

This was a technical investment!

It's the cheapest kind -- an "on-the-side" project, where the engineers don't specifically advocate with the product team (later, we'll talk about The Various Scopes of Investment, when to use which and how).

How cheap?

Setting up that spreadsheet took the engineer about 10 minutes (counting the *extremely vigorous* email she sent to all of engineering).

The engineers on the team were plenty motivated to track their deploys... and had plenty of time to do so, while waiting for the tests to finally pass.

That spreadsheet *created visibility*. Just a bit to start.

After a few short weeks, the engineering manager brought the spreadsheet to the product team.

Together, they looked at how long it was taking to get changes out to production -- and discovered that, on occasion, there were so many repeated failures, it took more than a day to get something out.

At that point, it wasn't hard for the engineering manager to convince the product team to carve out a week for one engineer to instrument the key stages of the deploy process, so they could better understand what the hell was going on (this is what I call the "Ticket" scope).

Thus, a few weeks later, they were looking together at a clearer picture of both overall trends, times and failure rates in various internal stages.

The flaky Selenium tests proved to be the worst culprit, and unfortunately, there was no simple fix.

The engineering manager made a case for a carefully time-boxed, few week-long effort by a couple of engineers, to inventory all the tests, come up with options, share those back and then execute on one (this is "Project" scope).

The PM and engineering manager worked together to find a time to do this -- they both knew a big chunk of work on the legacy part of the app was coming, and were *both* motivated to get deploy improvements in before it landed.

When the engineers did this work, they collaborated with the product team to understand which features they most wanted to retain coverage over, which areas were okay to orphan for now, etc. They ended up deleting a big set of tests which were no long needed. They then moved the remaining flaky-but-sometimes-valuable ones off the main deploy pipeline (so it only ran for a small subset of deploys that touched certain parts of the product).

That immediately (and visibly!) made almost all deploys much faster.

The engineers, the engineering manager and the product team could all *see* that improvement on the graphs of average deploy time that were now being generated.

For a few more months the team kept steadily improving the deploy process, in parallel with a great deal of feature work. Sometimes it was just a ticket here or there, sometimes an engineer would drop off the main sprint for a week or even a month and just focus on some specific challenge.

Eventually, the deploys got fast and reliable enough that, by common agreement, the pace of investment in this specific area slowed.

Then, something marvelous happened: the site suffered a major outage!

In the course of resolving it, the team was able to rapidly release a series of changes, first to diagnose and then to fix the underlying issue.

When the engineering manager wrote up the post-mortem notes, she took time to call out how the fast, reliable deploys had saved their collective butts.

She then made a point of sharing that story with both the product team and executive leadership.

Which eventually led to the company's (highly non-technical!) CEO beaming with pride at a company All Hands as that engineering manager told *the entire company* that story, and then walked them all through some very impressive-looking graphs of improved deploy times.

I don't know if you know this, but CEO's really like impressive-looking graphs. We'll talk more about this in "Leverage the Dark Art of "Metrics" In Your Favor".

We'l also talk about using the power of storytelling to help your stakeolders experience these as "their" wins -- which is what the engineering manager above did.

As above, the very best way to run tech investments is to do them *iteratively*:

 1- Spend a *small increment* of effort to build *some* visibility

 2- Share that visibility with your stakeholders

 3- Together, prioritize an incremental investment to either visibly improve *or* to build the next increment of visibility

 4- Return to step 1


# There are two separate challenges with bringing stakeholders along:

#  - Helping them *understand* the potential value

#  - Making it possible for them to *see* the potential value

# That second one is profoundly powerful -- it allows you to convert from the "just trust us" moral argument to a collaborative review of a *shared view of reality*.

# Exploring that defintion leads to the fundamental "technical investment cycle":

#  - Collect a set of issues the engineers are worried about or frustrated by

#  - For each, turn it into a statement of potential value

# (it's a repeated cycle, not a one-time thing -- companies are constantly deciding how and what to next invest in, it's not a one-time "cleaning up of technical debt" or "paying off a loan")
# Thus, a profoundly powerful trick is to start by *building visibility* -- something that the stakeholders and engineers can both *see* in the same way.

# Usually, it's several orders of magnitude cheaper to build such visibility, than it is to execute on the actual work.

To bring the two sides together, engineering leaders must develop a deep understanding of how engineers can create value for a business.

We'll spend a great deal of part 1 (The Technical Investment Cycle) talking about the marriage of visibility and value.

Engineering leaders also have to be willing to *educate* their business peers -- and those business peers have to be willing to listen.

# Eh, this isn't quite right.

That requires a steady building of trust, which we'll talk about in part 2 - Scaling Up.
