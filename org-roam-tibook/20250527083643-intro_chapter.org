:PROPERTIES:
:ID:       47FF75F6-17DB-4E36-950D-F7CFAFA950EA
:END:
#+title: Intro Chapter
#+filetags: :Chapter:
* Outline from ToC
** Stakeholders Scream About Features, the Team Screams About Tech Debt: The Joy of Engineering Leadership
# Statement of empathy, touching on a bunch of the human experience + potential failure modes.
** Why the "Tech Debt" Metaphor Has Become Limiting
# Sketch in the key problems (focus on "bad code", offers nothing positive to your product or stakeholder peers, don't go too deep on moral vs economic)
** A Better Way: Technical Investments
# Give the definition
** The Fundamental Cycle
# Basically just name each of these, will go deeper in later chapter.

# Emphasize that you do this over and over, deliberately starting with small scale, and gradually "levering up" to larger investments.
*** Find things engineers are *worried about*
*** Convert each into a statement of *potential value*
*** Select the highest value option, based on what is *currently known*
*** *Build visibility* into current state
# In a way which will show the improvement, if/when you make it
*** Identify a *small increment* that will improve things and/or create more visibility
*** Share visibility with stakeholders to *motivate investment*
*** Offer an *incremental option* to stakeholder, get buy-in
*** Do The Thing
*** Celebrate improvements via *story-telling*
*** Return to Step 1, with more *capital and trust*
** What If My Stakeholders Don't Care About Engineering?
** What If My Engineers Don't Care About the Business?
# Aka, what if my very senior engineer just wants to rewrite everything?
** What's Coming In the Rest of the Book


* Writing the Thing
** Stakeholders Scream About Features, the Team Screams About Tech Debt: The Joy of Engineering Leadership
# What does it mean to be an engineering leader?

# Fundamentally, it means being pulled in two different directions at once.

Stop me if you've heard this one before.

At this very moment, your stakeholders--the product team, executives at your company, operational users--are urgently demanding that your team deliver an ambitious set of *features*.

# absolutely as soon as possible.

# And, what's more, you're behind

Those stakeholders are certain that if the features aren't shipped right this minute, the business is going to suffer, and badly.

At the very same time, the engineers *on* your team are demanding that you carve out time, *now and not later*, to deal with a teetering pile of tech debt.

The engineers are equally certain that, if they don't have a chance to clean up some of the buggy, insecure, utterly inscrutable legacy code, the business is going to suffer, and badly.

So, what do you do?

First, I have some bad news.

# For all their hysterical urgency, the stakeholders are usually representing genuine needs of the business.

For all their hysterical urgency, the stakeholders are... not totally wrong.

# "are not totally wrong"?

# Moving up into engineering leadership, you've come to realize that
A lot of business opportunities *are* time-sensitve -- not having the new features shipped in time for a scheduled launch or an upcoming peak season will represent a big, visible missed opportunity.

# [One of the features of getting into leadership is often getting a clearer picture of those opportunities, *and* the expectations around them]

Except people in the business don't call it a "visible missed opportunity".

They call it a failure.

More specifically, since you're the engineering leader, they call it *your* failure (being in charge means failures are your fault! Like, that's literally and precisely what it means!).

You have the potential for failure hanging over you, all the time.

But, wait, I have *more* bad news.

The engineers who want to slow down and deal with tech debt... *also* aren't wrong.

If you simply race to build the features that stakeholders demand, you're going to end up with a system that fails in some very exciting way at the worst possible time:

Maybe it'll suffer a spectacular outage just as your peak season starts.

Or maybe you'll experience a painfully public security breach just as your trying to close that one extra security-conscious enterprise customer.

Or maybe the overall system will just become so difficult to safely change that the pace of delivery grinds to a halt (and your engineers lose all respect for you, and the some of the best ones start not deleting all of the random recruiter emails they get every day).

All of those are *also* your (potential) failures.

# This doesn't even speak about the trust and respect of your engineers -- which you need to maintain to be effective.

# And of course, you can also feel the trust that your engineers have in you eroding over time, as they see you not use your authority to advocate for the crucial technical work.

So, again, what do you do?

I have an answer.

** Um, Who Are You, Exactly?

Hi, my name is Dan.

For the last 30 years, I've worked in various combinations of engineering and product -- I love both discplines, and value both super highly.

I've worked as an IC engineer building and operating complex systems; I've led product at startups desperately trying to find traction; I've managed engineering teams ranging in size from 2 to 500.

Across it all, I constantly wrestled with this tradeoff between what was being explicitly asked for versus what engineers wanted to do.

# were worried about.

I've tried a slew of things to manage that tradeoff -- many of which failed, some in interesting and instructive ways.

# works, first with a small group of engineers, and then, as I moved up in various organizations, across a much larger team.

# This book is sharing what I have learned.

# Fortunately, there's a way to approach this challenge so that, over time, you gradually bring those two sides together.

# so that all sides are *participating a collaborative discussion about how best to spend your team's time*.

Over time, I gradually found a way work on that tradeoff that brings all sides into a collaborative discussion about how best to spend the engineering team's time.

# Personally coached
# I've seen engineering leaders apply this approach to:
Engineering leaders applying this approach have been able to:

 - Visibly improve their systems...

 - While building trust with their stakeholders...

 - And creating meaningful agency for their engineers...

 - All while steering clear of the terrifying fire swamp of a ground-up rewrite.

I want to share that approach with you.

But...

The first step is to *stop talking about technical debt.*

** Why the "Tech Debt" Metaphor Has Become Limiting
** A Better Way: Technical Investments
** The Fundamental Cycle
# Basically just name each of these, will go deeper in later chapter.

# Emphasize that you do this over and over, deliberately starting with small scale, and gradually "levering up" to larger investments.
*** Find things engineers are *worried about*
*** Convert each into a statement of *potential value*
*** Select the highest value option, based on what is *currently known*
*** *Build visibility* into current state
# In a way which will show the improvement, if/when you make it
*** Identify a *small increment* that will improve things and/or create more visibility
*** Share visibility with stakeholders to *motivate investment*
*** Offer an *incremental option* to stakeholder, get buy-in
*** Do The Thing
*** Celebrate improvements via *story-telling*
*** Return to Step 1, with more *capital and trust*
** What If My Stakeholders Don't Care About Engineering?
** What If My Engineers Don't Care About the Business?
# Aka, what if my very senior engineer just wants to rewrite everything?
** What's Coming In the Rest of the Book
