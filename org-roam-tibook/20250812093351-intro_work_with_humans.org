:PROPERTIES:
:ID:       F6A8995D-D0A2-458B-AB62-181284DEF1A1
:END:
#+title: Intro - Getting Unstuck
#+filetags: :Chapter:
* Introduction: The Joys and Pains of Working With Humans
** Introduction

It is a truth universally acknowledged, that a person in possession of a career in software, must be extremely frustrated with an Important Person at their job.

# [deal with, handle, act on]

In this book, I'm going to share a set of ideas on how to face that frustration---and *not* by simply giving up hope. Ideas for moving from trapped inaction to positive, productive action. Ideas for persuading your very own Important Person to *change their behavior*. Ideas for *getting unstuck*.

I'm not going to claim that applying these ideas is *easy*. If that were true, well, pretty much no one would ever be frustrated with their bosses, peers or stakeholders.

But I do believe it's *possible*---and far more often than people realize. It's possible to build trust and rapport with even very challenging bosses, peers and stakeholders. It's possible to lean on that trust and rapport to draw those challenging people into productive collaborations. It's possible to focus those collaborative relationships on, among other things, gradually improving how you work together. Over time, it's possible to develop a surprisingly deep sense of trust and partnership, with people you once could only see as frustrating impediments.

Of course, making that kind of change takes real work and real time.

I believe the effort is worth it, for two reasons.

First, being stuck is, well, *kind of a terrible way to live*. Spending your working hours in a state of powerless resentment can be dangerous to your personality as a whole. The lack of agency can start to seep into other parts of your life. Your mind might drift into a habit of endlessly rehearsing your frustrations. Your sleep might start to break down. You might discover you're having trouble staying fully present with family or friends.

Human beings are not great at compartmentalizing a feeling of lack of agency.

Second, I'll encourage you to make the effort to get unstuck because, believe it or not, it can be *fun*. Other humans are endlessly fascinating! Getting unstuck means finding ways to work *with* those other humans, instead of desperately trying to work *around* them. Getting unstuck allows your to live in a place of curiosity, and to engage your own sense of playful, creative problem-solving. Which is way, way more fun than explaining to your mirror, once again, why your boss is crazy and wrong.[fn:: Though it is maybe nice that your mirror always agrees with you?]

** The State of Being Stuck

# Defining & Illustrating The State of Being Stuck

*Being Stuck*: /Feeling like it's impossible to truly succeed at your job, due to a frustrating pattern of interaction with an Important Person./

Let's unpack that definition.

First, to Be Stuck, you must feel truly worried about *succeeding at your job*. It's not enough to simply be irritated with a colleague, even if that irritation is quite intense ("If I have to hear George lecture us all about The Customer one more time, so help me god"). The internal emotional dial only truly goes up to eleven if you feel like you're powerlessly drifting towards a failure (and, in particular, a failure for which you will be blamed).

Second, to Be Stuck, there has to be an Important Person involved. That's what puts you into the state of powerlessness, of low agency. In fact, we'll *define* an Important Person as: someone who has some form of influence or control over how you do your job. That could of course be your boss. But it could also be a stakeholder who has significant influence over what your team builds, or a key peer with whom you have to collaborate to build that thing.

# An Important Person is a) someone you have to work with in order to succeed at your job, and b) someone who you can't just *tell* to change their behavior.

# Some important person is *acting* like a jerk, it's not just that they *are* a jerk.

Finally, Being Stuck means there is a problematic *pattern of interaction*. In other words, we focus on *behavior*, not just on *personality*. Your COO may be brusque and patronizing, and that may legitimately frustrate the heck out of you.[fn:: Ask my friends about how much I, personally, enjoy being patronized!] But those unpleasant traits are not, in and of themselves, enough to cause you to Be Stuck. If, however, the COO's dismissive rudeness causes them to shut down planning sessions without first understanding the risks the team is trying to surface, that's another story altogether.

Why this pedantic distinction between "personality" and "patterns of interaction"?

Focusing on patterns of interaction makes your concerns far more *actionable*. It sets you up to make a request of your Important Person to change their *behavior*, initially in some small way. Although that's still a plenty tricky request to make, it's way, way, *way* easier than asking them to *change their personality*. You're going to have much better luck asking your COO, "Could we maybe try out a new approach to our planning sessions?", than asking them, "Could we maybe try out you're not being such a dick all the time?"[fn:: Even if you're sorely, sorely tempted to try the latter, just once.]

** Three Totally Made Up Examples

To bring this definition to life, below are three /completely fictional/ examples.[fn:: No examples in this book are based on any actual stakeholders I have ever worked with and who might be reading this footnote, nor on any behavior I myself demonstrated when in a position of authority, because, luckily, I Am Perfect And Have No Flaws, okay let's go.]

*The Agent of Chaos*

Deanna is an engineering lead at an early-stage startup. Her CEO, Karim, has developed an unpleasant habit of, once every other week or so, interrupting daily standup and excitedly telling the team to drop everything and start working on a new product idea he's just dreamed up.

As a /completely unsurprising/ result of the constant context switching, it's been months since Deanna's team has gotten anything meaningful done. Every time they randomly switch gears, she can feel their startup's cash runway burning to nothingness. They'll never win if they can't commit and focus, but she can't seem to get Karim to change his behavior.

Then, one afternoon, Karim takes Deana aside and informs her that he's worried about team velocity. He tells her he wants her to ask the team to start working longer hours, immediately. Before she can fully process this, he pats her on the shoulder and strides off. Later, Deanna finds herself pacing angrily around her office, muttering a somewhat shocking torrent of swear words under her breath.

# Deanna is very stuck with Karim.

# If your stakeholder keeps on blowing up your backlog with new ideas, and then blames you for the resulting snail's pace of delivery, then that indeed qualifies as Being Stuck.

# The Getting Unstuck Game Plan is for you!

*The Prioritization Destroyer*

Maria is a product manager at a thriving B2B SaaS company. Her job would be truly lovely if it wasn't for her VP of Sales... /Geoff/[fn:: Or, as her team calls him after a few drinks, "The Geoffster"]. A week doesn't go by without Geoff engaging in underhanded politicking to force the team to work on one-off features for his pet customers. Naturally, these features are completely unrelated to the strategic priorities Maria is supposed to be pushing forward.

# Unfortunately, Maria's CEO, Theo, seems to be deeply uncomfortable with open conflict, so Geoff suffers no consequences from this behavior, and Maria has to handle his relentless pressure all on her own.

Despite her best efforts, Maria's team is somehow spending half their time on useless, Geoff-driven one-offs, while their main product strategy slowly drifts off course like a doomed ship headed for an iceberg. Maria has started to dread the moment she opens her laptop at the start of her work day.

# If your stakeholder relentlessly undercuts your attempts at disciplined prioritization, but still blames you when you struggle to ship a new product, you are good and thoroughly Stuck.

# The Getting Unstuck Game Plan is for you!

# Maria is feeling completely and totally stuck with Geoff[fn:: and honestly, with Theo, too, because argh.].

*The Bottleneck To End All Bottlenecks*

Alistair is an engineering manager at AccuraClaim, a business that provides claims processing services to the insurance industry. Alistair's team is great, his product manager has become a close friend, he really likes working with the messy, gritty details of claims data.

There's just one problem.

Max Hartswell, the engineering director over Alistair's team, has apparently never met a decision he felt comfortable letting someone else make.

Alistair, Alistair's PM, all the adjacent tech leads and half the designers spend all their working hours trying to track Max down and get him to sign off on some decision he announced, weeks ago, he wanted to review "just one more time."

Then, one evening at the company happy hour, Alistair finds himself awkwardly chatting with Max. The engineering director takes a sip from his hard seltzer. Alistair tries to think of something to say. Then, out of nowhere, Max airily tells Alistair that he's "a little disappointed" that Alistair's team isn't stepping up and showing more independence and ownership. "It's like you're just *waiting* to be told what to do," he says. Alistair nearly chokes on his beer. After managing to extricate himself from the conversation, Alistair realizes he might have to talk with his wife about whether or not he can stay at this job.

# If your stakeholder claims to want to empower their teams, but absolutely kneecaps anyone who shows the slightest bit of independence, man, you are totally Stuck.

I could go on!

I suspect you could, too!

Humans in positions of power have a truly marvelous ability to come up with new ways to be frustrating and crazy. Leo Tolstoy spoke to this in his classic guide to agile software development, /Anna Karenina/: "Happy teams are all alike, every unhappy team is unhappy in their own way."[fn:: It's possible I just spent half an hour trying to find a *third* famous opening line I could mangle in this introduction. Maybe, "I write this sitting in the break room sink." Or maybe, "We were somewhere around Barstow when the OKR's began to take hold." Or perhaps, "Gregor From Ops awoke one morning from uneasy dreams to find himself transformed on Zoom into a gigantic insect."]

Let's talk about what you can do. How you can Get Unstuck.

** The Getting Unstuck Game Plan

We're going to develop a step-by-step game plan for gradually drawing your Important Person, whom we'll term your "stakeholder", into a process of collaborative problem-solving.

The first step is to identify a key, long-term outcome your stakeholder cares deeply about achieving. You'll also identify how your team can, if things go well, play a role in achieving that outcome.

Note: this long-term outcome is *not*, in general, what your stakeholder talks about day to day.

Many (probably *most*) stakeholders convert that long-term outcome into a series of tasks or projects, and then only ever talk to a team about one particular task or project. Often, a stakeholder's frustrating behavior is, in their mind, the only way to get that task done, and therefore the only way to accomplish the long-term outcome. To find a new way to work together, you have to get beneath what they're asking for, and understand what they're ultimately trying to achieve. Once you do so, you can propose a different, less frustrating way of working together, that will move you *both* towards the long-term outcome.

Aligning on a long-term outcome is a powerful place to start. But it's not enough by itself, for a somewhat simple reason:

Your stakeholder is a human being.

Like all human beings, their behavior is not driven merely by a rational desire to achieve a long-term outcome. We are none of us robots. If you want to persuade your stakeholder to make a change of some kind, you're going to need to understand them as a human being.

Thus, the second step in the game plan is to develop a picture of your stakeholder's key underlying *emotions*. You will do your best to:

 - Understand their *frustrations*, so you can propose a change that smoothes some of those frustrations away

 - Understand what it is that makes them *feel good*, so you can offer them more of those delightful experiences

 - Understand their *fears*, so that you can help them face the worries that keep them up at night

 - Understand their *dreams*, so that you can offer a way to move towards a long-term aspirational vision

Once you've done so, the third step is to put all of that together into a *compelling offer* -- a proposal to adjust how you work together, initially in a small way. You'll deliver this offer in a carefully structured manner, that will make it as easy as possible for your stakeholder to take the risk of saying yes.

Once you get a commitment to try something new, you'll then work hard to ensure the initial period of change *feels* like a win for your stakeholder.

Once you get through the first period of change, you can:

 - Update your picture of your stakeholder's goals and feelings

 - Decide which of your concerns to address next

 - Propose a next incremental adjustment

Over time, you can gradually build deeper and deeper trust and rapport, allowing you to propose ever larger changes in how you work together.

In later chapters of the book, we'll share a wealth of tactics for going through each of these steps, which we will name:

 1. Identify a Strategic Outcome

 2. Mine For Feelings

 3. Make A Compelling Offer

That said, there is one approach, one skill, that is so foundationally important that we're going to touch on it here. A skill that you'll end up using, over and over, across all of the steps.

** Tactical Empathy: The Ultimate Superpower

You may have noticed that just about every step in the game plan requires your stakeholder to *talk to you*.

More specifically, to talk to you about things which they may usually be quite reluctant to share: their long-term goals, their fears, their frustrations, their dreams and desires.

You will need them to *trust* you.

Fortunately, there's a set of skills that help people to trust you. Even difficult, powerful, important people.

Following the lead of Chris Voss and Raz Tahl, from their excellent book, Never Split the Difference, we'll name this set of skills *tactical empathy*.

These skills offer a way of listening to and connecting with other humans, that make those humans feel deeply understood. A means to draw out emotions and validate concerns. Ways to unblock conversations, to search for and find shared goals and values.

And crucially: the skills of tactical empathy can be *learned*.

Being able to help other people trust you is not simply an inherent part of a personality, accessible only to smooth-talking extroverts.

I've seen dozens and dozens of people level up on their influence and impact by putting conscious effort into mastering the skills of tactical empathy.

I've seen people do so who consider themselves extroverts, I've seen people do so who have to painfully force themselves to talk to strangers at parties.

For just about all of those people, I've seen that work make their jobs more rewarding and their days easier.

All that said, I'm not going to lie: the skills of tactical empathy take time and effort to learn.

If you want to break through to better collaborative relationships with your boss, peers and stakeholders, I urge you to take the time to practice these skills.

# A sort of skeleton key for working with humans.

** My Origin Story: The Mini-Tab & The Microsoft C Compiler

Who, you might be asking, is this Dan person?

Let me tell you a story.

# XXX Move this all back into past tense.

It's the summer of 1991. I've just arrived home from my sophmore year in college.

As I catch up with my parents, I tell them I'm still liking my computer science major, and that, in fact, I'm looking forward to spending some time that summer coding. I'm planning on teaching myself C, and am casting about for a project to work on.

My mother perks up -- she might have something for me. She works as an Assistant Dean at a local community college, where she runs their adult and continuing education programs. She tells me that, each year, late in the summer, her division spends a couple of unpleasant weeks preparing the "Mini-Tab"--an annual catalog of courses.

The Mini-Tab prep involves a great deal of rote work to extract and format course metadata from the descriptions submitted by instructors.

She says that if I could write them a program to help, she could maybe even pay me.

I had a copy of Kernighan & Ritchie. I had Microsoft's C Compiler installed on my DOS computer. I had the confidence of youth.

I said sure.

# I wrote her a C program to transcribe their input document into a table of courses, each tagged with a course code, and each having the schedule, title and instructor cleanly pulled out.

Today I would write that program in an afternoon using python and a handful of regular expressions. But I had never heard of regex's at the time, and my long love affair with python was years in the future. Writing the program took me a couple of weeks. The input data wasn't consistently in the format she'd described to me, so I kept having to slowly figure out the actual patterns, and then add special cases to handle each one. My long love affair with automated testing was *also* many years in the future, so I kept on breaking what I had written, over and over.

In the end, the program finally worked, and my mother handed me a check for $100.

I was *delighted*. This thing I loved doing, hacking on a computer to get it do what I wanted, could actually turn into money?

That was nice enough. But then a few months later, something wonderful happened.

# But I was *also* delighted to realize that I had saved my mother and her colleagues hours of extremely frustrating work.

When I came home for Thanksiving break, my mother shared excited appreciations from the people on her team, about how my little program had saved them *days* of frustrating work.

That felt, honestly, *amazing* -- I had, just by typing strange words and symbols into a little monochrome yellow and black screen, somehow created something that made the real world, well, a little bit better. That *helped* people.

Her division at the community college ended up using that program for years and years. They very much got their money's worth for the $100 they'd spent.

But, so did I.

That little job started me on the path of creating software that solved problems for people, in the real world. That path has turned into both a career, and also a great deal of meaningful work.

I've written software to help people lay out and prepare textbooks for print production; to understand how marketing campaigns are performing; to fill a warehouse with goods and then to pick, pack and ship those goods back out again; to collaborate on scientific research during drug discovery; to help support English language learner students in public schools.

In so doing, I've spent a great deal of (very rewarding!) time gradually learning how to structure complex software to solve problems in the real world.

# That has included everything from the day-to-day tactics of how to write clean, understandable, testable code; to how to decompose large programs into pieces that can be understood and worked on independently; to a thousand details about how to represent and store data; to how to operate systems in the harsh reality of production.

But I've also learned something else.

I've learned that all those wonderful tactics for writing complex, powerful programs aren't enough, by themselves.

There are a slew of challenges, some running through how businesses function, some through how human beings function, that must be faced, to identify problems worth solving and then gradually hone in on valuable solutions.

I, like just about all programmers, learned this the hard way.  I watched programs I had spent months writing get thrown away the moment they were finished, because the problem I had been asked to solve no longer mattered to anyone. I found myself mired in painful stasis and frustration thanks to constant churn and changing requirements.

# I watched in mounting frustration, as work ground to a halt due to delays between teams.

# XXX add a third to the above

# My journey into solving business problems took me from engineering into product management, and then back into engineering.

My journey into solving problems for people took me from engineering into product management, and then back into engineering, and then to various forms of leadership over both disciplines.

# I've worked as a principal engineer building and operating complex systems; I've led product at startups desperately trying to find traction; I've managed engineering teams ranging in size from 2 to 500.

This book is an attempt to share some of the most important lessons I've learned about how to work with humans to solve meaningful problems.

* Scraps
** Defining Stakeholders
And their relationship with their stakeholders feels central to that struggle.

# Is this a sidebar? Later?
Before we go any further, what exactly is a "stakeholder"?

For this book, we'll define a stakeholder as:

/Someone the engineers work with, who has the authority to decide what is valuable for the business./

That doesn't necessarily mean that person directly tells the engineers "what to do". It *does* mean they play a central role in determining *priorities* for the engineers. And usually, it means they decide, after the fact, if what the engineers did *worked* -- aka actually solved a proble for the business.

That person could be a product manager.

It could be the CEO.

It could be the head of sales.

It could be the lead user for an internal, tech-enabled operation.

It could even be other engineers, for teams that build tooling or a platform for the  broader eng team.[fn:: I *love* working on DevPlats teams, but I must also note that doing so means having stakeholders who will question every single move you make. "You're unpacking the builds *on* the hosts? Why would you do that? That seems kind of dumb."]

It isn't always one person! Often engineers work with multiple people who each believe they should be able to decide what is valuable for the business. Sadly, those people don't always agree with each other[fn:: It's super common that, instead of hashing it out directly, such rival stakeholders will each separately try to convince the engineers to work on their personal priorities.]

# Now, I firmly believe that most stakeholders well and truly want the overall business to succeed.
** Engineering Would Be So Easy Without Those Pesky Humans
One of my favorite things to do is to sit down for lunch or coffee with some bright engineering leader who is eagerly engaged in learning everything they can about the job.

# XXX Fix this intro graph

# One of my favorite things to do is to sit down for lunch or coffee with one of the extremely bright engineers who I was lucky enough to work with early in their careers.

I love hearing about what they've learned, the company they've landed at, the new responsibilities they're taking on -- be that as managers, executives, or moving up the technical track.

At these lunches or coffees, there's one topic that comes up over and over.

# over cups of coffee or sandwiches or pho

It's *not* how to structure complex softare.

It's *not* how to speed up the pace of the team's delivery. [agile rituals]

It's *not* how to have hard conversations with engineers on their team.

*It's about how to handle the crazy, conflicting, impossible requests from the humans they work with.*

I want to be carefully clear: these are engineers who love solving business problems.

They don't *want* to "just do engineering" -- they want to make an impact.

But, they find themselves struggling to do so.

And the frustratingly broken patterns of interactions with the humans around them seem central to that struggle.

** The Three Core Problems

As fun as it is to write software to solve problems I personally experience (ask me about my .emacs file sometime), it's ultimately been more rewarding--both financially and personally--to write software to solve problems for other people.

# With a few exceptions[fn:: Ask me some time about the system I may have built for myself in 2005 to bet on baseball games], almost all the software I've written to solve problems in the real world has been developed working *with other people*.

This has led to my spending a great deal of time working within various businesses[fn:: Though I should say that, personally, some of the joy of doing open source work has been getting to solve meaningful problems *without* being embedded in a business].

Therefore, I've spent many, many years trying to understand how to solve *business problems*. How to ensure that the work I do, the software I build, ultimately helps the business succeed -- which generally means solving problems that matter for *someone* (though, see "Ethical Choices", later). Which I continue to find profoundly motivating and rewarding.

In the course of those years, I've run into three major challenges, each of which initially completely defeated me, and each of which I gradually learned how to tackle.
** I've Looked At +Love+ Engineering From Both Sides Now

All appearances to the contrary, I strongly believe that the engineers and those other humans have the same underlying goal:

*They both want the business to succeed.*

They find themselves in conflict when they have different understandings of how to achieve that goal.

This sounds like an absurdly simple truism, but I've spoken with plenty of engineers *and* plenty of stakeholders over the years who would struggle to believe it.

On the engineering side, given how frustrating some stakeholders are to work with, and how deeply unwilling those stakeholders seem to be to *listen*, engineers will decide that those stakeholders are either pursuing some kind of narrow, political self-interest, or are trying to get an obvious immediate win and then move on, leaving a painful mess behind them for the future. Engineers will also assume that their stakeholders are well, *dumb* -- that they *can't* understand what needs to be done, in order to create valuable software for the business.

# that they simply can't or won't understand the issues that engineers are trying to share with them.

For the stakeholders, working with engineering teams can be such a nightmare of uncertainty and confusion, it can be very hard indeed for them to believe that those engineers are trying to solve any business problems whatsoever. Much of the time, the engineers speak in impenetrable techno-gibberish, and when they do briefly make sense, it's usually to announce that they've missed yet another delivery date. The median stakeholder experience is: they don't know what the engineers are doing; they can't get them to do what they want; and, when the team finally does deliver something, it doesn't work.

# The engineers seem to  want to talk about absurdly specific details, and complain about not having time to address some abstract notion of "good design".

I have a plan! A way to gradually bring engineers and their stakeholders into a *shared understanding* of what to do *and* how to do it -- such that each side sees the other as a true partner.

Doing so requires understanding both better ways to work together *and* how to persuade stakeholders to try those ways out.
** The Pains of Broken Interactions

# XXX Maybe try this all to "you"

# XXX Maybe open with the promise -- "I want to help you work in a better way with the people around you. Even if the really difficult ones, who are clearly unwilling to change. Even if those difficult ones are, like, your boss."

# Find a way to say it other than broken interaction patterns

Few things are more frustrating than being stuck in a broken interaction pattern with the people you work with.

For someone working as a software engineer or a product manager that could be:

 - A CEO who interrupts standup every other day with "important" new information, constantly randomizing the work of the team and killing any hope of velocity

 - A key sales leader who relentlessly advocates for their pet feature ideas and resists aligning around customer problems

 - A weak product manager who mindlessly ferries requests from stakeholders to the team without ever pushing back or setting a meaningful prioritization scheme

 - A close-minded tech lead who refuses to let the PM talk directly with the engineers on the team, and insists that all conversations go through them

 - A senior engineering or product leader who claims to want to create ownership and autonomy for their teams, but insists on staying "in the loop" for so many decisions, the team has to wait for approvals before taking even the tiniest of steps

Furthermore, in such situations, it's overwhelmingly the case that the human in question, be they the CEO, sales leader, engineer or PM, *super doesn't want to change their own behavior*.

This isn't a surprise!

If there's one thing that unifies basically all humans (myself very much included, sadly) it's that we are *extremely* reluctant to change the way we behave.

/I mean, why should *we* have to change!? Our behavior is clearly only natural and right, given the very special difficulties we personally are facing! There's literally nothing else we even *could* do!/

Unfortunately, this means that, when an engineer or PM approaches one of these humans, and proposes changing the way they work together... that engineer or PM will generally be met with a form of resistance that falls somewhere between slightly stiff and absolutely ferocious.

# What is said engineering or product leader supposed to do?

This can be a tough situation to be in.

The product/engineering team could create enormous value for the business... if they had a meaningful problem to solve, time to focus, and partners willing and able to make key decisions as they went.

If, on the other hand, the engineers and/or their product partners are stuck in one of these broken interaction patterns, it can feel like they're watching, powerless, as an inevitable disaster unfolds in slow motion. A disaster which, even though they saw it coming, and did everything they could to prevent it, will likely be blamed on them.

At its worst, this can be an incredibly exhausting way to work and live. I once got stuck in such a bad place, and experienced such pervasive stress and anxiety, that my wife and I still refer to it as "The Dark Time".

Fortunately, I believe that there is often a way out.

A means for engineers or PM's to gradually persuade the humans around them to work with them in a new way.

I want to share a game plan for making this kind of change -- for fixing broken interaction patterns.

This game plan takes full account of the complexities of human nature, as well as the challenges of working within a business that is trying to accomplish some complex, ambitious goal.

It focuses on starting with what you have within your control today, uses that to earn early wins, and then gradually builds trust and alignment to enable more significant change.

Running the game plan may require practicing some new skills -- using "tactical empathy" to deeply understand the hopes and fears of a stakeholder, and also learning how to creatively design increments of change.

I'm very excited to share this with you.

But, before we dig into that game plan, you might be wondering, "Um, Dan, who are you, exactly?"

Good point! I'm glad you asked!
** Making Ethical Choices

A final word, before we dive into the game plan.

I will, here in the wilds of 2025, enourage you to take some time to think about the problems you agree to help solve. All our work has an ethical component, whether we realize that or not.

Perhaps also, take a moment to feel that sense of wonder -- I'm still astonished that, by typing a bunch of arcane characters into a glowing box, I can affect people's actual lives.

# I adored role playing games as a kid -- and I loved playing wizards and spellcasters. I think the idea of being able to affect the real world by saying *just the right thing*, by learning some arcane incantation, was just a form of power that stirred dreams in my heart. How amazing is it that I've found a life where I can do just that.
