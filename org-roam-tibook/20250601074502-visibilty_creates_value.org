:PROPERTIES:
:ID:       D901A4C9-885B-4F42-8B8D-3595616857E8
:END:
#+title: The Extraordinary Value of Knowing What To Do Next
#+filetags: :Chapter:
#+SELECT_TAGS
#+OPTIONS: tags:nil
* The Extraordinary Value of Knowing What To Do Next :export:
** Welcome To Wayfair, Here Is Your Pile of Legacy Code

Early in 2018, I working as an Engineering Director at Wayfair, the home goods ecommerce company.

I had been promoted partway through 2017 to lead across all of Supply Chain Engineering, a sprawling set of teams that supported transportation, warehousing, ocean shipping, and other operational concerns.

Then, one day in January, a senior engineer from the customer-facing "Storefront" team approached me.

He told me that he had been tasked with leading a major, across-all-engineering project called "Order Sharding".

He informed me that SCE was going to have to commit significant engineering capacity to adapt our systems to a new, sharded order database structure his team was putting in place.

He handed me a long document filled with technical details on the sharding scheme.

As I looked it over, my heart sank.

Now, I very much knew *why* someone had prioritized an effort to shard the order database.

Wayfair's main order database had barely survived the 2017 "peak" season -- aka the five days after Thanksgiving, when merchants offer heavy discounts, and customers spend massive amounts online.

There was no way Wayfair's order database would be able to get through another peak unscathed, unless we did *something*.

There was just one tiny problem with the Order Sharding plan I was looking at.

There was no way on earth we could make it work in SCE.

To try to adapt our systems to work with this sharding scheme, we'd have to drop everything and spend the next several years rewriting all of our systems essentialy from scratch.[fn:: For those curious about the technical details, the Storefront plan assumed we could shard by *customer* -- because in their world, the vast majority of queries started with one specific customer. However, in the SCE world, customer orders were constantly mixed and remixed across warehouses, shipping legs and final delivery routes. Essentially all our queries needed to look across abitrary sets of customers, completely defeating any sort of by-customer sharding approach.]

"Um, let me think about this," I told that senior engineer. He then went off to tell some other team about his new exciting mandate.

** Some Technical Context
We'll talk below about what we ended up doing, but as context / so you can play the "What would I do?" game, here are some of the relevant technical details:

One of the key interfaces between Storefront (where customers browsed the site, collected items in their carts and then eventually hit "Buy") and Supply Chain (which dealt with fulfillment), was the moment when a customer *committed* to an order.

In the Storefront systems, it went from being a "basket" (Storefront-speak for items in a cart), to becoming an actual order, with a relevant row in the database table creatively named ~tblOrder~.

On a normal day, baskets turned into orders a hundred times per minute or so. During the most intense times during peak that went up to 10-20,000 times/minute or more -- 100-200x load.

Now ~tblOrder~, among *many other things*, functioned as an implicit queue between domains: dozens of different supply chain and fulfillment operations were just relentlessly querying that table for various slices of new or recent data.

Some of them later updated those rows, and there was all sort of downstream work that came looping back into that central database in some form, driving up load further.

# To say the system exhibited some coupling would be the most astonishing of understatements.

The SQLServer experts on the team had optimized a bunch of queries as best they could, but, as is so often the case with the shared central DB, it wasn't fully clear where load was coming from, or what to do about it. And on the quiet, non-peak days, it was essentially impossible to predict where bottlenecks would occur *during* peak.

Oh, and by the way, it was pretty deeply non-trivial to generate and handle synthetic load -- in no small part because many of our systems operated on the real world: issuing directives to associates working in warehouses, reserving space on trucks, scheduling delivery of items. It was unclear how to even think about running synthetic load through those systems, without, again, first rewriting them to a pretty significant degree.

Given the above, what would you do?

What initial increments might you map out?

How might you frame something that you could sell to stakeholders?

** The Pinch Tests

After that senior engineer dropped the bomb of Order Sharding in my lap and left, I first spent some quality time panicking.

Then, I did what I often do to soothe myself.

I read a book.

In this case, I (re-)read The Art of Capacity Planning, by John Allspaw.

In talking about how they had handled load challenges at Etsy, he mentioned that they were able to determine a certain kind of limit by focusing larger and larger amounts of production load to one of a bank of (stateless) servers, and seeing when it fell over.

As I read that, I was super jealous -- in supply chain, we had a *stateful* system, with data flowing through it, not a bank of horizontally scaled stateless front-end servers.

But, man oh man, how much I wished we could somehow determine our limits *in production*.

Then, as I was biking home from work, I had an idea.

The next day, I grabbed Ben Clark, who was Wayfair's Chief Architect at the time. I excitedly shared the idea: what if we thought of the order flow as a *hose*, going from Storefront to Supply Chain?

Maybe we could find a way to "pinch" the hose off for a few hours, to temporarily prevent any of the orders from flowing through. Then, once we had built up enough load, we could release it all at once, and all the downstream systems would get a chance to determine their load limits.

We could then prioritize work to address actual problems in actual production, and verify that our production DB could handle actual laod.

Ben got it immediately.

And so the "Pinch Tests" were born.





# Within the next day, two important things happened.

# That afternoon, in a meeting with the product leadership within supply chain, I attempted to explain to *why* Wayfair eng had committed to this project.

# I explained how we were currently running all orders through a single giant table in a single giant database.

# I explained how the overall "post-order" systems had hit some scary moments in the recent peak season.

# And further that breaking that database up into separate shards would allow for horizontal scaling--.

# I caught myself, and said, "We shouldn't be calling it Order Sharding, we should be calling it Order *Scaling*".

# It's *extremely* useful to push for the discipline of naming projects after the desired *value* or outcome, instead of the details of the implementation. Among other things, that ensures you talk at least once about the outcome the engineers are trying to unlock.

# One of the PM's asked: what are the current limits on scaling?

# And I said "Huh. I don't really know." (see, this is why it's so useful to push for this discipline). We did know that the overall system had gotten sluggish and stuck at a bunch of points in the most recent season -- which could lead to delays in order fulfillment (breaking the promise of two-day delivery), or even causing the overall orders database to slow down, which could back up into problems for people shopping on the site.



* Scraps
** What Would Bertha Say?

What would our Economically Rational Investor, Bertha, say about Wayfair's overall company value in this moment?

Well, Bertha, being rational, knows that sometimes, companies find themselves stuck with a technical architecture that impedes their ability to grow.

Such companies usually find *some* way to address such limitations, but until they do, the misaligned architecture can be a drag on creating happy, repeat customers, and thus on incresaing profits.

As she went to come up with a specific estimate, Bertha would been pretty unhappy to hear that the Wayfair engineering team didn't even have a *plan* for how we could improve our systems... short of spending multiple years on a giant rewrite[fn:: Just FYI, Bertha marks her future estimate of your profits down a *lot* if you tell her you're starting a multiyear rewrite].

Given that, we could say that simply *coming up* with workable, potentially viable plan, would increase Bertha's estimate of the company's future profits, and therefore, would increase the company value.

Going from "we have no idea how to do this", to "we have a way that might work", directly creates value.

In fact, in this case, we can bring that to life, with some numbers.

Wayfair's market cap at the time was [$4 billion dollars]. However, the price the of stock was determined by investors in the public market... who didn't know much in the way of specifics of our internal technical set up.

Bertha, with her added information from inside the company, would discount that some.

Let's say that Bertha estimates that given the evidence of scalability challenges, and the lack of any plan, she's going to revise her estimate of profits over the next 5 years *down* by 5% (which represents both lost orders and also factors in a lower rate of people recommending Wayfair to friends, becoming repeat customers, etc).

That 5% shift down represents a difference of *$200 million dollars* in company value ($4B * 5%).

If we could somehow come up with a half-decent plan, that a rational investor would think has even a 50/50 chance of working, we could increase company value by *$100 million dollars.*

I have not worked on many projects that have a greater return than that.

Again, this isn't some weird fantasy -- this is how actual company value *works*.

If we just ignored these growing scalability problems, it was going to have very real impacts on the business, and those impacts would eventually show up in quarterly filings, and investors would punish the stock.

Asking what Bertha would think allows us to make fine-grained decisions, *today*, that gets ahead of those quarterly filings.

** Why Did Stakeholders Not Know and Care?

I've framed it in a way that makes the business value clear.

But that's not how it presented in the moment.

Engineering knew we were sitting on a ticking time bomb, but that stakeholders weren't asking for us to dig in and fix it.

Why not?

First off, stakeholders essentially *never* ask for feature of "The site doesn't explode in fiery wreck", because *they don't think they have to*.

Unless you can show them a very clear picture of where the current limits are, they are reluctant to divert attention.

Second, the flow of orders sat *between* every domain in supply chain. So any one stakeholder thought it was "someone else's" problem, why would they prioritize "their" engineering team working on it?

These are very common features of technical investment opportunities.

* Outline
** It's a real problem -- the previous seasons peak had suffered outages, and it was growing fast
Bertha, the rational investor would knock something off the stock price based on her rational concerns that we'd piss off a bunch of customers next year. And that could represent (many) millions of dollars in overall market cap.

** I was explaining it to stakeholders (always explain), when I realized, as I spoke, that the name was wrong.
We had named it after the technical approach, not the underlying business value.

Order Scaling

** I then went on a brief warpath in the CTO staff meeting to rebrand it as Order Scaling.

** Literally the first time I got my head clear to talk about the technical implications, we all realized this was insane
The were modeling it on having sharded customers, but orders were, by design, completely mixed as they entered SCE.

Dozens of different operations depended on the implicit queue in the database (later things move to explicit queues, but at the time, there was a job that took completed "baskets" from customers and dropped them into the single giant orders table, and then everything sprung into action.

** but, zomg, it was a very very real problem

** Stakeholders weren't asking for "Please don't have the site crash"... because they didn't think they had to. And we didn't have any way to tell them what the current limits were -- it was an incredibly complex web of systems.

** What would you do? Stop and think about it.

** Wayfair had a real problem but didn't know what to do next.

** Then, I was reading Allspaw, was jealous

** Had inspiration

** Told Ben Clark (who managed the senior engineer who was leading Order Sharing), who immediately got it

** He wrangled stakeholders, t
* From my notebook <2025-06-01 Sun>

Call out that Revenue != Value -- mabe start with this, and name "value" as "what is your company worth". What is it's stock price? What would an investor value it at?

Illustrated with:

 - Customer survey or gathering of feedback (esp if it makes extremely clear what to do, maybe with either stalled deals or high churn rates)

 - Profiling a big distributed systems (esp if customer complaints are driven by slowness, in the face of key deadlines, and they're giving up and just using spreadsheets)

 - Acquiring a data set (or, if I turn this into a story, maybe it's having researched an alternative data store or way to implement indexing for the database that will remove the bottleneck)

Each step creates value because it allows you to understand the *next* valuable step. This is how technical investments often work.

Note: don't lead with economic theory with stakeholders up front (again, note my failures). Get them addicted to decision making and gradually educate them on the key parts of the system

Some kind of metaphor about how it's not a planned drive across the country with a good map, where you hit some minor snags, and have to, like, go to a different hotel or go through Minneapolis instead of Milwaukee.

Rather, it's like trying to find a route across a massive jungle to a set of mountains, just visible in the distance, in an undiscovered country (sigh, colonialism, sigh) (or is it to the far side of the mountains)

There will be valleys hidden from sight right now, that might contain deep canyons you can't across, there might be rivers that run precisely where you want to go, and can save days and days of time.

Every day, the leader might send someone up to the highest nearby tree or hill, and survey, to see what they have learned.

They might fundamentally change their course as they go -- they might end up going a fundamentally different route than initially planned, they might even give up and find another way to get to the far side.

Every day is interwoven progress and learning, one drives the other. The take some actions to fill in the map, and others to make progress (which allows them to fill in more of the map).

Software projects are much better understand as explorations with a flexible long-term goal than as a planned itinerary through a mostly-known landscape.

This is why the PMO approach to building software has become a one-word shorthand for disaster, among most engineers: "Waterfall".

Fun fact: human nature has this extremely reliable widget, called Hindsight Bias.

Which means that, after massive exertions, having found the one clean path through, the human mind will, in essence, look backwards and say "Welp, that was actually kind of obvious".

That tends to discount the value of the learning. So beware!

Again, use Storytelling in your favor.
** Wayfair Details
Tom Hare, who maintained the horrifying "shipping loader" downstream of the orders table explained it as "Transportation's job is to semi-randomly *shuffle* orders from all sort of different customers to different shipping companies and warehouses. There is no way to shard that ahead of time -- every single query would have to summarize data across multiple shards, it'll be unbelievably complicated and it won't actually make performance any better."

The Storefront team had done an ambitious sharding of customers. But didn't really understand that Orders were a different beast.

Wayfair's peak season was the Cyber 5, immediately after Thanksgiving -- and, in the one that had just taken place, the Storefront and SCE systems had... survived... the intense stress, but, just barely.
