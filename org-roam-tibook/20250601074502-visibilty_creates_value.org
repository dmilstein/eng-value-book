:PROPERTIES:
:ID:       D901A4C9-885B-4F42-8B8D-3595616857E8
:END:
#+title: Visibility Creates Value
#+filetags: :Chapter:
* Visibility Creates Value
Technical Investments are defined as:

"Work that engineers believe is *valuable for the business*, but which no one is asking for".

In order to identify and advocate for technical investments, engineering leaders must understand *how engineers create value for a business*.

What do we mean by value?

Say the engineers are hard at work on a new product, that, once it launches, will bring in a stream of dollars.

Crucially, that stream of dollars is *not* the value we're talking ahout -- it's "revenue", which plays a *role* in determining company value, but is not that value by itself.

So, what is "overall company value"? And how might we determine it?

For a public company, we can estimate "overall company value" from the market capitalization -- because the price of a single share of stock represents what investors are willing to pay for a fraction of the overall company.

For a startup, we can estimate "overall company value" from the valuation achieved during a funding round -- if investors pay $10 million dollars to own 25% of the company, they are setting an overall company value of $40 million.

Engineers can, by the work they do, either increase *or decrease* that kind of overall company value.

The potential *increase* in value is why companies hire engineers -- engineer salaries represent an *investment* on the part of the business, made in hopes of a positive return.

Whatever someone tells you your job is, please understand and believe me: in reality, your job is to increase the value of your company.

# Footnotes, as my friend Kris Ciccarelli and I like to discuss, the cost of a useless meeting is *greater* than the cost of the salaries of everyone involved -- because the company expects a positive return on those salaries.

Unfortunately, company executives have a limited understanding of how engineers create value.

This is especially true for various forms of potential value that engineers care a great deal about, e.g:

 - Cleaning up difficult-to-change code

 - Improving tooling to test, integrate and deploy changes

 - Instrumenting production systems with monitoring

 - Retiring old infrastruture

In the right situations, the above kinds of work can make a company *a great deal* more valuable -- and can thus be worth prioritizing, even against work that might immediately increase revenue.

Engineers can not, in general, depend on stakeholders or product managers to understand how to convert problems in those areas into potentially valuable investment opportunities.

Thus to support engineers in these conversations, we're going to spend some time unpacking the concept of "overall company value".

Hidden within it we'll find the keys to successfully identifying and then advocating for a wide variety of technical investments -- and for understanding our work as engineers more broadly.

# Footnote Also: it's fun! It's maybe *especially* fun if you have an obsessive love for developing a first-principles understanding of activities people are blindly doing all around you.

Although some of the below may sound a bit theoretical, I'll *strongly encourage* you to really sink your teeth into it, really wrestle with how to apply it to your specific company.

Technical investments are fundamentally about value.

As an engineering leader, you will be *extremely* well-served by having a full understanding of how to map from your company's highest level goals (aka, their plan for increasing overall value) all the way down to the work your team is doing, day-to-day.

That full understanding is what will allow you to creatively and successfully advocate for work that, you guessed it, no one is asking for.

But it does take some slowing down and thinking to really see all those connections.

Note: I'm *not* proposing you try to *lead* with all of the below, in your initial conversations with your stakeholders.

Aka, as you read the below just focus on understanding and applying the overall model for value, *for yourself*.

Later in the book, we'll go through a plan for drawing your stakeholder into a repeated process of decision-making, that they will find delightful.

And we'll do so in a way that doesn't require front-loading an economic lecture -- stakeholders who are upset about their features being late are oddly resistant to economics lectures, I have found.

Footenote: As Edmund Jorgensen and I first came to understand these ideas about company value (which we stole from the amazing Principles of Product Development Flow, by Don Reinertsen), we excitedly brought these ideas into just about every one of our discussions with stakeholders. We emerged from that experience a few years later, battered and bruised, with the approaches you're going to see later.

** A Few Of My Favorite Misconceptions

Let's list several things which are *not* good proxies for creating value... even though your stakeholders or even various engineering leaders will confidently insist that they are "engineering's job":

 - Cranking out new features as fast as possible

 - Rapidly chewing through all the well-groomed tickets on a team's sprint board
# Find Kellan quote about devolving to this?

 - Living up to 'commitments' to delivery deadlines
# Footnote, "What's that you say? I seem to hate the term 'commitments' so much I had to put it in scare quotes? I have no idea what you're talking about."

 - Writing high-quality (or defect-free) code

# - Increasing revenue (there are "bad" forms of revenue which make a company less valuable)

All of the above activities are *potentially valuable*... but, unfortunately, all of them are also *potentially damaging to value*.

I have seen companies that "believed in" each of the above proxies as a universal good. And I have seen every one of them *fail as a business*.

In order to distinguish between the two case, we have to dig deeper.

# What's That You Say, You Want a Brief Detour Into Finance?
# Finance Is An Equation Built On Top of a Dream [Fantasy]

** Finance Is Just Equations Built On Top Of Dreams

If you ask a finance person, "How do you value a company?", they'll light up.

They'll mention streams of future profits, and then, before you know it, you'll find yourself neck-deep in all sorts of exciting, math-adjacent jargon about discounted cash flows, amortization schedules, the cost of capital, and how to pronounce EBITDA.

# E.g. see HBS's [[https://online.hbs.edu/blog/post/how-to-value-a-company][How to Value a Company]] for not one, not two, but *six* different ways to calculate the value of a company.

You might think, "Oh, I get it! The overall value of a company is determined by an *equation*."

But this is *wrong*, in a just enormously important way.

Company valuation models are built on top of a *projection of future profits*.

And that projection is *just a guess*.

The models take a specific guess, and turn it into a specific number of dollars.

Humans, being human, then treat the number as Very Meaningful, because Math Has Been Applied.

But it's just a guess.

Guesses and uncertainty are at the absolute core of how companies are valued.

We're going to abstract all the models away, and define the value of a company as:

*A probabilistic estimate of the future profits of the company.*

That's it. Inside that we'll find our key.

** Probability: Unknown Versus Uknowable

The concept of "probability" is used in two related but subtly different ways.

Sometimes, it's used to describe something which is "inherently unknowable", e.g.: rolling a die.

We call any single die roll a "random event".

All we can possibly say--all *anyone* can possibly say--is that each side is equally likely to turn up.

In this "inherently unknowable" case, a probability estimate is a fundamental statement about the world.

But at other times, the word "probability" is used to describe something which is potentially knowable, but is *currently unknown*.

Here an example might be: guessing a target person's height.

If the guesser knows nothing whatsoever about the target (as in, they can't even *see* them), then their best option is:

Guess the average human height (taken over, say, every human on earth).

However, in principle, there's no reason the person doing the guessing *couldn't* know more. Even potentially a *lot* more.

 - They could know where the target person was born

   The distribution of heights are quite different in different parts of the world.

 - The could know the target person's age

   The distribution of heights is very different for 3 year olds than for 30 year olds.

 - They could even be looking at a photograph of the target person standing in front of a ruler

   This might feel like it's no longer a "guess" -- but there's nothing inherently impossible in this.

In each case, they would have more information, and could therefore make a more accurate, tighter probabilistic estimate.

[Once they "fully know", we feel uncomfortable calling it a probabilistic estimate, but it's really just a spectrum, not a binary difference]

In this way of understanding "probability", a probabilistic estimate is a statement of *knowledge* by some specific person, not a statement of *inherent variation* in the world.

Such a probablistic estimate encodes a person having *some* information -- but not enough to always get the right answer.

** Um, What Person Is Doing The Knowing and The Guessing?
# We're Going to Invent Someone Useful

If the value of a company is a probabilistic estimate of future profits...

...and a probabilistic estimate is a statement of knowledge about the world...

...and more specifically, a statement of one person's knowledge about the world...

... then *whose knowledge* are we talking about?

This is really important.

Different humans have different levels of knowledge, aka, different amounts of information.

For our enlightened notion of value, we're going to *invent* someone: an economically rational investor.

# Hat tip / footnote for Reinertsen

This imagined person possesses two kinds of knowledge:

 - Information known by "everyone"

   This can include both facts (e.g. your company sells a product to large municipalities), and also probabilities (e.g. the frequency at which software companies that sell to large municipalities suffer security breaches).

 - Information known "inside the company"

   This can include both simple facts (e.g. the results of beta testing a new street sweeper product offering) and also probabilities (e.g. the frequency of downtime for a feed of key data about parking violations).

From the perspective of an engineer working at a company, the overall value of that company is best understood as:

 - A probabilistic estimate of future profits...

 - made by an economically rational investor...

 - based on what is currently known...

 - both inside and outside the company.

Believe it or not, that statement, with its obsessively precise statements of knowledge, information and probability, holds the key.

With it in hand, we're ready to start marching through different kinds of potential value -- and we'll find several where the engineers are perfectly placed to observe the potential for value, and therefore, perfectly placed to advocate for investment.

* Scraps/Notes
From my notebook <2025-06-01 Sun>

Call out that Revenue != Value -- mabe start with this, and name "value" as "what is your company worth". What is it's stock price? What would an investor value it at?

Illustrated with:

 - Customer survey or gathering of feedback (esp if it makes extremely clear what to do, maybe with either stalled deals or high churn rates)

 - Profiling a big distributed systems (esp if customer complaints are driven by slowness, in the face of key deadlines, and they're giving up and just using spreadsheets)

 - Acquiring a data set (or, if I turn this into a story, maybe it's having researched an alternative data store or way to implement indexing for the database that will remove the bottleneck)

Each step creates value because it allows you to understand the *next* valuable step. This is how technical investments often work.

Note: don't lead with economic theory with stakeholders up front (again, note my failures). Get them addicted to decision making and gradually educate them on the key parts of the system

Some kind of metaphor about how it's not a planned drive across the country with a good map, where you hit some minor snags, and have to, like, go to a different hotel or go through Minneapolis instead of Milwaukee.

Rather, it's like trying to find a route across a massive jungle to a set of mountains, just visible in the distance, in an undiscovered country (sigh, colonialism, sigh) (or is it to the far side of the mountains)

There will be valleys hidden from sight right now, that might contain deep canyons you can't across, there might be rivers that run precisely where you want to go, and can save days and days of time.

Every day, the leader might send someone up to the highest nearby tree or hill, and survey, to see what they have learned.

They might fundamentally change their course as they go -- they might end up going a fundamentally different route than initially planned, they might even give up and find another way to get to the far side.

Every day is interwoven progress and learning, one drives the other. The take some actions to fill in the map, and others to make progress (which allows them to fill in more of the map).

Software projects are much better understand as explorations with a flexible long-term goal than as a planned itinerary through a mostly-known landscape.

This is why the PMO approach to building software has become a one-word shorthand for disaster, among most engineers: "Waterfall".

Fun fact: human nature has this extremely reliable widget, called Hindsight Bias.

Which means that, after massive exertions, having found the one clean path through, the human mind will, in essence, look backwards and say "Welp, that was actually kind of obvious".

That tends to discount the value of the learning. So beware!

Again, use Storytelling in your favor.
