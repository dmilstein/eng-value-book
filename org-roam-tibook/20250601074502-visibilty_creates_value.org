:PROPERTIES:
:ID:       D901A4C9-885B-4F42-8B8D-3595616857E8
:END:
#+title: Visibility Creates Value
#+filetags: :Chapter:
* Visibility Creates Value
** Warning (Extremely Valuable) Abstract Thinking Ahead

# Maybe: Look, you... could skip this chapter. Maybe. And just jump into the catalog of Forms of Value + Visibility. If you're a person who is just super impatient with any form of abstract thinking, feel free to do that, and maybe return here when you hit concepts there. But I'll encourage you not to. There are few things that are more valuable for your long-term career than understanding how engineering work turns into value. It can both earn you more money, but also preserve your sanity. But it takes some work. As my friend Edmund said "Tell them sometimes you need the math so fucking clear an afternoon and brew some coffee".

Technical Investments are defined as:

"Work that engineers believe is *valuable for the business*, but which no one is asking for".

In order to identify and advocate for technical investments, engineering leaders must understand *how engineers create value for a business*.

Let's stop right there, and ask the most fundamentally important question:

*What do we mean by value?*

Say the engineers are hard at work on a new product, that, once it launches, will bring in a stream of dollars.

Many engineers, if they think about company value at all, tend to think of that stream of dollars, that potential revenue as the "business value" they're responsible for delivering.

But, crucially, revenue is *not* the value we're talking ahout -- revenue plays a *role* in determining company value, but is not that value by itself.

So, what is "overall company value"? And how might we determine it?

For a public company, we can estimate "overall company value" from the market capitalization -- because the price of a single share of stock represents what investors are willing to pay for a fraction of the overall company.

For a startup, we can estimate "overall company value" from the valuation achieved during a funding round -- if investors pay $10 million dollars to own 25% of the company, they are setting an overall company value of $40 million.

If you know something more important to a company *and its leadership* than its future stock price or its valuation in future funding rounds, please do let me know what it is.

Now, engineers can, by the work they do, either increase *or decrease* that kind of overall company value (footnote: this is part of why there are things to like about engineer compensation being tied to equity).

The potential *increase* in value is why companies hire engineers -- engineer salaries represent an *investment* on the part of the business, made in hopes of a positive return.

Whatever someone tells you your job is, please understand and believe me: your *actual* job is to increase the value of your company.

# Footnotes, as my friend Kris Ciccarelli and I like to discuss, the cost of a useless meeting is *greater* than the cost of the salaries of everyone involved -- because the company expects a positive return on those salaries.

Unfortunately, company executives tend to have a limited understanding of how engineers create value.

# This is especially true for various forms of potential value that engineers care a great deal about, e.g:

#  - Cleaning up difficult-to-change code

#  - Improving tooling to test, integrate and deploy changes

#  - Instrumenting production systems with monitoring

#  - Retiring old infrastruture

# In the right situations, the above kinds of work can make a company *a great deal* more valuable -- and can thus be worth prioritizing, even against work that might immediately increase revenue.

Engineers can not, in general, depend on stakeholders or product managers to understand how to convert problems in technical areas into potentially valuable investment opportunities.

(That is why "no one is asking for" the work the engineers want to do)

Thus we're going to spend some time unpacking the concept of "overall company value".

Hidden within it we'll find the keys to successfully identifying and then advocating for a wide variety of technical investments -- and for understanding our work as engineers more broadly.

# Footnote Also: it's fun! It's maybe *especially* fun if you have an obsessive love for developing a first-principles understanding of activities people are blindly doing all around you.

# Although some of the below may sound a bit theoretical, I'll *strongly encourage* you to really sink your teeth into it, really wrestle with how to apply it to your specific company.

# Why?

# Technical investments are fundamentally about *value*.

# As an engineering leader, you will be *extremely* well-served by having a full understanding of how to map from your company's highest level goals (aka, their plan for increasing overall value) all the way down to the work your team is doing, day-to-day.

# That full understanding is what will allow you to creatively and successfully advocate for work that no one is asking for.

# But it does take some slowing down and careful thinking to really see all those connections.

** Oh, Good Lord No, This Is *Not* How You Talk To Stakeholders

Before we dig in, though: I'm *not* proposing you *lead* with all of the below, in your initial conversations with your stakeholders.

As you read the below just focus on understanding and applying the overall model of value *for yourself*.

Later in the book, we'll lay out a plan for gradually drawing your stakeholders into a repeated process of decision-making, that they will find delightful.

And we'll do so in a way that doesn't require front-loading an economics lecture -- stakeholders who are upset about their features being late are oddly resistant to economics lectures, I have found.

Footnote: As Edmund Jorgensen and I first came to understand these ideas about company value (after reading the amazing Principles of Product Development Flow, by Don Reinertsen), we excitedly brought abstract models for value into just about every one of our discussions with stakeholders. We emerged from that experience a few years later, battered and bruised, with the very different approach you're going to see later.

** A Few Of My Favorite Misconceptions About Value

As a prelude to building our model, let's list several things that are *not* reliable proxies for creating value.

Stakeholders (and other engineering leaders!) will tell you, extremely confidently, that one or more of the below *is* a reliable proxy for creating value.

Except they won't use those words (unless they happen to be economic model-obsessed geeks).

What they'll say is: *"Stop asking so many questions and just do your job".*

This statement expresses a belief that one of the below activities is the entirety of engineering's "*job*".

This belief is fundamentally wrong.

Engineering's *job* is to create value for the business. Even if the people who hired you don't think about it that way.

# You're going to get a ticket to the Dan Milstein Course in How To Give People What They Actually Want, Not What They Ask For, And Leave Them Very Happy Indeed

Each of the below activities is *potentially valuable* for a business... but, unfortunately, each of them is also *potentially damaging to value*:

 - Cranking out new features as fast as possible

 - Rapidly chewing through all the well-groomed tickets on a team's sprint board

 - Writing high-quality (or defect-free) code

 - Living up to 'commitments' to delivery deadlines

Here are some examples of how, depending on context, each of the above can or can not be valuable:

 - *Cranking out new features as fast as possible*

   Super valuable when chasing product market fit and rapidly testing a series of new prototypes with customers.

   Super damaging when the company has built a product that customers fundamentally don't want or need, and the parade of new features is a desperate attempt to avoid facing that hard truth (Dan has never seen stakeholders exhibit this exact behavior, certainly not at every job he's worked at).

 - *Rapidly chewing through all the well-groomed tickets on a team's sprint board*

   Super valuable when the team is developing something genuinely important for the business, and the engineers and product leads are talking all the time, and the work is going live and driving learning every day.

   Super damaging if the product team is using the tickets as a way to avoid talking with the engineers and there's weeks and weeks of lead time to "write good tickets" (or god forbid Product Requirements Documents) and the engineers don't really understand the *why* of what they're building, and the tickets get "closed" when PR's merge to some long-lived, rarely-deployed branch.

   # Find Kellan quote about devolving to this?

 - *Writing high-quality (or defect-free) code*

   Super valuable if errors in the code cause major problems for customers, and the code is going to live for a long time and be changed by many engineers over its lifecycle.

   Super damaging if the code has a high likelihood of being thrown away, and the time to write it delays critical feedback from customers.

 - *Living up to 'commitments' to delivery deadlines*

   Super valuable if, um... Um. Just give me a sec.

   Look, I can't lie: making key business decisions based on extracting "commitments" from engineering is a fool's game for everyone involved.

   See Melissa Perri's excellent Escaping the Build Trap for much, much better options.

As the above makes clear, there's a lot of contextual nuance to understanding when your team's work is or is not valuable.

Fortunately, there is a unifying way to understand value, so that the most important factors of the context immediately pop into sharp relief.

And developing that unifying understanding will allow you to see a vast array of potential technical investments in a clear light.

Let's build a model!

# What's That You Say, You Want a Brief Detour Into Finance?
# Finance Is An Equation Built On Top of a Dream [Fantasy]

** Finance: Clever Equations Built On Top Of Dreams & Fantasies

If you ask a finance person how to value a company, they'll light up.

They'll mention streams of future profits, and then, before you know it, you'll find yourself neck-deep in all sorts of exciting, math-adjacent jargon about discounted cash flows, amortization schedules, the cost of capital, and how to pronounce EBITDA.

# Footnote E.g. see HBS's [[https://online.hbs.edu/blog/post/how-to-value-a-company][How to Value a Company]] for not one, not two, but *six* different ways to calculate the value of a company.

You might think, "Oh, I get it! The overall value of a company is determined by an *equation*."

But this is *wrong*, in a just enormously important way.

All company valuation models are built on top of *projections of future profits*.

And those projections are... *guesses*.

The models take one specific guess, and turn it into a specific number of dollars.

Then, humans, being human, treat the number as Very Meaningful, because Math Has Been Applied.

But it's *still* just a guess.

# Footnote: If you take nothing else from me, please believe that Guesses + Math = Guesses, not Truth.

Guesses and uncertainty are at the absolute core of how companies are valued.

To put the focus cleanly on that, we're going to abstract away all the details of the models, and define the value of a company as:

*A probabilistic estimate of the future profits of the company.*

That's it. Inside that is where we'll find our key.

** Probability As A State of Knowledge About the World

The concept of "probability" is used in two related but subtly different ways.

Sometimes, probability describes something like rolling a die.

All anyone can possibly say about a die roll is that each of the six sides is equally likely to turn up.

The result of any one roll can thus best be described with the tools of probability, because it is *fundamentally unknowable*.

However, for company value, a probabilistic estimate means something quite different.

Here, "probability" means something over which a person has *limited information*.

Something which is *potentially knowable*, but which the person making the estimate doesn't currently know for certain.

The total profits your company will generate over the next 5 years can't be known perfectly -- but someone can make an informed guess.

That person will estimate an overall profit stream, and thus an overall company value -- based on *their current knowledge*.

A company valuation represents a probablistic estimate based on current knowledge.

And someone with more knowledge can make a different, *better* guess -- and if that guess shows more profits, then the overall company value will go up.

Acquiring information can *increase company value*.

Not in some woo-woo theoretical way. Actual company value. What people pay for a share of stock, or what investors pay at a funding round.


# # Insert a company-specific example

# # Cut here

# In each case, they would have more information, and could therefore make a more accurate, tighter probabilistic estimate.

# [Once they "fully know", we feel uncomfortable calling it a probabilistic estimate, but it's really just a spectrum, not a binary difference]

# In this way of understanding "probability", a probabilistic estimate is a statement of *knowledge* by some specific person, not a statement of *inherent variation* in the world.

# Such a probablistic estimate encodes a person having *some* information -- but not enough to always get the right answer.

** Whose Knowledge About the World Are We Talking About?
# We're Going to Invent Someone Useful, Named Bertha

If the value of a company is a probabilistic estimate of future profits...

...and a probabilistic estimate is a statement of knowledge about the world...

...and more specifically, a statement of one person's knowledge about the world...

... then *whose knowledge* are we talking about?

This is really important.

Different humans have different levels of knowledge, aka, different amounts of information.

For our enlightened notion of value, we're going to *invent* someone: an economically rational investor.

Her name is Bertha.

# Hat tip / footnote for Reinertsen

This imagined person possesses two kinds of knowledge:

 - Information known by "everyone"

   This can include both facts (e.g. your company sells a product to large municipalities), and also probabilities (e.g. the frequency at which software companies that sell to large municipalities suffer security breaches).

 - Information known "inside the company"

   This can include both simple facts (e.g. the results of beta testing a new street sweeper product offering) and also probabilities (e.g. the frequency of downtime for a feed of key data about parking violations).

From the perspective of an engineer working at a company, the overall value of that company is best understood as:

 - A probabilistic estimate of future profits...

 - made by an economically rational investor...

 - based on what is currently known...

 - both inside and outside the company.

Believe it or not, that statement, with its obsessively precise statements of knowledge, information and probability, holds the key.

With it in hand, we're ready to start marching through different kinds of potential value -- and we'll find several where the engineers are perfectly placed to observe the potential for value, and therefore, perfectly placed to advocate for investment.

* Scraps/Notes
From my notebook <2025-06-01 Sun>

Call out that Revenue != Value -- mabe start with this, and name "value" as "what is your company worth". What is it's stock price? What would an investor value it at?

Illustrated with:

 - Customer survey or gathering of feedback (esp if it makes extremely clear what to do, maybe with either stalled deals or high churn rates)

 - Profiling a big distributed systems (esp if customer complaints are driven by slowness, in the face of key deadlines, and they're giving up and just using spreadsheets)

 - Acquiring a data set (or, if I turn this into a story, maybe it's having researched an alternative data store or way to implement indexing for the database that will remove the bottleneck)

Each step creates value because it allows you to understand the *next* valuable step. This is how technical investments often work.

Note: don't lead with economic theory with stakeholders up front (again, note my failures). Get them addicted to decision making and gradually educate them on the key parts of the system

Some kind of metaphor about how it's not a planned drive across the country with a good map, where you hit some minor snags, and have to, like, go to a different hotel or go through Minneapolis instead of Milwaukee.

Rather, it's like trying to find a route across a massive jungle to a set of mountains, just visible in the distance, in an undiscovered country (sigh, colonialism, sigh) (or is it to the far side of the mountains)

There will be valleys hidden from sight right now, that might contain deep canyons you can't across, there might be rivers that run precisely where you want to go, and can save days and days of time.

Every day, the leader might send someone up to the highest nearby tree or hill, and survey, to see what they have learned.

They might fundamentally change their course as they go -- they might end up going a fundamentally different route than initially planned, they might even give up and find another way to get to the far side.

Every day is interwoven progress and learning, one drives the other. The take some actions to fill in the map, and others to make progress (which allows them to fill in more of the map).

Software projects are much better understand as explorations with a flexible long-term goal than as a planned itinerary through a mostly-known landscape.

This is why the PMO approach to building software has become a one-word shorthand for disaster, among most engineers: "Waterfall".

Fun fact: human nature has this extremely reliable widget, called Hindsight Bias.

Which means that, after massive exertions, having found the one clean path through, the human mind will, in essence, look backwards and say "Welp, that was actually kind of obvious".

That tends to discount the value of the learning. So beware!

Again, use Storytelling in your favor.
