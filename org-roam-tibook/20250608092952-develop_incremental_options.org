:PROPERTIES:
:ID:       03D1870C-E583-4D5C-9589-5E0799793D48
:END:
#+title: Build Milestones Around Decisions
#+filetags: :Chapter:

* Offer Increments With Embedded Decisions
# Build Milestones Around Decisions
# Maybe retitle "Set Milestones to Enable Decisions"

** Intro

Things are going well.

You've worked with your engineers to turn concerns into potential value.

Bertha, your economically rational investor/imaginary friend, has helped you identify forms of value based on probablistic estimates of future profits.

You've narrowed down your list of opportunities to the one you think has the greatest potential value for your business.

You've found a creative way to build some initial visibility into that potential value.

You've taken the time to practice tactical empathy, and then deployed your newly practiced skills on building rapport with your key stakeholder.

It's now the Big Day.

You're ready to make your case for investment.

You speak to both your stakeholder's fears and their hopes.

You situate the investment in line with their long-term goals.

You offer the initial visibility as a means to understand why investment is indicated now and not later.

To your surprise and delight... your stakeholder is convinced.

# They're ready to make the difficult decision to temporarily put aside some of their other priorities.

# Temporarily.

Then, they ask: "So, how long will this take?"

And stare expectantly at you.

And, boom, you're right back in one of the most fun parts of being an engineering leader.

** Some Challenges in Estimating Tech Investments
*** Intro
Obviously, estimates are always tricky.

But they're often *extra* tricky for technical investments.

When digging into complex and uncertain parts of your systems (of both the technical and social varieties), it can be difficult when you start to even *understand your options*.

Which makes it nearly impossible to commit to a time estimate to achieve some cleanly visible outcome.

# Satoe Sakuma said this well, "It's like you're going into a cave, and the first step is just bringing in some light. But then, when they ask you how long it will take"

Once again, let's put ourselves in the shoes of our stakeholder.

Let's assume that we have a stakeholder who is not yet in a habit of regularly co-prioiritizing technical investments with engineering.

Even if they fully embrace an iterative approach to software development (which is a best case, not always achieved in reality)...

...there's still a very good chance that, in this moment, they're trying to limit this "unpleasant temporary distraction" from their original goals.

They're reviewing the sprawling list of things things they've been asked to do, and also reviewing the painfully smaller list of things they believe are possible. They're actively rejiggering their mental map of the next month or two.

They're thinking, "How many other people am I going to disappoint in order to solve this problem the enginering team has identified?"

They're likely preparing to bargain you down from whatever your initial "request" for time turns out to be.[fn:: You're not actually making a "request"! You're exposing an opportunity for investment. But at this stage, they're likely thinking about it as a request.] Remember, that's their job -- to disappoint everyone around them.

Let's look at some classic potential technical investments, and think about how hard it is to answer the stakeholder's question.

*** Unreliable Deploys

Your deploy pipeline randomly fails for no clear reason, and when you do successfully deploy, the team ends up reverting far too often.

You have some initial visibility showing that engineers are starting to deploy less frequently as a result.

That, plus a healthy dose of references to Accelerate has your stakeholder ready to talk.

They say, "How long will this take to fix?"

How can you respond?

If you knew *why* the pipeline was failing... it wouldn't be failing.

Ditto for the post-deploy failures and reverts.

You could take a *guess*, based on the team's current hunches about what's causing the unreliability, and say something like "We think we can likely improve things in about three weeks of time, for two engineers."

What could those two engineers find when they dig in?

If you're lucky, maybe they find some misconfigured CI/CD params. You're just a couple of arcane JSON or YAML config tweaks away from more reliable deploys.

If you're *not* so lucky, they might discover that your entire build pipeline is, for deep-in-the-guts reasons, non-deterministically selecting versions to build, test and deploy. To get to a more reliable process, you're going to have to restructure that pipeline at a fairly deep level.

If you're *super, super not lucky*, this might be the moment you realize that fundamental architectural choices made long ago are forcing multiple teams to all frequently change the same hotly contested parts of your codebase, and that's causing *genuine conflicts*. The repeated deploy failures are actually the CI/CD process *doing its job*. You don't have to update your deploy process... you just have to update the most fundamental abstractions in your code. Easy peasy.

In the latter two cases, you're going to reach the end of your three week period, and not only is your stakeholder going to expect everyone to return to fully focusing on the original feature work, but, *you won't be able to show them any visible improvements*.

Instead of this building trust and making your next investment easier to advocate for, you'll feel like you've dug yourself into a hole.

*** Security Concerns

There are a couple of seriously nasty old legacy parts of your codebase -- ancient product features that only your earliest customers still use.

But, fun fact: your CEO personally acquired those customers in the early days of the business.

He is *oddly reluctant* to retire those old product features and run the risk of pissing off and potentially churn those customers.

Meanwhile, your product team visibly seethes at the idea of taking months to move those old, barely-used-by-anyone features to the current tech stack.[fn:: I mean, *obviously*, this is actually a conflict between the CEO and the Product team. But at a wild guess from here in the footnotes, at *your* company they've both somehow succeeded in convincing themselves that this is an engineering issue. At a guess.]

Your engineers have been growing more worried and frustrated.

Then, you realize there is a way to make the potential for value much more visible.

Your company strategy is to move upmarket, and start selling to enterprises.

Early sales conversation have made it clear that those enterprises are going to demand serious attestations of security -- third party audits, penetration tests, architecture reviews.

That nasty old legacy part of your product is just a festival of security issues -- out of date libraries, wide open permissions for operators, that horrible password reset page that can be compromised by running View Source, long-abandoned JS frameworks, you name it.

Your product team finds this argument persuasive.

While looking over the long list of new features they're *also* trying to build for those enterprise customers, they say:

"I can't just tell the CEO that we're killing his baby. To make this case, can you please come up with a good estimate of how much time it would take deal with the worst of the security issues?"

Again, what do you say?

It's a murky mess, not only do you not know what the worst security issues *are*, you don't even have half an idea on how hard it would be to fix just about any of them.

Your team barely understands this system, they certainly can't give you meaningful estimates of the time to do things you can't yet specify.

If you try to be conservative and give a "big" estimate, but then the CEO says "Yes, do it!", then what the heck are you gonna do?

*** And Also...

You propose enabling parallel development across multiple teams by inserting an interface layer in the middle of some convoluted mess of legacy code. Product is ready to consider saying yes, but asks "How long will that take?", before they commit.

You propose creating tooling to allow the help-desk to fix a slew of data issues that are currently requiring your team to spend hours a week executing SQL updates by hand. You guessed it -- your stakeholder would be happy to say yes, if they knew how long it would take.

Your backup regimen hasn't been reviewed in a while, you've raised sufficiently economic fear for your stakeholder to agree to some work to verify safer backups -- how long will that take?

** Tech Investments, Unlike "Removing Tech Debt", Aren't Projects That "Finish"

And that's a good thing.

Retrain yourself to think about it not as one-off projects, but as a steady series of opportunities to invest -- opportunities to make choices together.

**  Do Timebox, Don't Commit
