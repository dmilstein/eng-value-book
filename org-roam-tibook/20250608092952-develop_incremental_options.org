:PROPERTIES:
:ID:       03D1870C-E583-4D5C-9589-5E0799793D48
:END:
#+title: Build Milestones Around Decisions
#+filetags: :Chapter:

* Offer Increments With Embedded Decisions
# Build Milestones Around Decisions
# Maybe retitle "Set Milestones to Enable Decisions"

** Intro

Let's review where things ended, in our last chapter, for the engineering leader we featured there.

She worked with her engineers to dig into various concerns.

As she did so, she consulted in her mind with Bertha, her economically rational investor imaginary friend, to understand how addressing each of those concerns could increase a probablistic estimates of future profits -- and therefore create value for the business.

With Bertha's help, she narrowed down the list of opportunities to a single leading contender: improving site performance (which the engineers had initially described as "the database seems unhappy").

She took time to practice the skills of tactical empathy, and then deployed those skills on building rapport with her key stakeholder.

Then, we she met with that stakeholder to pitch an investment in creating visibility into site performance, she spoke to her stakeholder's fears (/"worst case, many of those pages could potentially seem broken."/ ) and their hopes (/"guarantee an excellent experience for the first Enterprise customers who commit to Forms 2.0."/)

She offered some initial visibility that she and her team had built "on the side" as a means to understand why investment is indicated now and not later (/"Enterprise customers who use the old, legacy Forms 1.0 product, all have *much* bigger data sets than we've seen for the new Form 2.0 in production so far"/)[fn:: This is a very useful form of visibility -- the use patterns of customers in different segments should absolutely inform investment.]

She focused her initial pitch for investment on building visibility.

# XXX Mix in the basic DB server CPU monitoring? If so, mix it back into previous chapter.

To her surprise and delight... her stakeholder was convinced.

But then, before the enginering leader feel good for even a minute, her stakeholder asked: /"How long will this project take?"/

And then promptly blew right past the proposed focus on visibility, and instead demanded a time estimate for achieving the ultimate outcome:

/"How long will it take to ensure good performance for enterprise users?"/

What can our engineering leader friend say?

She has *literally no idea* how long it would take to improve performance for enterprise users -- she doesn't actually even know yet if there's a performance issue for enterprise users yet! That's why she's proposing an investment in building visibility!

But her stakeholder is staring expectantly at her. And clearly hasn't fully agreed to this proposed investment yet.

** Some Supposedly Fun Ways To Estimate That I'll Never Try Again

# Some Options I Can *Not* Recommend When Asked For An Estimate For a Tech Investment

# Some Supposedly Fun Ways To Estimate Tech Investments That I'll Never Use Again

Yep, I've tried all of these and have the battle scars and failed projects to show for it.

*** Guess and Pad

Often, when you go to propose a technical investment, your engineering team will have a hunch about what they need to do.

Except they won't call it a hunch.

They'll say:

/"We *know* what the problem is. We just need some time to fix it. We can get it done in a week, easy."/

Engineers (who I love! Because I am one!), will say this with perfect confidence...

...even if they actually have absolutely *zero* understanding of what is causing a problem.

Honestly, I think it's just part of being an engineer -- we *know* that one part of the code was written in a dumb way, and now there's an issue, like, /near/ that code, it's *obviously* caused by it. We can already visualize how we want to clean up the code, and how much better things will be once we've done so.

If your team announces they know how to fix a problem...

...but they have *not* first built visibility...

...and/or have *not* done some fairly deep exploratory work...

...I strongly recommend that you just *nod and smile*.

/"Oh, yes,"/ you can say, /"that sounds *extremely* likely. I can't wait to dig in!"/

But under no circumstances should you turn around and use this to scope a project with your stakeholder.

You might think to yourself: "I'm no fool. I'll pad that estimate. That way, even if the engineers were a little optimistic, we'll still get it done".

# Mama didn't raise no foolish engineering manager

You might then say to your stakeholder "The team knows what to do, we just need three weeks."

And pat yourself on the back for the 3x padding, in going from one week to three.

Ohmygod, please don't do this.

Look back at our running example, which is typical of so many potential technical investments: there's some *risk* of bad performance for enterprise customers.

Maybe the team is convinced Enterprise customers are going to take a hit because of how data gets loaded into the front-end.

What might the team find in those three weeks of work?

Well, if you're *extraordinarily* lucky, you'll be able to build sufficient visibility into actual enterprise performance, then apply the fix the engineers "knew" was the problem, then verify that it worked, and share the results with your stakeholder.

But that, um, almost never happens?

Instead, you'll essentially always get hit by some combination of:

 - It's harder to build sufficient visibility than the team realized

 - The visibility, once built, shows the the problem isn't where the team thought it was

 - Fully addressing the actual problem turns out to be much harder than anyone hoped

So then you're sitting there, in three weeks, with nothing to show your stakeholder, and with them expecting to have full focus return to "business needs", not your "engineering issues".

That digs you a hole, it does not build trust and rapport.


*** Refuse Outright

You could simply tell the stakeholder: "We have no idea how long this will take. We know you'll appreciate our being honest! You're welcome!"

I mean, this is *true*, but it's not exactly *helpful*.

Your stakeholder is trying to make some really important *decision* in this moment, based on the new information that you've just shared with them.

First, they're trying to decide what work they'll need to immediately deprioritize, in order to free up capacity.

But they're *also* trying to update their picture of their medium-term goals -- to decide if they need to start socializing a change in expectations with other people, or an adjustment to some external deadline.

Both of those are genuinely important business decisions.

They need more information to make them well.

So telling them *nothing* isn't great.

*** Give a Brief Primer on Company Value & Information Theory

Yeah, sigh. I so wish this worked.

If you pull this off, please let me know, and I will buy you all the beers to learn more.

** A Persusasive and Empowering Pit h

** Some Challenges in Estimating Tech Investments
*** Intro
Obviously, estimates are always tricky.

But they're often *extra* tricky for technical investments.

When digging into complex and uncertain parts of your systems (of both the technical and social varieties), it can be difficult when you start to even *understand your options*.

Which makes it nearly impossible to commit to a time estimate to achieve some cleanly visible outcome.

# Satoe Sakuma said this well, "It's like you're going into a cave, and the first step is just bringing in some light. But then, when they ask you how long it will take"

Once again, let's put ourselves in our stakeholder's shoes.

Let's say we have a stakeholder who is not yet in a habit of regularly co-prioiritizing technical investments with engineering.

Even if that stakeholder fully embraces an iterative approach to software development (which is a best case, not always achieved in reality)...

...there's still a very good chance that, as they're considering a technical investment you've proposed, they're trying to limit the impact of this "unpleasant temporary distraction" on their current goals.

They're reviewing the sprawling list of things things they've been asked to do.

They're reviewing the painfully smaller list of things they believe are possible -- and getting ready to eject a few things from that list.

# They're actively rejiggering their mental map of the next month or two.

They're thinking, "Which people am I going to disappoint in order to solve this 'engineering problem'?"[fn:: It's not an engineering problem! It's an opportunity for investment. You'll get there eventually]

They're likely preparing to bargain you down from whatever your initial "request" for time turns out to be.[fn:: You're not making a request! You're exposing an opportunity for investment. Again, you'll get there eventually]

# Remember their job is to disappoint everyone around them.

So you have to say *something* to them -- you can't just say "I don't know, it'll take as long as it takes".

Let look at some classic areas of technical investment.

*** Scenario 1: Unreliable Deploys

Your deploy pipeline randomly fails for no clear reason, and when the team does successfully deploy, they end up reverting far too often.

You have some developed some initial visibility showing that engineers are starting to deploy less frequently as a result.

That, plus a some heavy leaning on Accelerate has your stakeholder ready to talk.

They say, "How long will this take to fix?"

How can you respond?

If you knew *why* the pipeline was failing... it wouldn't be failing.

Ditto for the post-deploy failures and reverts.

You could take a *guess*, based on the team's current hunches about what's causing the unreliability, and say something like "We think we can likely improve things in about three weeks of time, for two engineers."

What could those two engineers find when they dig in?

If you're lucky, maybe they find some misconfigured CI/CD params. You're just a couple of arcane JSON or YAML config tweaks away from more reliable deploys.

If you're *not* so lucky, they might discover that your entire build pipeline is, for deep-in-the-guts reasons, non-deterministically selecting versions to build, test and deploy. To get to a more reliable process, you're going to have to restructure that pipeline at a fairly deep level.

If you're *super, super not lucky*, this might be the moment you realize that fundamental architectural choices made long ago are forcing multiple teams to all frequently change the same hotly contested parts of your codebase, and that's causing *genuine conflicts*. The repeated deploy failures are actually the CI/CD process *doing its job*. You don't have to update your deploy process... you just have to update the most fundamental abstractions in your code. Easy peasy.

In the latter two cases, you're going to reach the end of your three week period, and not only is your stakeholder going to expect everyone to return to fully focusing on the original feature work, but, *you won't be able to show them any visible improvements*.

Instead of this building trust and making your next investment easier to advocate for, you'll feel like you've dug yourself into a hole.

*** Scenario 2: Nasty Legacy Code

Your product has a couple gnarly old features that only your earliest customers still use -- and, bonus, they're written on their own Very Special tech stack, that you're not using anywhere else.

But guess what: your CEO *personally* acquired those customers in the early days of the business. And he is *oddly reluctant* to retire those hoary old product features and run the risk of pissing off and potentially churn those customers.

Meanwhile, your product team visibly seethes at the idea of taking months to move those old, barely-used-by-anyone features to the current tech stack.[fn:: I mean, *obviously*, this is actually a conflict between the CEO and the Product team. But at a wild guess from here in the footnotes, at *your* company they've both somehow succeeded in convincing themselves that this is an engineering issue. At a guess.]

Your engineers have been growing more worried and frustrated.

Then, you realize there is a way to make the potential for value much more visible.

Your company strategy is to move upmarket, and start selling to enterprises.

Early sales conversation have made it clear that those enterprises are going to demand serious attestations of security -- third party audits, penetration tests, architecture reviews.

That nasty old legacy part of your product is just a festival of security issues -- out of date libraries, wide open permissions for operators, that horrible password reset page that can be compromised by running View Source, long-abandoned JS frameworks, you name it.

Your product team finds this argument persuasive.

While looking over the long list of new features they're *also* trying to build for those enterprise customers, they say:

"I can't just tell the CEO that we're killing his baby. To make this case, can you please come up with a good estimate of how much time it would take deal with the worst of the security issues? Either by fixing in place, or porting to our current architecture?"

Again, what do you say?

It's a murky mess, not only do you not know what the worst security issues *are*, you don't even have half an idea on how hard it would be to fix just about any of them.

Your team barely understands this system, they certainly can't give you meaningful estimates of the time to do... things you can't yet specify?

What if you try to be conservative and give a "big" estimate... but then the CEO says "Yes, do it!"? then what the heck are you gonna do?

*** Moar Scenarios...

You propose enabling parallel development across multiple teams by inserting an interface layer in the middle of some convoluted mess of legacy code. Product is ready to consider saying yes, but asks "How long will that take?", before they commit.

You propose creating tooling to allow the help-desk to fix a slew of data issues that are currently requiring your team to spend hours a week executing SQL updates by hand. You guessed it -- your stakeholder would be happy to say yes, if they knew how long it would take.

Your backup regimen hasn't been reviewed in a while, you've raised sufficiently economic fear for your stakeholder to agree to some work to verify safer backups -- how long will that take?

** Tech Investments Aren't Exactly Projects and Don't Exactly End

It's extremely tempting to think about tech investments through the lens of "projects".

We've spec'd out a project, and we're going to do X, Y and Z, and be done by such-and-such a date.

There's something useful in this, but you have to be very careful about how you define the "goal" of the project.

To see why, let's return to our friend Bertha the economically rational investor.

Say you've convinced a stakeholder to "let" your team work on the problem of sluggish site performance. That stakeholder has asked you how long the work will take.

Now, you want to create as much value for your business as possible.

So you ask Bertha, the arbiter of value:

/Given what you know, how long *should* my team work on improving site performance? When should we tell our stakeholder that the work will be over? What will maximize company value?/

Bertha would squint at you, and then say:

/If you want to maximize value for the company, your team should work on improving site performance until precisely the moment that the net benefit of further site performance improvements is less than the net benefit of other work you could be doing, instead./

Say you've just finished a project to deal with sluggish site performance.

You SLI's have achieved an acceptable range, given current load.

Everyone celebrates the "Improve Performance" project being over. Maybe there's a party.

But then the next day, your site gets a huge influx of new users.

These new users adore the base feature set, have very high expectations of responsiveness, and could care less about all the clever new extensions product has dreamed up.

Given the above, it's likely economically optimal for your team to keep working on site performance, and not pivot back to expanding the feature set.

But if you let yourself get drawn too tightly into the project formulation, no one will even be thinking about further potential site performance investments

In fact, if you're extra unlucky, stakeholders who "gave you time" to "fix" the performance are going to be mad, because the site suddenly seems really sluggish again (see: huge increase in usage). What, are they supposed to let the team spend another month on these engineering issues?!? When are they going to get back to business needs?!

Instead of thinking about tech investments primarily as projects, I think you're better served by thinking of them as a series of *decision points*.

You do some chunk of work, make some improvements, build slightly clearer visibility. Then, based on what you've discovered, you decide: should we keep going down this road?

# The companies that make better decisions, more often, are the companies that win.

You want to get your stakeholder into a regular cadence of shared decision-making.

# As part of that, you may need to retrain yourself to think about tech investments not as one-off projects, but as a steady series of opportunities to make choices together.

# This can be particularly hard if you engineering team has developed a scarcity mindset around engineering-driven work. E.g. if you're only ever able to bargain your way into three weeks of "engineering" work in any year, it can feel like the idea of planning for a future shared decision is a fool's move.

/"Fine, Dan, whatever, that *sounds* great"/ I can imagine you thinking, /"but how on earth am I supposed to get my stakeholder to buy into that?"/

Your stakeholder is standing in front of you.

They're waiting for you to tell them how long your first proposed investment is going to take.

They are clearly *not* looking forward to "repeated discussions about potential tech investments", in the future.

What do you say to them?

If you've read this far, you'll know that I've helpfully tested out the strategy of "Explain the abstract theory of the value of decisions" to them, and seen it fail 100% of the time, and am ready to instead share what I *have* seen work.

** Marketing
Imagine we flip this around, to some part of the business where leaders are used to thinking about "positive" investments.

For most B2B businesses, few things are more important than acquiring new, high-quality leads -- potential customers their sales team can talk to.

# If you're helping run a B2B business, odds are good that you care very much about bringing high quality leads into the top of your sales funnel.

Most B2B businesses therefore have a marketing team.

That team spends various amounts of money, to run various campaigns, across various platforms, to acquire leads.

They know how many dollars they spend, on average, to acquire a high-quality lead.

They've developed a plan, which they're currently executing, spending money every month against various platforms.

But then, one day, a new platform shows up, that the company has never advertised on before.

The marketing team runs an initial campaign, spending $1,000.

They promptly get back more high quality leads per dollar spent than on any other platform!

Amazing.

Should they now stop? Because that initial project is "over"? And they have a "plan", they need to get back to?

Of course not.

They should *change the plan*, based on the new information.

If, by making an initial investment, they've discovered that there is even more value to be found, they should *increase* their investment -- not curtail it.

Many tech investments function just this way -- there's a potential source of value, once you dig into it, you may very well find *more* value than you realized, and more than you were expecting to make, from your existing roadmap.

Sometimes that's visibly positive value: "It'll only take another week to apply the new indexing scheme to the rest of our tables, and then the entire site should see better peformance".

Sometimes that's risk-avoidance value: "Our initial security review made clear that things are much worse than we realized -- we think it's more valuable for the company to pause work on the feature roadmap and get to a lower risk state, immediately."

But if your "engineering project" is "over", no one is going to be looking for further investment opportunities.

Because, fundamentally, they're thinking about it is an "unpleasant" project they've been forced to do, not an investment that makes their company more valuable.

You're going to gradually persuade people into working that way.



** Timebox To a Next Interesting-Sounding Decision

# Create Transparency and Control

* Scraps
Your stakeholders will almost definitely see them in that light, certainly at first.

You or your team may also do so -- especially if you've been forced to operate in a scarcity mindset around engineering-driven work. E.g. if you're able to bargain your way into three weeks of "engineering" work in any year, you'll be forced to think "What 'project' will fit into those three weeks"



Tech Investments should absolutely be broken up into defined steps, and each of those steps should almost always should have a clean end date (and therefore be forced to shrink in scope, as that date approaches).

Aka, you and your team should live and breathe timeboxing, when you go to execute on your investments.


Investments are, ideally, "done" when it no longer make sense to continue to invest.

And even then they're not really "done", so much as other things become, for that moment, more valuable to invest in.


Why?

Not just because you don't know how much work is involved, but, more fundamentally, because you don't know when you'll reach a point where the potential value of further tech investment is less than the value of other investments (aka the opportunity cost).

Not only is that hard to even estimate up front, it will *change over time*.



** Old Intro

Things are going well.

You've worked with your engineers to turn concerns into potential value.

Bertha, your economically rational investor/imaginary friend, has helped you identify forms of value based on probablistic estimates of future profits.

You've narrowed down your list of opportunities to the one you think has the greatest potential value for your business.

You've found a creative way to build some initial visibility into that potential value.

You've taken the time to practice tactical empathy, and then deployed your newly practiced skills on building rapport with your key stakeholder.

It's now the Big Day.

You're ready to make your case for investment.

You speak to both your stakeholder's fears and their hopes.

You situate the investment in line with their long-term goals.

You offer the initial visibility that you've built on the side as a means to understand why investment is indicated now and not later.

To your surprise and delight... your stakeholder is convinced.

# They're ready to make the difficult decision to temporarily put aside some of their other priorities.

# Temporarily.

Then, they ask: "So, how long will this take?"

And stare expectantly at you.

And, boom, you're right back in one of the most fun parts of being an engineering leader.
