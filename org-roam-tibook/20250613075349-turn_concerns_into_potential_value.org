:PROPERTIES:
:ID:       2EC03879-2A23-4546-BCB8-E9A464665A03
:END:
#+title: Turn Concerns Into Potential Value
#+filetags: :Chapter:
* Turn Concerns Into Potential Value
Now, armed with a fuller understanding of value, we're ready to look at various kinds of engineers concerns.

We'll look for ways to turn those from vague worries into potentially valuable investment opportunities.

We'll ask: What Would Bertha (our economically rational investor) Say?

For each, we'll also share a few ideas on how you might make the potential value *visible* to stakeholders

Here are the four concerns we're going to dig into:

 - "This Code Is a Nightmare"

 - "Deploying To Production Saps My Will To Live"

 - "I Can't Find a Moment to Think"

 - "The Database Is On the Verge of Death And No One Cares"

** "This Code Is a Nightmare"

Bad code isn't something Bertha really cares much about, in and of itself.

She's seen plenty of companies grow their profits despite a codebase that would make Cthulu cry[fn:: I'm 99% certain this is Edmund's line, hi Edmund!], and she's *also* seen plenty of startups sink beneath the waves, despite the most DRY'd up clean code you can imagine.

# XXX Check Speeding Up Your Eng Org -- I *am* stealing that joke from Edmund, right?

However, when the engineers hate the code with the heat of a thousand suns, there's /sometimes/ a potentially valuable investment opportunity hovering nearby -- something Bertha *would* care about.

For example, an opportunity Bertha would listen to pretty carefully is one that would:

*** Enable *Specific* Product Improvements

Say the product team asks for some feature that is, unfortunately, borderline inmpossible to build, given the way the code is set up.

An example I've seen over and over: building some hot new feature has the trivial prerequisite of restructuring the core data model for the business.

If Bertha hears that the engineering team has found a safe way to incrementally restructure that core data model, and can now add the new feature, she will increase her probabilistic estimate of future profits[fn:: she'll increase that estimate a lot more if there's evidence customers actually *want* the feature -- so maybe figure that out first?], and thus the company's value will *increase*.

On the other hand, if Bertha hears that the engineering team has restructured the core data model, to make it "better" and "more flexible"... but did so on their own, and have not unlocked any specific product improvements... she's gonna be *pissed*. Her estimate of future profits is going to go *down* as a result. An engineering team doing that kind of work has destroyed value for the company.

Value is not created by adding some kind of theoretical or abstract form of flexibility, value is created by adding support for specific customer needs.

But, how might we make this kind of value *visible*?

As an example, at an EdTech company, there might be painful limits around how the system models the assignment of lessons to students (this is very common, because assignemnts have a whole state machine-like lifecycle, plus lots of logic around who is allowed to make assignments to who, plus privacy laws impacting some of those bits, etc).

The engineering team, who have lived and breathed the core lesson assignment model for years, might try to convey the challenges in some requested new feature by saying:

/"This is going to be very hard, because we don't have reliable mappings from teachers to the *combination* of students and classes in the database"./

If you're exceptionally lucky, you might have a PM who is fluent enough in SQL to visualize the restrictions that imposes.

But, even in that case, odds are good that the PM won't be making tradeoff decisions on their own -- so you'll be *very* well-served by making those restrictions comprehensible to a broader audience.

So, what are other options for creating visibility?

I'll name two.

First, you can try leaning on *User Stories*[fn:: I *adore* user stories, especially in the formulation from User Stories Applied, by <XXX whathisname>].

Instead of talking about the details of the DB tables as above, you could write a careful memo explaining that:

/The current data model *does not support*: "As a teacher, I can batch assign to all the students in my class in one step, in order to support the lesson I taught that day". With the current data model teachers would have to make assignments one at a time./

That user story form of visibility is generally much more effective than something more abstract.

The best way to play this game is to build a *set* of such user stories, covering different facets of what the team believes users need.

Such a list allows you to:

 - Proiority sort work in collaboration with stakeholders

 - Demonstrate incremental progress as you enable specific user stories

 - Pivot to other work if/when you discover you've met the important uses cases

Developing such a set of user stories also has the salutary effect of forcing the engineers and product team to *talk to each other*.

So that's the first idea.

The second one, which can actually work in complement with user stories, is to build an extremely crude but usable prototype on top of the current data model.

Such a prototype:

 - Allows stakeholders to *experience* the restrictions

 - Gives the engineers an opportunity to learn precisely where the limits lie

 - Creates something you can incrementally keep improving (and showing!) as flexibility is added under the hood

 - Can be shown to customers, to, among other things, understand which of the user stories they *truly* need

To be carefully clear: if you're trying to create visibility into data model risks, your best bet here is the kind of prototype that offers a visually crude but "real" version of the most important workflows.[fn:: At Ellevation, we called such a protoype "An end-to-end shambling mess of the whole system"]

The core capability is that someone can step through various steps of that workflow, in order to understand what is / is not possible.

This is distinct from prototype that are visually pleasant but "fake" (e.g. ones built with a design tool, not talking to DB or any code). Those prototypes can be *super* useful -- but they can very easily promise a version of the product that is forbiddingly hard to build, which is not useful if you're trying to make restrictions visible.
** "Deploying To Production Saps My Will To Live"

Maybe the engineers are frustrated because there's an incredible amount of friction involved in getting their changes live -- unreliable builds, manual steps, flaky tests, weird credential issues, tons of post-deploy babystting, a high frequency of reverts, etc.

This kind of problem is actually *easy* to get Bertha interested in. You can frame the positive investment as:

*** Enable The Team To Ship Smaller Changes More Often

Bertha understands that your company's future profits are, ultimately, strongly influenced by how quickly your engineering and product teams can go through repeated cycles where they build, then ship, and then *learn*.

Being, frankly, *more* rational than the median software company CEO, she understands that it is only through such learning loops that teams can hone in on software that is both *valuable to customers* and *feasible to build* (the intersection set of those two being essentially impossible to predict in advance).

Luckily, there's strong support for Bertha's belief in the economic value of fast, frequent, safe deploys, thanks to the truly marvelous book Accelerate.

<XXX and XXX> conducted *actually valid research* (in software engineering! for real! I know, right?!) and demonstrated a link between long-term company value and the speed, frequency and safety which which engineering teams ship code.

What's more, they even define a set of 4 key metrics that you can make the center of your visibility efforts around deployment:

 - Change Frequency

 - Deploy Lead Time

 - Revert Frequency

 - Mean Time to Restore

You can start with rough or approximate versions of those early on, and then gradually improve your visibility over time.

This is what the Ellevation team did, in gradually moving from the manually updated spreadsheet to the full dashboard.

In the Casebook of Technical Investments, we'll go deep on improving deploy, in the section: "Ship Smaller Changes More Often".


** "I Can't Find a Moment to Think"

Wouldn't it be great if your engineers had time to, say, *do software engineering*?

But instead, every day they face what feels like some kind of coordinated assult on their focused work time, thanks to:

 - A stream of bugs and feature requests from customers (somehow every one of them at the HIGHEST PRIORITY)

 - Urgent follow ups from sales/success/support about those bug and feature requests (all arguing for the importance of SOME SPECIFIC BUG)

 - Weird bits of operational work only engineering can do, and needs to get done RIGHT NOW (that manual account set-up step for some Important New Customer, or a data pull that BI needs by end of day, to prep for presenting to Senior Leadership *tomorrow*)

Plus, these interruptive requests tend to fall most heavily on your strongest, most valuable engineers. And that's especially true if those engineers suffer from the  misfortunes of being nice.

(I have vivid memories of standing by Tom Hare's desk at Wayfair, watching just a parade of people from the operations teams "wander by", each asking for Tom's to help fix some weird edge case).

*** Create Capacity *And* Improve Operational Outcomes

There are two distinct ways that Bertha understands the potential for value here, and thus two distinct forms of visibility you can build.

First, Bertha suspects there might well be value for the company if the engineers could spend *less time* on all this interruptive work.

In this belief, she is likely heartily joined by both the engineers *and* their immediate stakeholders.

Spending less time on reactive work could free the engineers up to work things that would (hopefully) be more valuable and (definitely) be more fun.

If that "other" work were likely to lead to greater profits in the future, Bertha will happily ascribe real value to replacing the reactive work with that "something else".

Visibility on this front is fairly straightforward: you want to simply make it clear *how much time* the engineers are spending on operational work.

That in and of itself can sometimes motivate a real investment to speed up or fully eliminate some interruptive tasks the engineers are currently responsible for.

You can build some visibility into the "capacity spent on reactive work" by: surveying engineers weekly, or by tagging and tracking tickets, or by shadowing an engineer for a day or two, or even by setting up a formal triage process to bring reactive work out into the open. You can also make some useful estimate about how much time is lost to being interrupted, separate from the actual work to address issues.

All of that can help make a case for investment, if there's a way to *reduce* the reactive work.

However, that's not the whole story.

The reactive work, thankless though it may be, is very likely creating *some* form of value for the business.

*Bertha cares about that value, too.*

Understanding the value of the reactive work is potentially useful for you, if you want to make a couple of specific kinds of investment pitches.

If you believe it's best for the business to move work *off your team* and find a home for it somewhere else in the organization -- you'll need to speak to the value.

The same is true if you want to "slow down" and make a real technical investment to reduce the time spent per task, or the frequency of interruptions (i.e. by cleaning up some underlying system).

If you can show some value to the business, *beyond* just saving time for the engineers, that investment case gets a lot easier to make.

E.g. say your engineers spend some time every sprint helping set up tricky data import configurations for new customers. It's not possible to automate all that away, because it requires carefully reviewing test data files from customers, testing out the imports and diagnosing failures, etc.

Imagine you were go to the Important People at your company and say, "Can we create a dedicated Data Operations team so the engineers can spend less time on new customer onboarding?"

Here's the only problem: there is a real danger that Important People will hear that as a form of *complaining*.

Everyone's job has certain unpleasant and/or boring parts, many Important People are very good at ignoring complaints that they hear as: "Part of my job isn't fun, can I stop doing that part?"

There's certainly nothing particularly *urgent* in the above.

You might be able to make a more effective case by saying something like:

"It currently takes three weeks to onboard new customers, and delays in the back and forth to get data imports set up are the main driver. That work is currently being handled by the engineers, but a) they are expensive, and b) it often takes a few days for an engineer to find time to review a question from customers, which adds a lot of delays and frustrates customers. We'd like to talk about finding a better home for that work, so we can both improve onboarding times and reduce costs. Our early estimate is that 70% of the work can be done by the more technical members of the help desk, if we can carve out time for them, and the engineers can build some basic tooling."

That's speaking to potential benefits -- both visibly better customer experiences, but also lower costs *for the operation itself*.

There's a decent chance you can (and should) loop in your product team to help build this kind of case. It's usually not too hard to get their help,s because they would love to have more of "their" engineers time devoted to "their" work.
** "The Database Is On the Verge of Death"

* Scraps/Notes

Now.

Someone reading this is vigorously nodding their head, and thinking /"See, this is why my proposal to fully rewrite all that super nasty code is totally right! Let's goooo!"/

*NOTHING COULD BE FURTHER FROM THE (ECONOMIC) TRUTH.*

Yes, Bertha would be quite happy to see features enabled and delivery speed increased.

However, Bertha has been around for a minute.

If you tell her she's going to get those new features and that faster pace of delivery just the moment the team finishes a big ground-up rewrite or replatforming, she's gonna raise her eyebrows and write something very nasty indeed on her little clipboard.

See our later chapter: "The Giant Rewrite: Only Undertake If You Wish To Later Be Fired Midway Through a Long & Painful Death March".

We'll talk there about tactics that will allow you to safely and incrementally make major changes to your systems.

But, for now, we'll just say: start by making the potential value *more visible* to your stakeholders.

Here a few useful, very lightweight first steps:

If your team is *totally unfamiliar* with the terrifying code, create a spreadsheet of "engineers who are able to develop, test and safely deploy a change to System X".

If your team can, like, check out and build the code, but don't know how to make any meaningful changes, create a spreadsheet of "engineers who know how to work in System X".

Those may sound a bit silly, but *showing* your product team a list of the exactly one engineer who can currently even check out the legacy app is a genuine form of visibility.

You can base your decisions and goals for an upcoming sprint on that shared visibility, you can later update it and show progress over time, etc.


Once you've got that initial visibility, you can set milestones that improve the thing you're showing. And, on the path to those milestones, you can and should incrementally improve the code. But that's not the value you're selling to your stakeholders.



# Key first question: are you actually working in this code, like right now? Or is it just you did a drive by and were horrified by what you found?
