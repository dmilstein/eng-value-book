:PROPERTIES:
:ID:       EFA43963-DB19-4EA6-8EF3-4F4376AED1F1
:END:
#+title: A Series of Story Makeovers
#+filetags: :Chapter:
* A Series of Story Makeovers
** Cutting The Spaghetti In Half

*** The Dry Fact

"Team Ultimate Werewolves finished implementing the field catalog interface."

*** A Three-Beat Story (Problem/Struggle/Better World)

We've badly struggled with having teams work in parallel on our core product -- but we *need* to be able to have multiple teams going really fast, if we're going to have any chance of hitting our launch target for next year.

My team, the Ultimate Werewolves, spent the last two months carefully reworking some of our hoariest old code, to put in place an API for a "catalog of available data". That API lists, for every available field, endpoints to both read and update the data.

As of last Thursday, at four pm, Team Dromedary can now build the new custom report tool purely on top of that catalog API, without directly touching any of the core code. And my team can now do a ton of work under the hood, totally independently of them. Both teams have *already* found their planning going faster, and we think we're just going to pick up speed over the next few months.

*** The Value Being Illustrated

Enabling parallel development across multiple teams can be *incredibly* valuable to a business -- and can only enabled by smart, often deeply technical investments.

That said, *please* don't do this *speculatively*. If, before you run into actual problems, you put in place some complex, creative split in your system, you will, essentially 100% of the time, predict the *wrong kind* of parallel decomposition your business will later need. You'll run a very grave risk of making all work harder, and later making the actual parallel decomposition you need *fully impossible*.

A reasonable shorthand summary is: don't build microservices until you have a successful and extremely frustrating monolith.

All that said, if, as above, you've got an specific product strategy that requires a high pace of learning and discovery across multiple teams working in some deeply tangled up part of your code, finding disciplined ways to restruture that code can create a ton of value.

Also: this is an absolute poster child for the kind of super valuable work which is, by default, *entirely opaque to stakeholders*.

Thus, being able to *tell the story* of that creation of value, as above, can serve you very well.

*** Story Technique Notes

 - Within the first sentence, there's a subtle intensifying of the problem, which creates a bit of urgency and suspense: /"we *need* to... if we're going to have any chance of hitting our launch targets"/

 - Then, in the second paragraph, the effort is described as /"carefully reworking our hoariest old code"/.

   The words used (/"badly", /"carefully"/, /"hoariest"/) gives it a bit of the feel of a difficult struggle, which brings the narrative arc to life.

   Putting those two points together, here's how the intro would have read without those techniques.

   /My team, the Ultimate Werewolves, spent the last two months inserting an API for "catalog of available data", in order to allow teams to work in parallel on our core product./

   To my ear, that just feels flatter -- I suspect many listeners would think, "Okay, fine, so what?"

 - In describing the impact of the win, the speaker says /"As of last Thursday at 4 pm, Team Dromedary can now build..."/

   That's an example of bringing the listener into a key moment, to make it more immediate.

   A flatter, dryer alternative would be something like:

   /"This new API provides Team Dromedary the tools they need to build the new custom report tool."/

   That isn't /terrible/ (it demonstrates the benefit), but bringing the detail to life makes it more vivid.

 - Finally, it wraps up with /"we're going to pick up speed over the next few months."/

   That's a subtle invocation of "creating a better world"

** Unspringing the React Promises Bear Trap
*** The Dry Fact

"Jeremiah finished restructuring the front-end tests for the builder".

*** A Three Beat Story

Our front-end tests for the builder were all written as the engineers involved were both learning how to do unit testing *and* how to work with React. Unfortunately, the resulting tests *both* randomly fail due to race conditions and *also* have to be rewritten every time we so much as look at the underlying code. The PM's had started to get really frustrated that every ticket had an extra two days to "fix the tests". One day in planning, Amber asked if we could just stop testing altogether. But dropping testing felt really risky, so the engineers all pushed back. But it didn't feel great.

So, we peeled Jeremiah away from day-to-day sprint work, and he spent a while going deep to try to understand why the failures were happening, and what we could do to make the tests more stable across code changes. He realized the underlying problem wasn't actually the tests themselves, but more how we were managing state in the builder. He took three weeks to carefully rewrite just the field selection component around a new state management pattern, adding really high quality tests as he went.

He then spent two weeks pair programming with one engineer after another to share the new approach -- *and* he wrote a how-to guide on the wiki on React component architecture and testing.

The team has now built two new components in the new style, and not only have the PM's not complained once about testing, they've actually said that iterating on the UI feels "snappier"! We believe that is in large part because the team has been able to more quickly try out changes to the front-end, thanks to the combo of the better state architecture and having a much better safety net.

*** The Value Being Illustrated

Many engineers think of the value of tests (if they think of value at all), as "catching bugs".

The actual economic value of good tests is *not* primarily to "prevent bugs" but rather to enable *velocity*,

Although a missed bug is an acute and prominent cost to the business, there is *far* more economic damage caused by invisible slowdowns because no one knows how to safely change a system, or every change creates a cascade of unplanned, reactive work.

Of course, a team only gets the value of tests enabling velocity...

*...if those tests actually allow the team to move faster.*

Having a set of tests which need to be rewritten on every code change are, in many ways, worse than no tests at all.

So the economic value to improving tests here is a) immediately speeding the team up, because writing tests the first time is faster, and b) speeding the team up in the long term, because the tests won't need to be rewritten nearly as often.

*** Story Technique Notes

 - Notice how each of the first four sentences steadily deepens the problem:

   The engineers were learning both tests + React ->

   now the tests both fail and have to be rewritten all the time ->

   the PM's are starting to get frustrated ->

   one PM has now asked to stop testing altogether.

   That's the "intensifying the problem" stage in the heroic arc.

 - Jeremiah's deep dive has a series of "struggles"

   Within a few setnences, he, tries, fails, learns and then gradually wins.

 - Several "moments" are brought to life

   "Amber asked if we could just stop testing"

   "Jeremiah realized the underlying problem"

   "he spent two weeks pair programming",

   "the PM's said that iterating on the new UI felt 'snappier'".

 - The final sentence is a nice summary of a "better world".

** The Death of CalcNextNode

# Steal ideas from Anand retiring ShippingCosts.php or whatever it was

*** The Dry Fact
"We finally replaced "
*** A Three Beat Story

*** The Value Being Illustrated
