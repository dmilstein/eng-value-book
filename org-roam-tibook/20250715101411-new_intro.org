:PROPERTIES:
:ID:       454225CA-DD66-4ACA-B8B3-429F6551DBDC
:END:
#+title: Art of Solving Biz Problems Intro
#+filetags: :Chapter:

Part of [[id:42FF29AB-A3A1-4307-85E5-69C08C7D4DB4][Reframe/Restructure]], integrating the core value prop from [[id:412A3285-6344-4D0E-9641-692417B5A540][New Structure]]

* Introduction

** The Mini-Tab & The Microsoft C Compiler
# One of the great pleasures of working as a software engineer is solving meaningful problems.

# for a business.

In 1991, during my first summer home from college, newly settled on a computer science degree[fn:: over english, art history, or math, I'm a bit of a weirdo], I was talking with my mother, who led the adult and continuing education programs at a local commnunity college. As I talked about the kind of coding I was hoping to try out that summer, she asked me if I could possibly help her division with some preparation work they had to do each year for their annual catalog of courses.

She described their problem, which involved some rote extraction of course metadata from the course descrptions. We agreed she'd pay me $100 if I could help them. I got to work.

This was 1991, the internet wasn't on the scene yet. I had a copy of Microsoft C Compiler on my Microsoft DOS computer [and I wanted to learn C that summer], so I wrote her a C program to transcribe their input document into a table of courses, each tagged with a course code, and each having the schedule, title and instructor cleanly pulled out.

Today I would write that program in an afternoon using python and a handful of regular expressions. But I had never heard of regex's at the time, and my long love affair with python was years in my future. It took me a couple of weeks (I was teaching myself C from the K&R book, and shockingly, the input data wasn't consistently in the format she'd described to me, so I kept having to slowly flush out the actual patterns, and then add special cases to handle each one).

In the end, the program finally worked, and I got my $100 check.

I was delighted. This thing I loved doing, hacking on a computer to get it do what I wanted, could actually turn into money?

But I was *also* delighted to realize that I had saved my mother and her colleagues hours of extremely frustrating work. That, honestly, felt kind of amazing -- I had, just by typing away into a little monochrome yellow and black interface, somehow made something that made the real world, well, better. That *helped* people.

Her division at the community college ended up using that program for years and years (in fact, I was later slightly dismayed to learn that they built much of their catalog preparation process around the oddball decisions I had made that summer). They very much got their money's worth for the $100 they'd spent.

But, so did I.

That little job started me on the path of creating software that solved problems for people, in the real world. That path has turned into both a career, and also a great deal of meaningful work. I've written software to help people lay out and prepare textbooks for print production; to understand how their marketing campaigns have performed; to fill a warehouse with goods to deliver and then to pick, pack and ship those goods back out again; to collaborate on scientific research during drug discovery; to help support english language learner students in public schools.

In so doing, I've spent a great deal of (very rewarding!) time gradually learning how to structure complex software to solve problems in the real world. That has included everything from the day-to-day tactics of how to write clean, understandable, testable code; to how to decompose large programs into pieces that can be understood and worked on independently; to a thousand details about how to represent and store data; to how to operate systems in the harsh reality of production.

But I've also learned something else.

I've learned that all those wonderful tactics for writing complex, powerful programs aren't enough, by themselves, to *solve meaningful problems in the real world*.

There are a slew of challenges, some running through how businesses function, some through how human beings function, that must be faced, to identify problems worth solving and then gradually hone in on valuable solutions.

I, like just about all programmers, learned this the hard way.  I watched programs I had spent months writing get thrown away the moment they were finished, because the problem I had been asked to solve no longer mattered to, well, anyone. I found myself mired in painful stasis and frustration thanks to constant churn and changing requirements. I watched in horror as the work I had personally promised to get done in a few weeks metastasized into an endless, month after month slog.

# My journey into solving business problems took me from engineering into product management, and then back into engineering.

My journey into solving problems for people took me from engineering into product management, and then back into engineering, and then to various forms of leadership over both disciplines.

I've worked as a principal engineer building and operating complex systems; I've led product at startups desperately trying to find traction; I've managed engineering teams ranging in size from 2 to 500.

This book is my attempt to share what I've learned about how to ensure that the work we do as engineers solves problems that matter.

** The Three Core Problems

As fun as it is to write software to solve problems I personally experience (ask me about my .emacs file sometime), it's ultimately been more rewarding--both financially and personally--to write software to solve problems for other people.

# With a few exceptions[fn:: Ask me some time about the system I may have built for myself in 2005 to bet on baseball games], almost all the software I've written to solve problems in the real world has been developed working *with other people*.

This has led to my spending a great deal of time working within various businesses[fn:: Though I should say that, personally, some of the joy of doing open source work has been getting to solve meaningful problems *without* being embedded in a business].

Therefore, I've spent many, many years trying to understand how to solve *business problems*. How to ensure that the work I do, the software I build, ultimately helps the business succeed -- which generally means solving problems that matter for *someone* (though, see "Ethical Choices", later). Which I continue to find profoundly motivating and rewarding.

In the course of those years, I've run into three major challenges, each of which initially completely defeated me, and each of which I gradually learned how to tackle.

** Challenge 1 - Creating Value in the Presence of Uncertainty
# Create Value in the Face of Uncertainty
#  Managing Uncertainty

 - Leading Projects In The Midst of Uncertainty
 - Leading Projects Amidst Uncertainty
 - Leading Projects Amidst Vast Uncertainty
 - Leading Projects Amidst Constant Uncertainty

Remember that C program I wrote to prepare the course catalog? I told my mother it would take me a week. To my dismay, due to both my own learning curve, and to all the weird edge cases I ran into in the input data, I struggled to get it done in under a month. Luckily, that didn't cause serious problems for my mother's division at the community college -- they produced the catalog late enough in the summer that they could wait.

But I was both painfully and very unpleasantly surprised. I figured that, once I was a better, more experienced programmer, I'd be able to give more accurate estimates of how long projects would take.

That's turned out to be profoundly untrue.

I have found that it is extraordinarily difficult to develop accurate estimates of engineering work at, well, almost any time scale -- in some ways, as we'll dig into in Part I, I've come to believe it's better to understand it as being *impossible* to do so (of course, this depends on how one defines "accurate" -- spoiler: the best way to do so is in the context of a *decision* the estimate is being used to make)

This challenge with coming up with estimates turned out to be one facet of a deeper challenge, which pervades almost every part of the work of a software engineer:

There is massive uncertainty running through almost everything we do.

As we start working with a peer or stakeholder to solve a business problem:

 - We don't know how long it will take to build new software to implement a set of product requirements

 - We super don't know how long it will take to modify existing software that we didn't personally write to implement some requirements

 - We don't know how close our existing production systems are to falling over from load

 - We don't know what lurking stability or security risks are threatening to blow up

 - Finally, if we're being honest, none of us know if implementing the given product requirements will actually solve problems for users and thus, the business

For reasons we'll dig into in Part I, I believe this uncertainty is a fundamental characteristic of developing software, not some accident of circumstance. It's driven not just by the incredibly complexity of the modern software stack but, more deeply, by the ease with which any known step can be automated via code, so that all that's left is the "unknown".

How is it possible to create value for a business when operating in the midst of such profound uncertainty?

To make matters worse, peers and stakeholdes will often find that uncertainty intensely frustrating. They'll try to get you to commit to estimates you have no confidence in achieving. They'll ignore the risks you try to raise, then angrily complain when those risks blow up into delays or missed deadlines.

What's an engineer supposed to do?

It's very tempting to try to answer all the questions before you start. Unfortunately, that way lies Waterfall, aka madness.

Now, plenty of people have realized this ("Waterfall" is a shorthand for disaster for a reason), and there's a sort of known answer -- "use agile".

That's right, of course.

But, what are you supposed to do, today, when some powerful stakeholder is asking if your team can finish some project in time for a launch early next year?

What agile increment should you start with? What initial challenge should you set your team? What, if anything, should you tell your stakeholders to set expectations of when they'll see *something* of value? How can you get them to engage with those gritty questions about data availability that you're worrying about, that could potentially sink the entire effort?

I can say, from painful and bitter experience, that it's extraordinarily easy to run a project within the tenets of agile... and still have it spectacularly fail to deliver value. Sprints, planning, standups and retros are all necessary but not sufficient.

You *can* just shrug and hope, and everyone can stumble along, making painful discoveries as you go, often too late in a project to adapt.

In order to solve real problems for the businesses I've worked in, I've had to learn how to lead major engineering efforts in the face of massive uncertainty.

# , where saying "we just don't know" wasn't enough for the rest of the business to make plans and decisions.

I can't wait to share that way with you.

# You can try to draw them into a sprint-to-sprint agile process,

# However, that leaves unanswered a few key questions:

#  1- What increments do we build, in what order?

#  2- What exactly do we tell our business partners, when they ask for an estimate?

# The role of product management is centrally important *because* the work is done iteratively -- but I have never seen an engineering team build great software without being deeply engaged in their own answers to those questions.

** Challenge 2 - Fixing the Engineer/Stakeholder Interface

# A Broken Engineer/Stakeholder Interface

Working as part of a business means, well, working with *other people*. Specifically, working with other people who either directly have problems themselves (e.g. operational users of a piece of software I was writing), or who represent the problems that customers struggle with (e.g. a product manager, or a sales leader or a CEO).

# First, being embedded in a business has meant working with people to understand what their problems are, and which of those are worth solving.

# Both: other engineers on a team with me, but, even more, other people in some broader business. Clients, customers, product managers, operational users, you name it.

# And human beings are their own particular flavor of challenging.

# In particular, it can be very challenging to work with the people who represent (or believe they represent), "what the business needs" to the engineers.

Those people, who have a stake in seeing problems solved, are the engineering team's "stakeholders". As of this writing, in mid 2025, those stakeholders are, for better or worse, human beings.

Given the foundational uncertainty we just talked about, for the engineers to be able to *partner* with those stakholders to create value for the business, there's an overall cycle they need to go through, over and over:

 - The stakeholder shares a *problem to solve* (not a feature to build)

 - The stakeholder provides full *business context* around that problem (why it's important, precisely how solving it will help the business, any alternatives that were considered, other stakeholders to consider)

 - The stakeholder *listens* to key concerns the engineer raise

 - The stakeholder and engineers work together to *priority sort* the work, and then agree to an *initial increment*

 - After the engineers complete the initial increment, the stakeholder *adapts* to what has been learned, possibly pivoting to something entirely new.

Now.

It would be *lovely* if stakeholders showed up every day, ready to trust the engineers, sharing clear strategic context, laying out coherent problems to solve, and eagerly ready to adapt and learn as the work unfolds.

But, here in the real world, that aspirational ideal is very rarely met.

In particular, stakeholders all too frequently do one or more of the following:

 - Demand the engineers build some specific solution, instead of sharing a problem

 - Provide limited or no business context

 - Demand ahead-of-time estimates and commitments

 - Resist ongoing reprioritization

What's an engineer supposed to do?

Just about every stakeholders I've ever met has been burned by previous relationships with engineering -- so, if you try to persuade them to act differently, they can push back, often aggressively.

On the other hand, if you try to play along with their approach, you run a massive risk of the project going off the rails, and it being seen as your fault.

To solve real problems for businesses, I've had to learn ways to encourage other human beings to *change their behavior*.

Which, spoiler, most humans really really really don't want to do.

But there is a way!

I can't wait to share that with you.
** Challenge 3 - Making Time For "Engineering" Work

Over the course of many years of developing software to solve business problems, I  gradually discovered and then abruptly became terrified of the challenges of maintaining and extending an existing codebase (including a codebase that I myself had written, which, sadly, didn't always help much[fn:: It's possible that, one day in 1997, I was bored at my job, so when I had to hack together a script for churning out static html pages, I read through the Perl regex magic variable binding rules and used a series of weird as hell $ variables... and then that script got picked up and used for a dozen projects and I felt compelled to apologize personally to every engineer who touched it])

This turns out to be a symptom of a general challenge.

Sometimes it's the engineers themselves who have identified some important problem to solve. Something they think is valuable to the business. Maybe that's upgrading a key database that's threatening to collapse under the weight of traffic. Or it's spending a few weeks overhauling the CI/CD pipeline, so changes can make their way into production without engineers suffering endless meaningless test failures on the way.

Unfortunately, far too often, when engineers bring such problems to their stakeholders, they find their concerns falling on deaf ears. Maybe they cite the accumulation of "tech debt", or try to explain how their systems work. But they are told to focus on "business needs". Even though they believe, in their hearts, that they are trying to help the business.

** The Path Ahead

# The solutions I've arrived at, which deeply intermix the specific challenges of writing software with the challenges of working with other humans, were nowhere specified, as I was studying computer science or eagerly consuming every book I could find about structuring programs.

In this book, I'm going to share the solutions I've learned, to each of those challenges:

 - Creating Value in the Presence of Uncertainty: Build Increments Around Key Decisions

   # Estimates, Increments, Decisions & Milestones

   # Draw Your Stakeholder Into a Series of Decisions

   Steer into the major sources of uncertainty, such that you can make important decisions *with* your stakeholders, early enough to still have good options remaining.

 - Changing Stakeholder Behavior: First Hearts, Then Minds

   By developing the skill of "tactical empathy", you will be able to help your stakeholder *feel* your understanding of both what they want and also what they most deeply fear. Based on that trust, you can then offer them finely-tuned "increments of change" which gradually move towards a better way of working together, and where each increment ends in an empowering decision for them.

 - Making Time For "Engineering" Work: Drive Technical Investments

   By developing a deep understanding of how value is created for a business, you will be able to identify *and effectively advocate for* valuable technical work -- as a *key business priority*, not as something "for the engineers".

Crucially, these three approaches *build on each other*.

By employing tactical empathy to align more deeply with your stakeholders, you'll better understand the underlying problems they are trying to solve, and the constraints they're operating within.

Being able to create value in the midst of uncertainty will then allow you to offer them real options to make progress, which will build more trust, and gradually allow you to partner at a higher and higher level.

As you play this game over time, you'll find yourself needing to advocate for key technical investments that are necessary for the business to succeed in the long-term.

** What About Product?

I want to be 100% clear. I value product management incredibly highly -- but I also have found that, even with a high-functioning engineering/product partnership, there is still crucial work that engineers must sign up to do, to ensure that their work genuinely solves problems.

If you're lucky, you'll have a trusted product management partner with whom to figure out:

 - How to map the overall business strategy to the work of your team

 - How to put the machinery of agile to work solving business problems

 - How to persuade your stakeholders to collaborate in a new fashion

 - How to balance long-term technical investments against near-term feature work

But even in the happiest of cases, the PM is going to look to engineering for: estimates of effort; key technical challenges to overcome; options for potential increments and milestones; justifications for major technical investments; etc.

And, of course, there are a great many engineers who do *not* have such an enlightened product partner -- maybe their product team rarely talks to them and only occasionally throws a Product Requirements Document over the wall; or maybe there's no product team at all, and the engineers have to face stakeholders on their own.

** Making Ethical Choices

I will, here in the wilds of 2025, enourage you to take some time to think about the problems you agree to help solve. All our work has an ethical component, whether we realize that or not.

Perhaps also, take a moment to feel that sense of wonder -- I'm still astonished that, by typing a bunch of arcane characters into a glowing box, I can affect people's actual lives.

# I adored role playing games as a kid -- and I loved playing wizards and spellcasters. I think the idea of being able to affect the real world by saying *just the right thing*, by learning some arcane incantation, was just a form of power that stirred dreams in my heart. How amazing is it that I've found a life where I can do just that.



* Scraps
** Good/Bad Estimate Reasons
Unfortunately, the stakeholder who is +demanding+ asking for an estimate likely believes that those things *require a lot of lead time* [need to be started well in advance, need to work backwards from a fixed date in the future].

Two *good* reasons why people ask for estimates:

 1) In order to decide which of two alternatives to invest in

 2) To coordinate long lead time efforts

And some *bad* reasons:

 1) To pressure the team to work faster
 2) To hold the team accountable
 3) Because they don't know any other way
 4) In order to shift risk and future blame onto the team
 5) Because they don't want to think about risks
** Name the crazy requests, instead of

Maybe sketch in a few scenarios -- a demand for estimates; discovery of a blocker; need for technical investment; unwillingness to accept tradeoffs; ignoring of maintenance costs; denial of risks; how much staff do they need to hit a deadline?

Unifying theme: feeling out of step with stakeholders

Who are "stakeholders"? Product? Sales? Marketing? CEO? Yes. Product is special.

Maybe name that pit in your stomach, of feeling like you're being pressured into promising the impossible, and are now on the hook, not for something hard you can accomplish, but for "nothing going wrong", even though vast parts of it are fully out of your hands. And your stakeholder doesn't seem to want to hear about any concerns or nuance.
** Intro Chapter Beats <2025-07-15 Tue>
*** Evoke The Experience of Misalignment
Maybe sketch in a few scenarios -- a demand for estimates; discovery of a blocker; need for technical investment.

Unifying theme: feeling out of step with stakeholders

Who are "stakeholders"? Product? Sales? Marketing? CEO? Yes. Product is special.

Maybe name that pit in your stomach, of feeling like you're being pressured into promising the impossible, and are now on the hook, not for something hard you can accomplish, but for "nothing going wrong", even though vast parts of it are fully out of your hands. And your stakeholder doesn't seem to want to hear about any concerns or nuance.

*** Note The Underlying Challenge
Distinctive things about software: 1) estimates are basically impossible, 2) systems require non-obvious investments to keep producing value.

They want to make decisions, you can't give them the information they want. And also, you want them to invest in things they don't understand
*** Sketch In Overall Solution (maybe as separate chapter w/ story)
Turn the partnership into a collaborative series of decisions.

But, need trust and shared understanding, so get there by iteratively building trust. (though, my current intro chapters doesn't seem to be carrying people through?)
*** Wait, Is This Just Product Management
Yes and very much no.
*** The Fundamental Cycle
*** Map of Remainder of Book

** From Before
Some part of the core challenge facing the engineering leader is two deeply inter-related issues:

 1- Stakeholders want to make important decisions based on estimates from you... which feel impossible to give accurately

 2- Many of the key challenges, and thus key *decisions* as you go are, by default, completely hidden/opaque, so it feels like engineering has to internalize those risks (this covers both how to do the thing they're asking, but also things they're not even asking about, but which do need investment)

So then my fundamental pitch is to, what, get your stakeholder into a *different* decision-making *loop*. But that takes time, and you have to build trust.

I think I'm focusing in on, yes, that moment of being asked for estimates, for planning together. And sure, you can give some rough t-shirt sizing, but how are you supposed to be a responsible partner to the business?

Sure, agile can help in theory, but how do you scale it up? You're not just responsible for tactically running agile well, you're responsible for the business outputs of that agile process.

** thing
Maybe it's a struggle with your PM. Or maybe it's a struggle you and your PM have with some executive team stakeholder of key internal user.

But it's a very real, very central challenge in collborating to develop software.

Throughout this book, we're going to talk in real detail about how to build an *ongoing process of collaborative decision-making*.

That will let you steadily partner *with* your stakeholder, to do what is best for your business... without having to commit to long-term delivery estimates.

** Other Form of Interruption
A fun alternate version of this: the CEO is actually well-behaved, *wants* the team to cleanly focus on the new product and is even doing a reasonable job of waiting for the upcoming demo... but the team is *still* distracted, because they're fielding a chaotic swirl of bugs, feature requests, and mini-incidents from the Help Desk, the Sales Directors and the Customer Success Team.

But... the CEO isn't willing to disappoint the leaders of those teams, so they ask you to "find a way to do the most important work".

But they still want to hold the team "accountable" to the product outcome.

** Details on estimate challenges
 - *Demand detailed requirements?*

   Maybe this time, Waterfall will work!

   Spoiler: it won't.

 - *Guess and pad?*

   Talk to your team about the "big rocks", come up estimates for each one, add those up and then double the end result, to be safe.

   Spoiler: this isn't gonna go much better.

 - *Cross your fingers and pray?*

   /"Sure,"/ you say.

   Aka, Yolo!

   Spoiler: you'll spend the next 9 months gradually sleeping less and less, as that date becomes more and more impossible to achieve.

 - *Make sure your stakeholder understands the details?*

   /"You see, the patient ~m_id's~ are the key thing we need, and we have to get those from the ~HL7~ files, but so far, each one seems to be encoded in a different way..."/

   Spoiler: your stakeholder glazes over, and then repeats their question/demand, now more irritated.

** PM's aren't bad footnote
[fn:: Hopefully, your actual product manager already understands the actual problems with long-term estimate. That said, odds are very good that *someone* in the business will make this request. Apologies to all the Enlightened PM's in the audience.]

** More details on CEO distraction
Unfortunately, your CEO gets extremely salty when you suggest that they stay out of the team's hair.

"I need to know what your team is doing to do my job," they say.

Or, "I'm talking to customers, your team needs to know what I'm hearing from them."

Or, even, "Look, I don't play the I'm-the-CEO card often, but I care so much about this new product, you just have to keep me in the loop."

# Or, straight up gaslighting "Oh, come on, it's not that distracting. And the team likes me, I'm not a difficult CEO."

If I had a dollar for every time an engineer asked me "How do I get the {CEO, CPO, Head of Sales, VPE} to stop distracting my team?", I'd have, well, a lot of money.

** More details on missing data tradeoff
, as you'd feared, it turns out there are significant challenges in getting the patient ids from the insurance companies.

It turns out to be not just a matter of friction or delays -- you learn, once you get deeply into the details, that only about half the insurance companies you work with even *have* the ids you need.

There's no easy choice, the best bet at this point might be to back up and fundamentally redesign the onboarding app, so that it didn't depend on that having that id up front.

When you try to talk this over with your {CEO, PM, Head of Sales}, they get angry when you try to walk them through the details.

"Look," they say, "we all agreed that we need to launch by the upcoming enrollment season. You're just going to have to find a way."

And so you go away, a pit in your stomach. It's going to be engineering's fault, again.
** Three [Four?] Fundamental Challenges

Unfortunately, we *can't* give them what they're asking for -- reliable long-term estimates for the creation of new software are just a dream within a dream.

To understand how to help our stakeholders succeed, let's dig into why stakeholders are asking for estimates in the first place.

If we can be creative (spoiler: we can!), we can still find ways to address their *underlying needs*.

I can name at least two *very* good reasons why stakeholders ask for long-term estimates.

As in, these are *genuine needs* of the business.

 1) *Making decisions* about which of several opportunities to invest in

 2) *Preparing* to turn delivered software into profits

We'll talk in real detail about each of these, throughout the book.

I'll offer a high level summary of what I mean, and my proposed solution for each.
** Stakeholders personal ambition
Of course, they *also* want to personally succeed -- a person doesn't become a Director of <X> because they *don't* want to eventually be a Chief <X> Officer someday. But such a person's fondest hope is that engineers will offer them a way to achieve *both* overall business success *and* their own personal goals.[fn:: The wise engineer will therefore ensure that they deeply understand both of those aspirations, it's almost like someone should write a book or something.]
** Bridge of Sorts [old]

A foundational thing I gradually learned was to understand that solving problems for people in the real world *created value* for the business I was a part of.

That lens--the creation of value--turned out to be a profoundly useful one, illuminating many small steps on the way to eventually solving real problems for people, and allowing me to distinguish between waste work and valuable work.

The vast majority of software I've written to help solve problems in the real world has involved some form of *partnership* -- either working directly with people who have problems to solve, or working with someone who is representing such people to the engineering team -- e.g. a product manager who had gone deep on customer needs.

I have found it useful to name such people "stakeholders" -- they have some stake in the problems you're solving.

Working with other humans to create value by developing new software turns out to be very interestingly hard.

In particular, a few flavors of hard include:

 - Those other humands, understandably, often ask how long it will take to write a piece of software to solve a specific problem in a specific way. Aka, for an estimate. Aka, "Will you be able to finish and ship V2 of the Forms Product by Q1 of next year?"

   Unfortunately, the honest answer is usually "We don't know."

   It is, in general, impossible for engineers to give accurate long-term estimates of the time it will take to create software to solve a specific problem in a specific way.

   Or, more precisely: they can't give estimates that are accurate enough to allow their stakeholders to make the decisions they're trying to make.

   This often creates a great deal of tension between the engineers and their stakeholders -- and, at it's worst, can lead to a breakdown in trust, and to each side digging themselves into defensive positions from which transactional agreements are grudgingly made [lobbed across a no mans land between the two trenches]. This makes it nearly impossible to solve real problems for people.

 - Those other humans rarely come to the engineers with problems to solve -- instead, they come asking for specific solutions they've already thought of.

   This dramatically reduces the likelihood of finding solutions to problems -- because the engineers don't have the room to maneuver, to discover solutions that weren't thought of, as they get into the details and discover what is hard, what is easy, and what is flat out impossible.

   Unfortunately, because of the low levels of trust, it's often hard to get past the proposed solution to the underlying problems -- stakeholders can easily feel as if the engineering team is doubting them, or pushing back on their ideas. Or they simply don't have experience in collaboratively and iteratively honing on a solution to a problem -- because few other disciplines require as much of that as software engineering does.

 - Finally, sometimes it's the engineers themselves who have identified some important problem to solve. Something they think is valuable to the business. Maybe that's upgrading a key database that's threatening to collapse under the weight of traffic. Or it's spending a few weeks overhauling the CI/CD pipeline, so that engineers can get changes into production without suffering through endless meaningless test failures.

   Unfortunately, far too often, when engineers bring such problems to their stakeholders, they find their concerns falling on deaf ears. Maybe they cite the accumulation of "tech debt", or try to explain how their systems work. But they are told to focus on "business needs". Even though they believe, in their hearts, that they are trying to help the business.
