:PROPERTIES:
:ID:       454225CA-DD66-4ACA-B8B3-429F6551DBDC
:END:
#+title: New Intro
Part of [[id:42FF29AB-A3A1-4307-85E5-69C08C7D4DB4][Reframe/Restructure]], integrating the core value prop from [[id:412A3285-6344-4D0E-9641-692417B5A540][New Structure]]
* Introduction
** Engineering Would Be So Easy Without Those Pesky Humans

# XXX Fix this intro graph

When I sit down to lunch or coffee with extremely bright engineers who are steadily advancing in their careers, being promoted, being given new responsibilities (maybe as managers, or maybe on the technical track), there's one topic that comes up over and over.

It's *not* how to structure complex softare[fn:: I mean, we do sometimes end up talking about misguided moves to microservices, but that's just a thing].

It's *not* how to speed up the pace of the team's delivery. [agile rituals]

It's *not* how to have hard conversations with engineers on their team.

It's about how to work with the crazy, conflicting, impossible requests from their stakeholders.

I want to be carefully clear: these engineers have been succeeding and advancing *because* they achieve real wins for their businesses.

They don't *want* to "just do engineering".

They want to make an impact.

But, they find themselves struggling to do so.

And their relationship with their stakeholders feels central to that struggle.

# Is this a sidebar? Later?
Before we go any further, who do I mean by stakeholders?

Someone who represents "what the business wants" to the engineers.

That could be a product manager. It could be a CEO. It could be the head of sales. It could be a lead internal user.

And they're certainly not all crazy!

In fact, the thesis of this book is that it's possible to build a high-trust, rewarding and extremely valuable partnership with stakeholders.

But... that's not where things are, today, for plenty of engineers.

Instead, they experience something like one of the below problems:

*** Demands for Long-Term Estimates

Your PM comes back from a meeting with the executive team, looks down at their notes, and then asks[fn:: Hopefully, your PM doesn't actually do this, but odds are that *someone* will, so we're going to have the PM stand in for that for now. Apologies to the PM's in the audience -- I promise you I'm on your side!]:

*"Can your team commit to launching the new patient onboarding app by Q4?"*

Q4 is 9 months away.

The "new patient onboarding app" is, currently, a pile of dreams and half-built Figma wireframes.

The Patient team has just been reorg'd... and it's not clear if the newly-hired mobile engineer on the team is going to work out.

A key step in the onboarding flow depends on obtaining data from the patient's insurance companies... who all seem to move at a slug-like speed designed to defeat urgency at all costs.

How are you supposed to answer this question?

 - *Demand detailed requirements?*

   Maybe this time, the Waterfall approach will work!

   Spoiler: it won't.

 - *Guess and pad?*

   Talk to a few engineers about the "big rocks", come up with a "reasonable" estimate.

   Say that's 4 months -- o be safe, you double that, see that it's less than 9 months.

   So you say a cautious "Yes".

   Spoiler: this isn't gonna go much better.

 - *Cross your fingers and pray?*

   Just yolo it. /"Sure, let's go!"/

   Spoiler: you'll spend the next 9 months gradually sleeping less and less, as that date becomes more and more impossible to achieve.

 - *Explain the details to your stakeholder?*

   /"You see, the patient ~m_id's~ are the key thing we need, and we have to get those from the HL7 files, but they seem to be encoded in different ways..."/

   Spoiler: your stakeholder glazes over, and worst case, just repeats their question/demand.

This is a challenge that I know super super well.

Maybe it's a struggle with your PM. Or maybe it's a struggle you and your PM have with some executive team stakeholer of key internal user.

But it's a very real, very central challenge in collborating to develop software.

Throughout this book, we're going to talk in real detail about how to build an *ongoing process of collaborative decision-making*.

That will let you steadily partner *with* your stakeholder, to do what is best for your business... without having to commit to long-term delivery estimates.

*** Constant Interruptions

# XXX Should this be a different app?

Your team is hard at work building the new patient onboarding app... but every other day seems to feature the CEO popping into the team's Slack channel, fresh off a conversation with customers, asking for an engineer to dig into some new issue, or demanding an update on progress, or wanting to relitigate the carefully hammered-out prioritization scheme.[fn::Or wanting help with an enterprise sales convo; or wanting to do a quick brainstorm on level of effort for some speculative future thing; or asking an engineer to read some article they just found about {AI, Blockhain, <Insert Buzzword Here>}; I COULD GO ON ALL DAY.]

It's clear that you're going to miss your delivery target, and badly, if the team keeps on running around like chickens with their heads cut off.

Unfortunately, your CEO gets extremely salty when you suggest that they stay out of the team's hair.

"I need to know what your team is doing to do my job," they say.

Or, "I'm talking to customers, your team needs to know what I'm hearing from them."

Or, even, "Look, I don't play the I'm-the-CEO card often, but I care so much about this new product, you have to keep me in the loop."

# Or, straight up gaslighting "Oh, come on, it's not that distracting. And the team likes me, I'm not a difficult CEO."

If I had a dollar for every time an engineer asked me "How do I get the {CEO, CPO, Head of Sales, VPE} to stop distracting my team?", I'd have, well, a lot of money.

A fun alternate version of this: the CEO is actually well-behaved, *wants* the team to cleanly focus on the new product and is even doing a reasonable job of waiting for the upcoming demo... but the team is *still* distracted, because they're fielding a chaotic swirl of bugs, feature requests, and mini-incidents from the Help Desk, the Sales Directors and the Customer Success Team.

But... the CEO isn't willing to disappoint the leaders of those teams, so they ask you to "find a way to do the most important work".

But they still want to hold the team "accountable" to the product outcome.

*** Refusal to Engage In Tradeoffs

Your team is some form of halfway there on the onboarding app when, as you'd feared, it turns out there are significant challenges in getting the patient ids from the insurance companies.

In fact, the insurance companies are only going to be able to provide those ids for a small-ish subset of your full user base.

For the rest, you'll need to back up and gather that info another way entirely -- the team has an idea of how to make it work, but it would mean both developing a relationship with a new data broker *and* overhauling a part of the ingest pipeline.

Or... you could back up and fundamentally redesign the onboarding app, so that it didn't depend on that having that id up front.

When you try to talk this over with your {CEO, PM, Head of Sales}, they glaze over when you try to walk them through the details.

"Look," they say, "we all agreed that we need to launch by the upcoming enrollment season. You're just going to have to find a way."

And so you go away, a pit in your stomach. It's going to be engineering's fault, again.

** The Underlying Challenge
let me put some cards on the table.

I believe that the challenges in collaborating with stakeholders are driven by true, profound challenges in developing software for a business.

It's not because your stakeholder is somehow weak or foolish or limited that you have these challenges.

It's because it's *genuinely hard for them to do their job*, when they're dependent on the creation of new software in order to succeed.

If you've only ever *written* software, it's maybe hard to understand how deeply and painfully true this.

An executive, a business leader, makes decisions and coordinates efforts and holds people accountable to their part of those efforts.

All of that is just a complete shitshow with engineering.

We can't know enough up front to make our decisions early.

Distinctive things about software: 1) estimates are basically impossible, 2) systems require non-obvious investments to keep producing value.

They want to make decisions, you can't give them the information they want. And also, you want them to invest in things they don't understand

* Scraps

** Two Fundamental Challenges

Unfortunately, we *can't* give them what they're asking for -- reliable long-term estimates for the creation of new software are just a dream within a dream.

To understand how to help our stakeholders succeed, let's dig into why stakeholders are asking for estimates in the first place.

If we can be creative (spoiler: we can!), we can still find ways to address their *underlying needs*.

I can name at least two *very* good reasons why stakeholders ask for long-term estimates.

As in, these are *genuine needs* of the business.

 1) *Making decisions* about which of several opportunities to invest in

 2) *Preparing* to turn delivered software into profits

We'll talk in real detail about each of these, throughout the book.

I'll offer a high level summary of what I mean, and my proposed solution for each.

** Selecting Among Investment Opportunities

Imagine that your team is being asked for an estimate about the time to deliver a new product -- with a particular focus on launching in time the annual customer event next year.

Say there are two potential product opportunities:

 - Option A is a new payments integration that uses AI to automatically categorize revenue

 - Option B is an AI-enabled help desk auto-responder that embeds a jingle in the auto-response emails[fn:: At the time of writing, it's partway through 2025, I'm not legally allowed to brainstorm product features that don't include AI].

say you currently have 10,000 customers. Let's simplify and assume you can sell either new product to all of them.

For the payments integration (Option A), sales and marketing estimate that you'll be able to charge $100 / year for it.

For the auto-response jingle (Option ), sales and marketing estimate that you'll only be able to charge *$50* / year for it.

Company leadership is trying to decide which of the two to work on -- and, *as a key part of that*, they're trying to understand how much effort each might take.

Let's say that the engineering team digs in and comes up with *similar* high-level estimates for the two. Either new product would *hopefully* be deliverable by the big customer launch event next year, if the team fully focused on that work.

In that case, company leadership will choose Option A, because the payments integration generates twice the revenue, on the same timeline and for the same investment cost.

But imagine that the engineering team knows there's a specific risk for the payments integration -- it depends on the nitty details of what the payments vendor exposes in their API.

If the vendor exposes a full, accurate set of metadata about each transaction, the AI model will have plenty to work with, and the team will be able to build something of real value.

If, on the other hand, the metadata exposed is either much more limited, or (more insidiously), much less *accurate*, then the team won't be able to build anything vaguely worth $100 / year for your customers.

What can the team do?

In particular, what can the team do, to help *the overall business succeed*?

Well, if the team considers this API question the biggest risk, then the very first thing they build should be something that fully digs into that question.

They can "build the API integration first", and do so in a way which aggressively explores both the scope and the accuracy of the included metadata. This doesn't necessarily have to be a separate "research" step -- it can more be a creative sequencing of the work that needs to be done.

In any event, whether framed as "ahead of time research" or as "early sequencing", if the team *quickly* hits the roadblocks they were afraid of, *the overall business still has time to change their mind*.

Company leadership can fall back on Option B, the auto-response jingle -- which the team should still have time to deliver before the big launch.

That's the whole trick!

But that requires:

 - A willingness and cadence for changing decisions

 - The eng team surfacing risks

 - The eng team generating information about risks early

And also, it's not just the decision -- there's also coordination.


Let me tell a story.



** Coordinating Work To Turn Delivered Software Into Profits

A business that depends on the creation of software generally has to do something *with* that software in order to increase profits.

The CEO can't just wave their hands over a pile of bits [a blinking command line cursor] [that implement some requirements] and have money pour into a cauldron {chest, bucket, vat} in front of them [fn:: except, um, that kind of is my mental model of tweaking ad algorithms at Google?].

Some examples:

 - Marketing might need to generate demand for a new product, before it can be sold

   As a part of this, they tend to want to ask the engineers what the product will actually, y'know, *do*.

 - The Sales Team might need to develop a new demo and playbook

   As a part of this, they tend to want to ask the engineers what the product will actually, y'know, *do*.

 - An internal operational team might need to migrate to a new system

   As a part of this, they tend to want to ask the engineers what the product will actually, y'know, *do*.


Unfortunately, the stakeholder who is +demanding+ asking for an estimate likely believes that those things *require a lot of lead time* [need to be started well in advance, need to work backwards from a fixed date in the future].



Two *good* reasons why people ask for estimates:

 1) In order to decide which of two alternatives to invest in

 2) To coordinate long lead time efforts

And some *bad* reasons:

 1) To pressure the team to work faster
 2) To hold the team accountable
 3) Because they don't know any other way
 4) In order to shift risk and future blame onto the team
 5) Because they don't want to think about risks
** Name the crazy requests, instead of

Maybe sketch in a few scenarios -- a demand for estimates; discovery of a blocker; need for technical investment; unwillingness to accept tradeoffs; ignoring of maintenance costs; denial of risks; how much staff do they need to hit a deadline?

Unifying theme: feeling out of step with stakeholders

Who are "stakeholders"? Product? Sales? Marketing? CEO? Yes. Product is special.

Maybe name that pit in your stomach, of feeling like you're being pressured into promising the impossible, and are now on the hook, not for something hard you can accomplish, but for "nothing going wrong", even though vast parts of it are fully out of your hands. And your stakeholder doesn't seem to want to hear about any concerns or nuance.
** Intro Chapter Beats <2025-07-15 Tue>
*** Evoke The Experience of Misalignment
Maybe sketch in a few scenarios -- a demand for estimates; discovery of a blocker; need for technical investment.

Unifying theme: feeling out of step with stakeholders

Who are "stakeholders"? Product? Sales? Marketing? CEO? Yes. Product is special.

Maybe name that pit in your stomach, of feeling like you're being pressured into promising the impossible, and are now on the hook, not for something hard you can accomplish, but for "nothing going wrong", even though vast parts of it are fully out of your hands. And your stakeholder doesn't seem to want to hear about any concerns or nuance.

*** Note The Underlying Challenge
Distinctive things about software: 1) estimates are basically impossible, 2) systems require non-obvious investments to keep producing value.

They want to make decisions, you can't give them the information they want. And also, you want them to invest in things they don't understand
*** Sketch In Overall Solution (maybe as separate chapter w/ story)
Turn the partnership into a collaborative series of decisions.

But, need trust and shared understanding, so get there by iteratively building trust. (though, my current intro chapters doesn't seem to be carrying people through?)
*** Wait, Is This Just Product Management
Yes and very much no.
*** The Fundamental Cycle
*** Map of Remainder of Book

** From Before
Some part of the core challenge facing the engineering leader is two deeply inter-related issues:

 1- Stakeholders want to make important decisions based on estimates from you... which feel impossible to give accurately

 2- Many of the key challenges, and thus key *decisions* as you go are, by default, completely hidden/opaque, so it feels like engineering has to internalize those risks (this covers both how to do the thing they're asking, but also things they're not even asking about, but which do need investment)

So then my fundamental pitch is to, what, get your stakeholder into a *different* decision-making *loop*. But that takes time, and you have to build trust.

I think I'm focusing in on, yes, that moment of being asked for estimates, for planning together. And sure, you can give some rough t-shirt sizing, but how are you supposed to be a responsible partner to the business?

Sure, agile can help in theory, but how do you scale it up? You're not just responsible for tactically running agile well, you're responsible for the business outputs of that agile process.
