:PROPERTIES:
:ID:       454225CA-DD66-4ACA-B8B3-429F6551DBDC
:END:
#+title: New Intro
#+filetags: :Chapter:

Part of [[id:42FF29AB-A3A1-4307-85E5-69C08C7D4DB4][Reframe/Restructure]], integrating the core value prop from [[id:412A3285-6344-4D0E-9641-692417B5A540][New Structure]]

* Introduction
** Engineering Would Be So Easy Without Those Pesky Humans

One of my favorite things to do is to sit down for lunch or coffee with one of the extremely bright engineers who I was lucky enough to work with early in their careers.
# XXX Fix this intro graph

I love hearing about what they've learned, the company they've landed at, the new responsibilities they're taking on -- be that as managers, or moving up the technical track.

At these lunches or coffees, there's one topic that comes up over and over.

# over cups of coffee or sandwiches or pho

It's *not* how to structure complex softare[fn:: I mean, we do sometimes end up talking about misguided moves to microservices, but that's just a thing, [obvs]].

It's *not* how to speed up the pace of the team's delivery. [agile rituals]

It's *not* how to have hard conversations with engineers on their team.

*It's about how to work with the crazy, conflicting, impossible requests from their stakeholders.*

I want to be carefully clear: these are engineers who love solving business problems.

They don't *want* to "just do engineering" -- they want to make an impact.

But, they find themselves struggling to do so.

And their relationship with their stakeholders feels central to that struggle.

# Is this a sidebar? Later?
Before we go any further, what exactly is a "stakeholder"?

For this book, we'll define a stakeholder as:

/Someone the engineers work with, who has the authority to decide what is valuable for the business./

That doesn't necessarily mean that person gets to directly tell the engineers "what to do". It does mean they have some organizational authority to set overall priorities for the engineers. And usually, it means they determine, after the fact, if what the engineers "worked", aka actually solved any business problems.

That could be a product manager.

It could be the CEO.

It could be the head of sales.

It could be a lead user for an internal, tech-enabled operation.

It could even be other engineers -- for teams who maintain developer platforms or tooling.[fn:: I *love* working on DevPlats, but I must also note that doing so means having stakeholders who will question every single move you make. "You're unpacking the builds *on* the hosts? Why would you do that? That seems kind of dumb."]

It isn't always one person! Often engineers work with multiple people who each believe they have (or *should* have) the authority to decide what is valuable for the business. Sadly, those people usually don't all agree with each other--and rather than hashing it out directly, sometimes they just each separately try to convince the engineers to listen to just them.

Now, I firmly believe that most stakeholders well and truly want the overall business to succeed.

Of course, they *also* want to personally succeed -- a person doesn't become a Director of Product because they *don't* want to eventually be a Chief Product Officer someday. But such a person's fondest hope is that engineers will offer them a way to achieve *both* overall business success *and* their own personal goals.[fn:: The wise engineer will therefore ensure that they deeply understand both of those aspirations, it's almost like someone should write a book or something.]

Because they want the overall business to succeed, every stakeholders listed above deeply believes that, when they make a request of the engineering team, they are being *completely and totally reasonable*.

And yet... *somehow*, engineers find themselves on the receiving end of a stream of requests that are anything *but* reasonable, e.g.:

 - Demands for commitments to long-term estimates

 - Constant interruptions with new feature requests

 - A refusal to engage in tradeoff discussions

 - An unwillingness to face looming technical problems

Let's bring those to life with a made-up but, um, maybe kind of familiar, story!

** The Saga of the New Patient Onboarding App
*** Estimates & Commitments & Tigers & Bears, Oh My

One day in late January, your PM comes back from a meeting with the executive team. They look down at their notes, and say:

"They want us to commit to a Q4 launch for the new patient onboarding app. Can we make that work?"

# [fn:: If you'ret thinking, "Hang on Dan, why is this PM talking about 'your' team? Isn't the PM *on* the team, too?" Yes yes yes! I agree 1000%. But, sadly, not every engineer gets to work in such an environment.]

Q4 is 9 months away.[fn:: Or.. is it? Does Q4 mean October 1st or December 31st? Or some vague place in between? Surely no major project would ever blow up because of ambiguity over what Q4 means, right? Right?! Sigh.]

The "new patient onboarding app" is, currently, a pile of dreams and half-built Figma wireframes.

# The Patient Experience team has been somewhat hastily assembled, and it's not clear if Rich--the only experienced mobile engineer on the team--is going to be a good fit.

# And that newly-hired mobile engineer has been overheard muttering about forking React native, has been overheard muttering about forking React native, so you're pretty spooked. keeps muttering about how you need to throw away all your front-end code and start over, and you don't know if they're crazy or your code is. to your horror.

A key step in the onboarding flow depends on obtaining data from the patients' insurance companies... but insurance company data teams seem to move at a slug-like speed designed to defeat urgency at all costs.

How, exactly, is an engineering leader supposed to answer this question?

At times it feels like there isn't any good answer -- merely a half dozen equally terrible bad ones.

*** Thinking Would Be Great, If Only We Had Any Time To Do So

The team cautiously agrees that a Q4 launch looks possible, and dives into the work of building the new patient onboarding app.

But every other day features the CEO popping into the team's Slack channel, fresh off a conversation with customers, asking for an engineer to dig into some new issue, or demanding an update on progress, or wanting to relitigate the prioritization scheme.[fn::Or asking for help with an enterprise sales call; or wanting to do a quick brainstorm on level of effort for some speculative future thing they just thought of last night; or asking their favorite engineer to read some extremely interesting and relevant article about {AI, Blockhain, <Insert Buzzword Here>}; or, or, or...]

If the team keeps on running around like chickens with their heads cut off, you're running a serious risk of missing your delivery target.

Unfortunately, the CEO aggressively pushes back when you suggest that they stay out of the team's hair.

"The engineers *need* to hear what customers are saying," they insist. "And," they continue, "*I* need to know that we're on track."

They then proceed to do the favorite thing of human beings everywhere: not change their behavior one little bit.

*** If Only "Make It Work" Was Just a Catchphrase From Project Runway

The team slowly drifts behind schedule, thanks in part to their struggle to carve out meaningful focus time.

But, somehow, they manage to keep slogging forward, and, by the middle of Q3, they're closing in on a usable version of the onboarding app.

But then, an engineer makes a horrifying discovery: over half the insurance companies you're working with don't even *have* the user id you've been planning on using for joins.

This discovery upends all your plans. There's absolutely no chance you'll be able to ship the new onboarding app to all customers in Q4.

You're going to have to either settle for a very limited release or back up and fundamentally redesign the planned onboarding flow.

You take a deep breath, and you and your product partner go talk this over with your CEO & Head of Sales.

It takes them a minute to understand what you're saying. Once they do, they both get  upset.

"That's unacceptable," the CEO says, tension making their voice tight. "You *committed* to launching in Q4."

"Marketing has already started the campaign," adds the head of sales.

"We've promised that revenue to the board for next year. You're just going to have to make it work."

You go away, a pit in your stomach. It looks like it's going to be engineering's fault. Again.

*** Those Who Fail To Learn From History Are Actually Most Of Us

As recriminations swirl after the delayed, semi-functional rollout of the new onboarding app, you sit down with some engineers to talk about what you could do differently in the future.

As a group, you all agree that the biggest challenge your team faced was having to work in the Data Ingestion pipeline.

That system is a terrifying pile of legacy code, developed by contractors in the early days of your company's history. It's written in a language you no longer use, has libraries that haven't been updated in years, and enjoys the test coverage of a pile of moldy tissue paper.

But when you try to bring this up, citing the years and years of accumulated tech debt, your PM deflects your concern. "We need to focus on business priorities right now," they say. "Especially since we're behind on revenue thanks to the missed launch date."

** The Struggle To Create Value

What's going on, in the story above?

The engineers *want* to succeed -- they want to create real value for the business.

But somehow, they seem stuck in a dysfunctional relationship with their stakeholders, which is making it impossible to do so.

** You're Not Even Vaguely Alone In This

a bit, in a story I'd guess is close to the Median Engineer Experience of Working With Stakeholders.


If this story sounds at all familiar, I have some bad news and some good news.

The bad news is that the difficulties in collaborating with stakeholders are, ultimately, due to *inherent* challenges in attempting to developing software that creates value for a business.

If some of that story above feels familiar, it's not because your stakeholder is somehow weak or foolish or limited.

It's because it's *genuinely hard for them to do their job*, when they're dependent on the creation of new software in order to success in that job.

If you've only ever *written* software, it can be hard to understand how deeply and painfully true this -- and we'll spend some real time in the next chapter digging into why.

Many of the worst dysfunctions that creep into the relationship between engineers and their business counterparts are, ultimately, due to the stakeholders trying to ovecome these inherent challenges -- but doing so in ways that are ultimately counterproductive.

For engineering, product and the rest of the business to work together to *create value* for the overall business, they need to develop a specific form of partnership -- one that requires a great deal of learning for engineering leaders *and* for their business counterparts.

The Good News is that, it is possible to work that way, to genuinely partner.

But step 1 will be understanding exactly where your stakeholders are coming from, and what they're trying to achieve.

The good news is that there *is* a way to build a very different form of partnership with stakeholders.


** Hang On, What About the Product Team?

Where is product in all of the above? Hopefully, right by the engineer's side.

But:

 a) That hope isn't always lived up to

 b) Those specific challenges fall on engineering leaders.

Coming up with estimates; protecting the team from distractions; identifying and discussing nuanced tradeoffs; advocating for proactively dealing with long-standing technical issues.


* Scraps
Unfortunately, the stakeholder who is +demanding+ asking for an estimate likely believes that those things *require a lot of lead time* [need to be started well in advance, need to work backwards from a fixed date in the future].

Two *good* reasons why people ask for estimates:

 1) In order to decide which of two alternatives to invest in

 2) To coordinate long lead time efforts

And some *bad* reasons:

 1) To pressure the team to work faster
 2) To hold the team accountable
 3) Because they don't know any other way
 4) In order to shift risk and future blame onto the team
 5) Because they don't want to think about risks
** Name the crazy requests, instead of

Maybe sketch in a few scenarios -- a demand for estimates; discovery of a blocker; need for technical investment; unwillingness to accept tradeoffs; ignoring of maintenance costs; denial of risks; how much staff do they need to hit a deadline?

Unifying theme: feeling out of step with stakeholders

Who are "stakeholders"? Product? Sales? Marketing? CEO? Yes. Product is special.

Maybe name that pit in your stomach, of feeling like you're being pressured into promising the impossible, and are now on the hook, not for something hard you can accomplish, but for "nothing going wrong", even though vast parts of it are fully out of your hands. And your stakeholder doesn't seem to want to hear about any concerns or nuance.
** Intro Chapter Beats <2025-07-15 Tue>
*** Evoke The Experience of Misalignment
Maybe sketch in a few scenarios -- a demand for estimates; discovery of a blocker; need for technical investment.

Unifying theme: feeling out of step with stakeholders

Who are "stakeholders"? Product? Sales? Marketing? CEO? Yes. Product is special.

Maybe name that pit in your stomach, of feeling like you're being pressured into promising the impossible, and are now on the hook, not for something hard you can accomplish, but for "nothing going wrong", even though vast parts of it are fully out of your hands. And your stakeholder doesn't seem to want to hear about any concerns or nuance.

*** Note The Underlying Challenge
Distinctive things about software: 1) estimates are basically impossible, 2) systems require non-obvious investments to keep producing value.

They want to make decisions, you can't give them the information they want. And also, you want them to invest in things they don't understand
*** Sketch In Overall Solution (maybe as separate chapter w/ story)
Turn the partnership into a collaborative series of decisions.

But, need trust and shared understanding, so get there by iteratively building trust. (though, my current intro chapters doesn't seem to be carrying people through?)
*** Wait, Is This Just Product Management
Yes and very much no.
*** The Fundamental Cycle
*** Map of Remainder of Book

** From Before
Some part of the core challenge facing the engineering leader is two deeply inter-related issues:

 1- Stakeholders want to make important decisions based on estimates from you... which feel impossible to give accurately

 2- Many of the key challenges, and thus key *decisions* as you go are, by default, completely hidden/opaque, so it feels like engineering has to internalize those risks (this covers both how to do the thing they're asking, but also things they're not even asking about, but which do need investment)

So then my fundamental pitch is to, what, get your stakeholder into a *different* decision-making *loop*. But that takes time, and you have to build trust.

I think I'm focusing in on, yes, that moment of being asked for estimates, for planning together. And sure, you can give some rough t-shirt sizing, but how are you supposed to be a responsible partner to the business?

Sure, agile can help in theory, but how do you scale it up? You're not just responsible for tactically running agile well, you're responsible for the business outputs of that agile process.

** thing
Maybe it's a struggle with your PM. Or maybe it's a struggle you and your PM have with some executive team stakeholder of key internal user.

But it's a very real, very central challenge in collborating to develop software.

Throughout this book, we're going to talk in real detail about how to build an *ongoing process of collaborative decision-making*.

That will let you steadily partner *with* your stakeholder, to do what is best for your business... without having to commit to long-term delivery estimates.

** Other Form of Interruption
A fun alternate version of this: the CEO is actually well-behaved, *wants* the team to cleanly focus on the new product and is even doing a reasonable job of waiting for the upcoming demo... but the team is *still* distracted, because they're fielding a chaotic swirl of bugs, feature requests, and mini-incidents from the Help Desk, the Sales Directors and the Customer Success Team.

But... the CEO isn't willing to disappoint the leaders of those teams, so they ask you to "find a way to do the most important work".

But they still want to hold the team "accountable" to the product outcome.

** Details on estimate challenges
 - *Demand detailed requirements?*

   Maybe this time, Waterfall will work!

   Spoiler: it won't.

 - *Guess and pad?*

   Talk to your team about the "big rocks", come up estimates for each one, add those up and then double the end result, to be safe.

   Spoiler: this isn't gonna go much better.

 - *Cross your fingers and pray?*

   /"Sure,"/ you say.

   Aka, Yolo!

   Spoiler: you'll spend the next 9 months gradually sleeping less and less, as that date becomes more and more impossible to achieve.

 - *Make sure your stakeholder understands the details?*

   /"You see, the patient ~m_id's~ are the key thing we need, and we have to get those from the ~HL7~ files, but so far, each one seems to be encoded in a different way..."/

   Spoiler: your stakeholder glazes over, and then repeats their question/demand, now more irritated.

** PM's aren't bad footnote
[fn:: Hopefully, your actual product manager already understands the actual problems with long-term estimate. That said, odds are very good that *someone* in the business will make this request. Apologies to all the Enlightened PM's in the audience.]

** More details on CEO distraction
Unfortunately, your CEO gets extremely salty when you suggest that they stay out of the team's hair.

"I need to know what your team is doing to do my job," they say.

Or, "I'm talking to customers, your team needs to know what I'm hearing from them."

Or, even, "Look, I don't play the I'm-the-CEO card often, but I care so much about this new product, you just have to keep me in the loop."

# Or, straight up gaslighting "Oh, come on, it's not that distracting. And the team likes me, I'm not a difficult CEO."

If I had a dollar for every time an engineer asked me "How do I get the {CEO, CPO, Head of Sales, VPE} to stop distracting my team?", I'd have, well, a lot of money.

** More details on missing data tradeoff
, as you'd feared, it turns out there are significant challenges in getting the patient ids from the insurance companies.

It turns out to be not just a matter of friction or delays -- you learn, once you get deeply into the details, that only about half the insurance companies you work with even *have* the ids you need.

There's no easy choice, the best bet at this point might be to back up and fundamentally redesign the onboarding app, so that it didn't depend on that having that id up front.

When you try to talk this over with your {CEO, PM, Head of Sales}, they get angry when you try to walk them through the details.

"Look," they say, "we all agreed that we need to launch by the upcoming enrollment season. You're just going to have to find a way."

And so you go away, a pit in your stomach. It's going to be engineering's fault, again.
** Three [Four?] Fundamental Challenges

Unfortunately, we *can't* give them what they're asking for -- reliable long-term estimates for the creation of new software are just a dream within a dream.

To understand how to help our stakeholders succeed, let's dig into why stakeholders are asking for estimates in the first place.

If we can be creative (spoiler: we can!), we can still find ways to address their *underlying needs*.

I can name at least two *very* good reasons why stakeholders ask for long-term estimates.

As in, these are *genuine needs* of the business.

 1) *Making decisions* about which of several opportunities to invest in

 2) *Preparing* to turn delivered software into profits

We'll talk in real detail about each of these, throughout the book.

I'll offer a high level summary of what I mean, and my proposed solution for each.
