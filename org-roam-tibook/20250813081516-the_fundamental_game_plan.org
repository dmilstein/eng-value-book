:PROPERTIES:
:ID:       B0637E99-E30C-4FF8-B8BA-A660454DE08B
:END:
#+title: The Fundamental Game Plan
#+filetags: :Chapter:
* The Fundamental Game Plan
** Make Improvements in Small Increments

You're going to make things better through a *series of small steps*, not via one big sweeping change.

The incremental approach is absolutely foundational, for at least two reasons:

First, adjusting the ways that groups of humans work together has a great deal in common with adjusting the way a big, complex piece of software works. You'll start with an overall sense of where you want to go, but you're going to make a bunch of interesting discoveries, some things will turn out to be much, much harder than you expected, unexpected opportunities will arise, the circumstances around you will change. Thus, just as when developing software, the iterative, experiment-and-learn approach is vastly more likely to succeed than the big bang plan-it-all-ahead-of-time approach.

But then, beyond that, there's another reason: getting other humans to change the way they work is only possible if those humans *trust* you--and fairly deeply at that. In the game plan, you're going to build up more and more trust up over time--by earning wins together, and by steadily demonstrating that you deeply understand the challenges they're facing. There is no shortcut I know of, to instantly build that kind of trust.

Because of these reasons, the game plan is a series of *Loops of Improvement*--each trip through the loop makes your interaction patterns a little bit better, creates a small win for the business, and builds a little more trust between you and some key person you work with.

This is good news! You can, with creative thinking, apply just about all your experience in iterative software and product development. Only here you're applying it to a group of humans, instead of a pile of code.

** Choose a Partner For Each Increment

For this game plan, we're going to assume there's one key person you need to advocate with.

Of course, in an actual business, things can be more complex. E.g. an engineering lead may want to encourage their PM partner to take more ownership... but to make that change, they *also* need the Head of Product to step back and create space.

This is another reason why the incremental approach is so useful. For any one increment of change, you'll pick a single key person to focus on. As you work through increments, you can then shift to someone else.

E.g. maybe the first step for that engineering lead is to advocate for just a bit of space with the Head of Product. Then, once they have that, they can work with their PM partner to help them gradually take more ownership.[fn:: You might be wondering how the engineering lead can possibly advocate for space if their PM partner isn't ready to step up. One answer is: the engineering lead can commit to "leaning over" and personally helping do the product job, for a short period of time. Exactly how they make this offer this depends on whether or not the Head of Product *already* wants the PM to take more independent ownership, or if that Head of Product needs to first experience the benefits of letting go. We'll talk through this in detail in the "Underpowered Product Team" case study.]

So, for your first increment of improvement, we're going to focus on one specific person.

We're going to name this person *The Stakeholder*, and we'll define a "stakeholder" as:

 a) Someone who *needs* you, in order to accomplish their own goals

 b) Someone who has some form of *influence* over you

# Add c) Someone you need in turn? Or say how you don't always.

In some cases, "influence" is extremely straighforward -- e.g. the Head of Product who has final say on your team's priorities during quarterly planning, or the Engineering Director who conducts your semi-annual performance reviews.

But sometimes it's a bit more subtle -- e.g. the senior sales rep who has the ear of the CEO, and will sometimes complain about how your team doesn't "care about the customer". That sales rep may not have any *formal* authority over you, but they still have *influence* -- and thus, in certain contexts, they may be a key stakeholder for you.

Examples of "stakeholders" in this sense include:

 - Your product or engineering partner in the day-to-day running of a team

 - An executive who is responsible for an overall business objective

 - A senior engineering or product leader who is guiding a major product investment

 - A power user of an internal tool your team owns

 - A customer support lead who collects bugs and feature requests from the field

 - An engineering manager whose team depends on a platform you own[fn:: I love working on tools/platform teams, but it does mean having stakeholders who question kind of everything. "What? You're unpacking the builds *on* the hosts? Why would you do that? That seems dumb."]

All of those people *need* you. And all of those people have varying forms of influence *over* you.

*** People "You Can't Afford To Ignore"

One useful frame is: someone is one of your stakeholders if you *can't afford to ignore them*.

That may sound a bit brutally transactional, but if there's too large a set of people who you can't ignore, then there's almost no chance your team can move quickly and create meaningful value.  Asking who you can ignore can shine a light on the implicit power structures of your company--and can reveal fundamental conflicts that are making it impossible for you to win.

E.g. maybe your CEO talks night and day about how critical it is for your team to stay on track for the big new product launch. But, your team is *also* expected to handle a stream of feature requests from existing customers... which that CEO doesn't pay much attention to.

One day, the Head of Customer Success comes banging on your door, and demands you immediately add a new feature for a handful of "at-risk" enterprise customers.

Can you *afford* to ignore this request, in order to stay on track for the big product launch?

Or if you do, will you later receive an unpleasant lecture from the CEO and acquire a reputation as "not being a team player"?

The only way you and your team will create significant value is if you can relentlessly focus on the most important, most valuable work at every moment. Struggling with too large a set of people you are somehow implicitly accountable to makes it impossible to do so.

Consider developing (and maintaining) a list of the people you can't afford to ignore.

Looking that over, you may find a few key "stakeholders" you hadn't been thinking about -- and, you may be stuck in broken interaction patterns with some of them, leading to frustration and/or wasted work.

We'll touch on how to improve collaborations with these kinds of "implicit stakeholders" in several Case Studies, including [[id:B9798ABE-0A34-4EC6-9F78-CD5C6404C9D8][Interruptions & Distractions]], and also *Stop Doing Low-Value/Waste Work*.

** The Four Steps of an Increment of Improvement

Okay, now that we've selected a single stakeholder to focus on, we can lay out the fundamental framework for a single increment of improvement:

 1. Develop an *empathetic understanding* of your stakeholder's fears, dreams and frustrations

    By understanding the underlying emotions which are driving your stakeholder's day-to-day behavior, you'll be equipped to make a case for change.

 2. Design a (slightly) better way to work

    # Design an *increment of improvement* in how you currently work together

    A modest step from where you are now, that has wins for you, your stakeholder, and the business.

 3. Make a *compelling offer* to your stakeholder

    Offer them something concrete that they urgently desire.

    In doing so, speak to both their fears and their hopes.

    In return, ask them to make a "slightly uncomfortable" change.

    Make it as easy as possible for them to say "yes" by a) carefully timeboxing the increment and b) ensuring the stakeholder explicitly retains *control*.

 4. At the end of the increment, *decide together* what you've learned and how, together, you want to adjust going ahead.

Through repeated cycles of this collaborative work, you can steadily make improvements while building more and more trust and rapport.

Let's bring this to life through an example.

** Scenario: Constantly Changing Priorities

We'll go through a series of increments to improve a specific, real-world situation -- an engineering leader who is struggling to make progress, because a key stakeholder keeps changing priorities.

Because so much of what we're going to be talking about has to do with the *humans*, with their messy feelings, we're going to tell a story about those humans.

It features a young engineering manager named Quin.

Quin works at an early-stage startup named "All Together Now!". Her company is developing tools for remote team-building, featuring a playful mix of video, activities, and prompts. ATN! (as they call call it) is still quite early -- they have a handful of enthusiastic friends and family users, but are still trying to break into "real" customers.

Quin is the engineering lead over a small team of engineers. ATN! doesn't have a distinct product manager yet. Instead, Quin works directly with Marco, the founder/CEO.

In terms of Marco and Quin's and collaborations, and the business as a whole, there's some good news and some bad news.

Good News, Part 1: Marco spends as a great deat of time talking to potential customers.

Good News, Part 2: It seems like ATN! has identified a genuine, painful problem in the market. Companies are cutting back on expensive in-person offsites, and are actively looking for ways to replace that with means to help their remote teams feel connected to each other.

Bad News: it feels to Quin like every single time Marco hangs up with a customer, he jumps into the team's Slack and pitches an entirely new set of feature ideas.

This is causing a great deal of churn and confusion.

Quin is worried that, because the team keeps getting pulled in so many different directions, ATN! won't be able to test out an actual product idea, with actual customers, any time soon.

The engineers are growing frustrated. Quin is just about certain that their one experienced front-end dev, who she personally recruited, is running out of patience for with the chaos.

To cap it off, Marco has started expressing concerns about the team's velocity. At their last 1:1, he suggested Quin start requiring the team to work longer hours. She would bet all the marbles that more hours won't do much except push their best engineer out the door. They need to find one idea and stick to it--which means Marco needs to stop randomizing their work.

Unfortunately, when Quin carefully suggested to the Marco that he not feature bomb the team so often, he rejected the suggestion without missing a beat. "Look, we're a *startup*," he said. "We have to move *fast*. I need the team to hear everything from customers right away, we can't wait for some artificial process."

What can Quin do?

** Step 1. Develop an Empathetic Understanding

The first step is to: /Develop an *empathetic understanding* of your stakeholder's fears, dreams and frustrations/.

We'll break that down into two parts: first, mining for strategic intent; second, answering four key emotion questions about your stakeholder.

*** Mining for Strategic Intent

Given that her attempts to address things head on failed, Quin decides to back up  a bit, and start by aligning at a higher level, instead of advocating for any specific changes.

Partway through their weekly Zoom 1:1, Quin says:

"I've been wanting to ask you a few questions, is now a good time?"

Marco shrugs in agreement. Quin can see his eyes flicking off screen occasionally. She knows he has other windows open.

She takes a breath. "You've talked a good bit about what we'd need to demonstrate, to raise a series B on good terms. I wanted to see if I have that all mostly right."

Marco quirks his head. This has broken through just a bit, Quin thinks.

"Our current runway is about 18 months", she begins, "but we need to get some big customers in the next six to twelve months, so that you have time to tell that story to potential investors. Is that about right?"

Marco purses his lips. "Almost. It's not enough that we just *land* a few big customers--we need them to be *using* ATN!, with their actual teams, pretty *often*. We need *engaged customers* A couple of big sales where the implementations don't get off the ground are almost worse than no sales."

"Got it," Quin says eagerly, "let me say that back to you, make sure I've got it. It's not enough to just land big customers, we need *engaged customers*, which means..." She summarizes what she's just heard from Marco, and then makes sure it sounds right to him.

Quin spends a few more minutes drawing out the key strategic goals for ATN!, and then mapping those back to the current work of the team. At each step, she carefully echoes back to Marco what she's just heard, and asks if she's got it right.

Finally, she pauses and looks through her notes. "Let me see if I've got the overall story," she says. She then takes them to time to give a brief summary of everything they've just discussed. Because she's heard Marco say "engaged customers", "start with something good enough", and "make it better *with* them", she uses those exact phrases.

"Does that sound about right?" she asks Marco one final time, as she wraps up.

This time, he nods vigorously.  "Yes, that's *exactly* it. I'm glad we talked this out." He's long since stopped looking at his other screens.

"Thanks," says Quin, "me, too."

Quin has been using an *extremely* powerful technique -- "echoing back and summarizing". We'll talk in more detail about that in the next chapter. It's a superpower for working with stakeholders (and with just about everyone else, too).

By using that superpower, Quin has obtained the first part of what she needs, to develop an empathetic understanding of Marco's fears, dreams and frustrations:

*The specific way he would describe an overall "strategic intent" for the business, and how her work fits into it.*

Knowing a strategic intent, and knowing *the words the stakeholder uses to describe it*, will allow her to anchor her pitch for change in a very powerful way.

Before obtaining that intent, she might have said:

"The team is getting frustrating with the constantly changing priorities."

Unfortunately, we've already seen that Marco has a way to discount that -- "We're a startup, we have to move fast."[fn:: "Dan, why doesn't Quin just /explain/ to Marco that ATN! will /actually/ move faster if he just chooses a single goal?". In my extensive testing in the field, trying to *intellectually* convince someone to change their behavior works, let me check my notes here, approximately *never*.]

Having drawn out from Marco a statement of intent, Quin could instead open her pitch for change with something like:

"As I understand it, ATN!'s most important goal is to have a set of *engaged customers* within six to eight months. Potential investors in a next round are going to want to see happy users, running actual team activities on the platform--not just a couple of big sales. Given that, our current goal is to *very* quickly build something that is "*just good enough*". Something we can get into the hands of a few early customers, and then make better *with* them." She could then check to see if that sounds right to him, before continuing with, "Unfortunately, I'm worried that the team is struggling a bit with shifting priorities. We might miss our target for shipping something good enough for customers to start *using*."

Marco is hugely more likely to listen to that latter concern--both because it's positioning the problem in the context of their overall business goals, but also because it's *using the words he himself uses*.

Fun fact: just *stating* that overall strategic goal in your stakeholder's own words can make a big difference. It positions you as discussing what is best for the business, *not* your own "personal" frustrations.

For Quin, having obtained this information is a great start.

However, to make a full empathetic statement, she needs a bit more.

*** The Four Key Emotion Questions

Quin needs to answer the Four Key Emotion Questions about a stakeholder:

 - What is currently *frustrating* them?

 - What are they *afraid* of?

 - What makes them *feel good*?

 - What do they *dream of*?

These are an extremely powerful core for persuasion. Two focus on day-to-day experiences (frustrations and "things that feel good"), two on longer-term, deeper motivations (fears and dreams).

If you can come up with answers to these four questions, you can build an an *extremely* compelling request to try something new.

A request that the stakeholder will both *hear* and *feel* as worth listening to.

We'll spend real time on how to craft such a request in the "Design a Compelling Offer" chapter.

For now, let's continue with Quin.

Quin could use her echoing back and summarizing skill to "mine for" these answers. But she has worked closely enough with Marco that she has some good guesses.

 - *What is currently frustrating Marco?*

   Quin is pretty sure it's the lack of *velocity*.

   She can tell Marco feels like it takes forever to see any progress on the product--that's why he's starting to suggest she put more pressure on the team to work longer hours.

 - *What is Marco afraid of?*

   Quin knows that, at his last job, Marco almost got fired because of a massively failed software project. The engineering team he was working with completely lost the way, but kept a lot of that hidden from him. When the real situation came to light, Marco's CEO was so angry, he chewed Marco out in front of half the executive team.

   Given that, Quin suspects his biggest fear is suddenly discovering that the project is wildly far behind, or that the engineering team has gone off in some crazy direction. And kind of "stepping back" may *feel* like a terrifying loss of control.

 - *What makes Marco feel good?*

   Quin sees Marco absolutely light up when he has a chance to interact with a visual prototype.

   He also clearly deeply enjoys sharing what he's learned from talking with customers. Whe she stops to think about it, Quin realizes that's in part because Marco is using those debriefs to clarify his own thinking. He comes in swirling with thoughts, and by the end, he's condensed it down, and that *feels good* to him. Unfortunately, the team is dizzied and distracted by all the ideas.

 - *What does he dream of or hope for*?

   Sharing something exciting with customers that they can't wait to start using.

   Quin has also heard him say more than once that he wants to build a company where everyone feels connected to the customers. She suspects that his constant updates after his customer calls are partly driven by a desire to live up to that vision.

Now that she's got all this critical information, Quin is ready to design a single increment of change.

** Step 2. Design A (Slightly) Better Way to Work

** Step 3. Make A Compelling Offer

** Step 4. At Conclusion, Decide Together What To Do Next

* Scraps
** Multiple People

E.g. an engineering lead may want to encourage their PM partner to, early in development, deeply engage with key product tradeoffs, to prevent weeks of later churn. Unfortunately, the PM's manager, the Head of Product, has long insisted on being consulted for all key product decisions, no matter how small. Thus, the PM has just about no experience making decision on their own, and may not even fully understand that part of the product role.

Where can the engineering lead start?

This is another reason why the incremental approach is useful. For any one increment of change, you're going to pick a single key person to focus on. As you work through increments, you can then shift to someone else.

E.g. maybe the first step for that engineering lead is to advocate for just a bit of space with the Head of Product. Then, once they have that they can work with their PM partner to find a way to take a bit more ownership.[fn:: FWIW, if you want someone to take more ownership, "Start with Their Boss" is often a good rule of thumb.]

(If you're wondering how the engineering lead can possibly advocate for space if their PM partner isn't ready to step up and fill that space, we talk through that in real detail in the "Underpowered Product Team" case study. The shortest answer is: the engineering lead will commit to "leaning over" and helping do the product job, for a short period of time. The details of how they pitch this depend on whether or not the Head of Product *already* wants the PM to take more ownership, or if they themselves need to see the benefits of letting go.)
