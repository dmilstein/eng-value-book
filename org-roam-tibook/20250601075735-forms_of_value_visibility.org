:PROPERTIES:
:ID:       E7DB3CD4-9B7B-425B-BF07-E2607DDD6670
:END:
#+title: Forms of Value & Visibility
#+filetags: :Chapter:
#+SELECT_TAGS
#+OPTIONS: tags:nil

* Forms of Value & Visibility             :export:
# BAD PROSE GO
In the below, we're going to go through a list of ways that engineering teams can create value for an overall business.

Feel free to pick and choose the ones that you think might be useful to you, in your current situation.

For each, we'll first touch on why Bertha, our economically rational investor, would consider an investment to be potentially valuable.

We'll then sketch in options for creating visibility, at different investment sizes:

 - Small: a quick on-the-side bit of work or a modest-scoped ticket

 - Medium: a project that might take a few engineers a few weeks

 - Large: a multi-month cross-team initiative or the mandate for a durable team.

I'm deliberately making some of the small options *very small*

I want them to be things you could do *right now* -- even if you're in the middle of some intense crunch.

Get that small one out there, go back to crunching, and then check back in a week later -- maybe then you'll have enough visibility to motivate just a bit more investment.

A few notes, before we dive in.

First, Bertha's perspective is *not* intended to be a model for how your stakeholders think (unless you happen to have some, like, *extremely* rational stakeholders? Which would be awesome? But also surprising?).

The discussions of what Bertha would think are for *you* to understand how to map engineer concerns to potential value for the business.

In later chapters, we'll show how to bring your stakeholders along on this journey (and visibility will prove to be a huge part of that).

Second, I do not develop precise, dollar-figure estimates of potential increases in company value. I have always been interested in doing so, but I have managed to get pretty far without such precision. Instead, I've focused on creating enough visibility to make good enough tradeoff and prioritization decisions, frequently enough. Getting into repeated decision-making loops is often more valuable than making a single decision incredibly well.[fn:: the best of both worlds is running a one-time heavyweight process to determine quantitative decison-rules that bake in an overall economic framework. See Don Reinertsen's story about aircraft weight/cost tradeoffs.]

Okay, let's go.

** Ship Smaller Changes More Often
*** The Economic Value

Our economically rational investor Bertha understands that your company's future profits are, ultimately, strongly influenced by by how quickly your engineering and product team can go through repeated cycles where they build, then ship, and then *learn* (and then start over again with build).

Being, frankly, *more* rational than the median software company CEO, she understands that it is only through such learning loops that teams can hone in on software that is both *valuable to customers* and *feasible to build* (the intersection set of those two is essentially impossible to predict in advance).

The faster teams can go through such loops, the more quickly they'll be able to develop new products or services that customers are willing to pay for (and be able to address issues that are causing customers to churn, and be able to reduce the cost to serve customers, etc).

For a company where technology plays some central role in the business, those discovery loops are at the very heart of how engineering and product teams increase company value.

Thus, the speed of learning and discovery has a huge, multiplicative long-term impact.

A team that goes from shipping once a quarter to shipping once a month can make *3 times* as many decisions-based-on-learning in a year.

(For those curious to learn more, please enjoy [[id:D901A4C9-885B-4F42-8B8D-3595616857E8][The Extraordinary Value of Knowing What To Do Next]], which I have crammed into an appendix because, frankly, I could not help myself)

But, wait, if Bertha is *more* rational than the median company CEO, because the median company CEO doesn't fully understand the value of being able to safely and quickly ship small changes, how can you motivate investment in this area?

Luckily, you and Bertha have strong support for your shared belief in the economic value of improving deploys, thanks to the truly marvelous book Accelerate.

<XXX and XXX> conducted *actually valid research* (in software engineering! it's nearly unique!) and demonstrate a clear link between long-term company value and the speed, frequency and safety which which teams are able to ship code.[fn:: shipping code isn't the same as releasing it. Value is created if small changes are frequently *deployed* to production, even if customers can't *see* those changes -- e.g. because they are hidden behind feature flags.]

Accelerate names 4 Golden Metrics:

 - Deploy Lead Time: the time to get a single change out to production

 - Change Frequency: how often each engineer ships changes to production

 - Revert Frequency: how often changes have to be reverted after deploy

 - Mean Time to Recover: the average duration of outages

That said, I (no longer!) ask my stakeholders to read Accelerate. Instead, my current game plan is:

 - Name "smaller, more frequent deploys" as a known industry best practice

 - Cite Accelerate as research-based evidence

 - Ensure the Accelerate metrics are both visible to and understood by stakeholders

 - Ensure stakeholders hear about the wins enabled by small, frequent deploys

*** Forms of Visibility
**** Small

Ask engineers to manually log their deploys in a spreadsheet.

Write some quick and dirty scripts to scrape log files.

Run a weekly survey or Slack workflow to ask people about how long the worst deploy they did in the last week took.

**** Medium
Capture versions of 1-2 Accelerate metrics.

Instrument your deploy pipeline to measure how long various stages within it are taking.

**** Large

Set up a durable team that is responsible for release tooling, and hold them accountable to reporting on the core Accelerate metrics.

Bootstrap an engineering-team wide practice of high-quality post-mortems, with widely visible summaries (see below).

*** Notes

A few tactical points if you are going to spend real time with the Accelerate metrics (which I heartily recommend).

The second two -- Revert Frequency and Mean Time to Restore -- are a bit tricky.

Each represents a genuinely important piece of the puzzle of enabling small, safe, frequent deploys... but I've never found a way to stick a *number* on them that didn't immediately get stuck in a definitional morass:

 - When is an urgent redeploy actually a "revert"?

 - When is a revert just a planned test?

   Say, by some engineer exploring an issue in that one horrible part of your system that requires deploys to work on at all? (You know, the part where the git commits all say things like "Maybe fix this time?", "Goddamn it", "Work plz")

 - When do we say an outage is fully "over"?

Your log files don't tend to have good proxies for these.

Thus, instead of aiming for *numbers* to build visibility into these proxies for resilience, I recommend developing a practice of running thorough post-mortems with clear, widely shared summaries of the findings (see [[id:3DE23585-34F0-4C88-A16B-4558ACC45C99][Make Your Post-Mortems an Act of Visibility]]).

That said, I *do* recommend measuring Deploy Lead Time and Change Frequency.

Those are super powerful and tend to be more amenable to measurement from your technical systems.

As you dig in, be ready to spend real time to wrestling with questions such as:

 - Do we break out measurements for different "kinds" of deploys (front end vs back end, legacy code vs new system, one repo vs another, one team vs another)?

 - How do we determine when an engineer "intended" to ship a change to production?

 - How do we measure / report on engineers batching up sets of changes and shipping all of them at once?

 - How do we measure / report on single "conceptual" changes that require multiple deploys to get fully live?

 - Do we distinguish the hot fix/urgent path from normal deploys?

** Enable (Specific) Product Improvements

Your product team has an ambitious plan to build something cool.

Good news: customers are genuinely eager to use this cool thing!

Bad news: building it requires your team to dig into that horrible part of the legacy codebase that was initially written by contractors ten years ago, has no tests that you can trust worth a damn, and is based on a data model that is a malevolent joke against your current reality.

*** The Economic Value

The core trick here is to convert this from a technical investment to a *product* investment.

In other words, the product team *already thinks* there's value here -- they just don't realize there's more of a *cost* than usual.

Let your product team talk to Bertha about how great it will be once this new features ships.

Bertha is ready to hear from you that she should be careful about how strongly she believes in this promise of future profits, given the risks larded throughout this part of your codebase.

Making those risks visible and gradually wearing them down will therefore create value.

*** Forms of Visibility

Fundamentally, these are intertwined with the tactics for a significant rewrite -- e.g. see my How to Survive a Ground Up Rewrite. But I'll call out a couple with specific tactics with regard to visibility.

**** Small

If your team is *totally unfamiliar* with the terrifying code, you can create a spreadsheet of "engineers who are able to develop, test and safely deploy a change to System X".

If your team can, like, check out and build the code, but don't know how to make any meaningful changes, you can create a spreadsheet of "engineers who know how to work in System X".

Those may sound a bit silly, but *showing* your product team a list of the exactly one engineer who can currently check out the legacy app is a genuine form of visibility. You can based your decisions and goals for an upcoming sprint on that, you can later update it and show progress over time, etc.

If the team understands the code, but the data model imposes a painful set of restrictions, you can write a set of user stories reflecting this.[fn:: I adore user stories -- especially in the formulation from User Stories Applied.]

Why User Stories? Because saying "We're totally unable to support 'As a teacher, I can batch assign to all students in my class in one step'" is much much clearer than "We don't have reliable mappings from student to class to teachers in the database".

If changes to this system have a bad habit of breaking other things, you can share that *fact* with stakeholders. No, really, that's a form of visibility!

If working in this system has the potential to irreversibly corrupt key customer data, and there are no guardrails to prevent you from doing so, you can share that fact with your product team. Maybe you can find and share a few measurable guardrails (e.g. frequency of backups and/or speed of restore).

**** Medium

Weird, hidden dependencies are often at the core of why it's so difficult to safely change legacy code.

Various medium-sized projects which can make the dependencies in production visible.

One useful approach is to push "fake data" through your production systems on a regular basis. You can then make sure that every system that consumes the data knows to log and discard that fake data.

E.g. you can add a series of known transactions from "Robert ;Drop All", every day, as a sort of tracer bullet, fired into your systems.

Initially, that will create a flurry of exciting production bugs as people start finding Bobby in systems you had no idea consumed your data.

Those bugs are a small price to pay for gradually mapping out the hidden data dependencies.[fn:: As a bonus, you can then start monitoring for the *presence* of Bobby transactions, which will totally save you some day, when a trivial config adjustment silently kills the flow of data to your most important consumer]

Brief soapbox rant: engineers or stakeholders might say "Oh, that's going to take too much time, we don't know enough about how the code works to safely add fake transactions."

Um, if you don't know how to add fake transactions, you don't know how to add *real transactions*.

It is usually much faster to learn by attempting to add something deliberately fake and *looking for it* than by shoving through a real change and then spending the next several months getting absolutely nothing done because you silently broke half of production (and now enjoy a parade of people showing up at your desk, furious and/or distraught).

Okay, off soapbox now.

Anand Mukhandan did a brilliant version of this at Wayfair, when he took a simply terrifying giant PHP file with hundreds of distinct if statements and figured out a way to log the *combinations* of ifs that were most often getting triggered in production, which he could then factor out into coherent functions.

**** Large

For "major" forms of visibility, you want to find something that matters to your customers *and* your business.

That will project-specific, because it should reflect the specific business challenges you're solving by adjusting the code.

Again, the potential *value* here is already clear to the rest of the business -- you just need to show that you've enabled some of it.

As an example, at Ellevation, Justin Hildebrandt led a major effort to restructure a student-facing product, in order to better support the various workflows that teachers needed for assigning and reassigning work to students.

Justin spent real time ensuring his stakeholders understood the limitations of the old, rigid assignment system. Once the team had stitched a more flexible one through the code, they were able to demo some basic new features that were simply impossible to build before.

Such demos were a very powerful form of visible progress -- and they were perceived as valuable in no small part because Justin took the time to ensure everyone understood what *wasn't* possible before.

*** Notes

I will make a bold prediction: this specific flavor of technical invstment opportunity is never going to go out of style.

Edmund points out that almost all companies have some genuinely hideous mass of code that sits at the heart of their business.

He calls this The Golden Cesspool - https://www.tomheon.com/2017/03/24/the-golden-cesspool/

To name a few /completely theoretical/ examples:

 - The ad billing engine for a travel site

 - Order shipping logic for an ecommerce site

 - Eligibility calculations for a health care company

 - Student selection and filtering logic, for an EdTech company

In each case, tons of complex business logic has been shoved into the code over the years, all sorts of state gets updated in all sorts of deeply non-obvious ways.

Your engineering team likely already thinks about this morass as a prime example of tech debt, and are itching to rewrite it.

They may, in fact, resist your attempt to methodically build visibility and incrementally improve things, with each increment slowly unlocking some set of product capabilities.

Instead, they'll make the faux-economic argument that it'd be better to just commit to a ground-up rewrite of that core system. They'll claim that it will be both faster and cheaper to do so "from scratch" rather than through a slow, incremental shift.

Once that rewrite is fully finished, the things the product team are asking for will be super easy to build!

What could go wrong?

Please see our later chapter: "The Giant Rewrite: Only Undertake If You Wish To Be Fired Midway Through a Long, Painful & Ultimately Unsuccessful Death March", which has some tips on how one *can* gradually rewrite such systems.


** Reduce Steady-State Maintenance Work
*** The Economic Value
*** Forms of Visibility
**** Small
**** Medium
**** Large
** Reduce Interruptive Maintenance Work
*** The Economic Value
*** Forms of Visibility
**** Small
**** Medium
**** Large
** Enable Parallel Development Across Multiple Teams
*** The Economic Value
*** Forms of Visibility
**** Small
**** Medium
**** Large
** Reduce Risk of Losing Data
*** The Economic Value
*** Forms of Visibility
**** Small
**** Medium
**** Large
** Reduce Frequency of Outages
*** The Economic Value
*** Forms of Visibility
**** Small
**** Medium
**** Large
** Reduce Duration of Outages
*** The Economic Value
*** Forms of Visibility
**** Small
**** Medium
**** Large
** Reduce Risk of Security Breaches
*** The Economic Value
*** Forms of Visibility
**** Small
**** Medium
**** Large
** Ensure Many Customers Can Use System At Once
Aka, Load & Scale
*** The Economic Value
*** Forms of Visibility
**** Small
**** Medium
**** Large
** Ensure Big Customers Can Use System In Big Ways
*** The Economic Value
*** Forms of Visibility
**** Small
**** Medium
**** Large
** Reduce Costs Of Serving Customers (But, See: Drunk, Lamppost)
*** The Economic Value
*** Forms of Visibility
**** Small
**** Medium
**** Large

* Scraps
Maybe:

"A Catalog of Forms of Value/Visibility"
"A Tour of Forms of Value + Visibilty"

Map Concerns to Value to Visibility
Concerns -> Value -> Visibility: A Tour

A Catalog of Concerns/Value/Visibility
A Catalog of Forms of Concerns/Value/Visibility

** Structure for each

Value - why Bertha cares.

Visibility:
 - Cheap
 - Fuller
 - Fullest

Incremental Options? Nah, those are the increments.
